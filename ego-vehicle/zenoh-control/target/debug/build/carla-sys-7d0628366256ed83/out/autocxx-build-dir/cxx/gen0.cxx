#include "carla_rust.hpp"
#include "carla/Time.h"
#include "carla/Memory.h"
#include "carla/geom/Location.h"
#include "carla/geom/Rotation.h"
#include "carla/geom/Transform.h"
#include "carla/geom/Vector2D.h"
#include "carla/geom/Vector3D.h"
#include "carla/rpc/AttachmentType.h"
#include "carla/rpc/VehicleControl.h"
#include "carla/rpc/VehicleLightState.h"
#include "carla/rpc/VehicleDoor.h"
#include "carla/rpc/VehicleWheels.h"
#include "carla/rpc/VehicleAckermannControl.h"
#include "carla/rpc/OpendriveGenerationParameters.h"
#include "carla/rpc/TrafficLightState.h"
#include "carla/rpc/GearPhysicsControl.h"
#include "carla/rpc/WeatherParameters.h"
#include "carla/rpc/ObjectLabel.h"
#include "carla/trafficmanager/Constants.h"
#include "carla/trafficmanager/TrafficManager.h"
#include "carla/trafficmanager/SimpleWaypoint.h"
#include "carla/client/Waypoint.h"
#include "carla/client/Sensor.h"
#include "carla/client/Vehicle.h"
#include "carla/client/Walker.h"
#include "carla/client/TrafficLight.h"
#include "carla/client/TrafficSign.h"
#include "carla/client/Junction.h"
#include "carla/client/ActorBlueprint.h"
#include "carla/client/ActorList.h"
#include "carla/client/BlueprintLibrary.h"
#include "carla/client/Landmark.h"
#include "carla/client/LaneInvasionSensor.h"
#include "carla/client/Light.h"
#include "carla/client/LightManager.h"
#include "carla/client/Map.h"
#include "carla/client/World.h"
#include "carla/client/WorldSnapshot.h"
#include "carla/client/Timestamp.h"
#include "carla/client/Light.h"
#include "carla/sensor/SensorData.h"
#include "carla/sensor/data/Image.h"
#include "carla/sensor/data/RadarMeasurement.h"
#include "carla/sensor/data/RadarData.h"
#include "carla/sensor/data/LidarMeasurement.h"
#include "carla/sensor/data/SemanticLidarMeasurement.h"
#include "carla/sensor/data/LidarData.h"
#include "carla/sensor/data/SemanticLidarData.h"
#include "carla/sensor/data/ObstacleDetectionEvent.h"
#include "carla/sensor/data/CollisionEvent.h"
#include "carla/sensor/data/LaneInvasionEvent.h"
#include "autocxxgen_ffi.h"
#include <array>
#include <cstddef>
#include <cstdint>
#include <memory>
#include <new>
#include <string>
#include <type_traits>
#include <utility>
#include <vector>
#if __cplusplus >= 201703L
#include <string_view>
#endif

namespace rust {
inline namespace cxxbridge1 {
// #include "rust/cxx.h"

namespace {
template <typename T>
class impl;
} // namespace

class String;

#ifndef CXXBRIDGE1_RUST_STR
#define CXXBRIDGE1_RUST_STR
class Str final {
public:
  Str() noexcept;
  Str(const String &) noexcept;
  Str(const std::string &);
  Str(const char *);
  Str(const char *, std::size_t);

  Str &operator=(const Str &) & noexcept = default;

  explicit operator std::string() const;
#if __cplusplus >= 201703L
  explicit operator std::string_view() const;
#endif

  const char *data() const noexcept;
  std::size_t size() const noexcept;
  std::size_t length() const noexcept;
  bool empty() const noexcept;

  Str(const Str &) noexcept = default;
  ~Str() noexcept = default;

  using iterator = const char *;
  using const_iterator = const char *;
  const_iterator begin() const noexcept;
  const_iterator end() const noexcept;
  const_iterator cbegin() const noexcept;
  const_iterator cend() const noexcept;

  bool operator==(const Str &) const noexcept;
  bool operator!=(const Str &) const noexcept;
  bool operator<(const Str &) const noexcept;
  bool operator<=(const Str &) const noexcept;
  bool operator>(const Str &) const noexcept;
  bool operator>=(const Str &) const noexcept;

  void swap(Str &) noexcept;

private:
  class uninit;
  Str(uninit) noexcept;
  friend impl<Str>;

  std::array<std::uintptr_t, 2> repr;
};
#endif // CXXBRIDGE1_RUST_STR

#ifndef CXXBRIDGE1_IS_COMPLETE
#define CXXBRIDGE1_IS_COMPLETE
namespace detail {
namespace {
template <typename T, typename = std::size_t>
struct is_complete : std::false_type {};
template <typename T>
struct is_complete<T, decltype(sizeof(T))> : std::true_type {};
} // namespace
} // namespace detail
#endif // CXXBRIDGE1_IS_COMPLETE

#ifndef CXXBRIDGE1_RELOCATABLE
#define CXXBRIDGE1_RELOCATABLE
namespace detail {
template <typename... Ts>
struct make_void {
  using type = void;
};

template <typename... Ts>
using void_t = typename make_void<Ts...>::type;

template <typename Void, template <typename...> class, typename...>
struct detect : std::false_type {};
template <template <typename...> class T, typename... A>
struct detect<void_t<T<A...>>, T, A...> : std::true_type {};

template <template <typename...> class T, typename... A>
using is_detected = detect<void, T, A...>;

template <typename T>
using detect_IsRelocatable = typename T::IsRelocatable;

template <typename T>
struct get_IsRelocatable
    : std::is_same<typename T::IsRelocatable, std::true_type> {};
} // namespace detail

template <typename T>
struct IsRelocatable
    : std::conditional<
          detail::is_detected<detail::detect_IsRelocatable, T>::value,
          detail::get_IsRelocatable<T>,
          std::integral_constant<
              bool, std::is_trivially_move_constructible<T>::value &&
                        std::is_trivially_destructible<T>::value>>::type {};
#endif // CXXBRIDGE1_RELOCATABLE

namespace detail {
template <typename T, typename = void *>
struct operator_new {
  void *operator()(::std::size_t sz) { return ::operator new(sz); }
};

template <typename T>
struct operator_new<T, decltype(T::operator new(sizeof(T)))> {
  void *operator()(::std::size_t sz) { return T::operator new(sz); }
};
} // namespace detail

template <typename T>
union MaybeUninit {
  T value;
  void *operator new(::std::size_t sz) { return detail::operator_new<T>{}(sz); }
  MaybeUninit() {}
  ~MaybeUninit() {}
};

namespace {
template <typename T>
void destroy(T *ptr) {
  ptr->~T();
}

template <bool> struct deleter_if {
  template <typename T> void operator()(T *) {}
};

template <> struct deleter_if<true> {
  template <typename T> void operator()(T *ptr) { ptr->~T(); }
};
} // namespace
} // namespace cxxbridge1
} // namespace rust

using std_pair_float_float_AutocxxConcrete = ::std_pair_float_float_AutocxxConcrete;
using std_basic_ostream_char_AutocxxConcrete = ::std_basic_ostream_char_AutocxxConcrete;
using carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete = ::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete;
using std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete = ::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete;
using std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete = ::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete;
namespace carla {
  namespace sensor {
    namespace data {
      using Image = ::carla::sensor::data::Image;
    }
  }
}

static_assert(
    ::rust::IsRelocatable<::carla::geom::Vector3D>::value,
    "type carla::geom::Vector3D should be trivially move constructible and trivially destructible in C++ to be used as an argument of `DistanceArcToPoint_autocxx_wrapper_0xd539d5a17acbdd25`, `RotatePointOnOrigin2D_autocxx_wrapper_0xd539d5a17acbdd25`, `AddVertex` or return value of `Abs`, `MakeUnitVector`, `MakeSafeUnitVector` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::geom::Vector2D>::value,
    "type carla::geom::Vector2D should be trivially move constructible and trivially destructible in C++ to be used as an argument of `AddUV` or return value of `carla_geom_Vector2D_MakeUnitVector_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::geom::GeoLocation>::value,
    "type carla::geom::GeoLocation should be trivially move constructible and trivially destructible in C++ to be used as a return value of `GetGeoLocation`, `carla_rust_sensor_data_FfiGnssMeasurement_GetGeoLocation_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::rpc::TrafficLightState>::value,
    "type carla::rpc::TrafficLightState should be trivially move constructible and trivially destructible in C++ to be used as an argument of `SetState`, `carla_rust_client_FfiTrafficLight_SetState_autocxx_wrapper_0xd539d5a17acbdd25` or return value of `GetTrafficLightState`, `carla_client_TrafficLight_GetState_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiVehicle_GetTrafficLightState_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::rpc::VehicleControl>::value,
    "type carla::rpc::VehicleControl should be trivially move constructible and trivially destructible in C++ to be used as a return value of `GetControl`, `carla_rust_client_FfiVehicle_GetControl_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::rpc::ActorAttributeType>::value,
    "type carla::rpc::ActorAttributeType should be trivially move constructible and trivially destructible in C++ to be used as a return value of `carla_rust_client_FfiActorAttributeValue_GetType_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::rpc::AttachmentType>::value,
    "type carla::rpc::AttachmentType should be trivially move constructible and trivially destructible in C++ to be used as an argument of `carla_rust_client_FfiWorld_TrySpawnActor_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::rpc::CityObjectLabel>::value,
    "type carla::rpc::CityObjectLabel should be trivially move constructible and trivially destructible in C++ to be used as a return value of `carla_rust_rpc_FfiEnvironmentObjectRef_type_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::rpc::WeatherParameters>::value,
    "type carla::rpc::WeatherParameters should be trivially move constructible and trivially destructible in C++ to be used as a return value of `carla_rust_client_FfiWorld_GetWeather_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::rpc::AckermannControllerSettings>::value,
    "type carla::rpc::AckermannControllerSettings should be trivially move constructible and trivially destructible in C++ to be used as a return value of `carla_client_Vehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiVehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::rpc::VehicleDoor>::value,
    "type carla::rpc::VehicleDoor should be trivially move constructible and trivially destructible in C++ to be used as an argument of `carla_rust_client_FfiVehicle_OpenDoor_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiVehicle_CloseDoor_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::rpc::VehicleWheelLocation>::value,
    "type carla::rpc::VehicleWheelLocation should be trivially move constructible and trivially destructible in C++ to be used as an argument of `carla_rust_client_FfiVehicle_SetWheelSteerDirection_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiVehicle_GetWheelSteerAngle_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::sensor::data::RadarDetection>::value,
    "type carla::sensor::data::RadarDetection should be trivially move constructible and trivially destructible in C++ to be used as an argument of `carla_sensor_data_RadarData_WriteDetection_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::road::element::LaneMarking::Type>::value,
    "type carla::road::element::LaneMarking::Type should be trivially move constructible and trivially destructible in C++ to be used as a return value of `carla_rust_road_element_FfiLaneMarking_type_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::road::element::LaneMarking::Color>::value,
    "type carla::road::element::LaneMarking::Color should be trivially move constructible and trivially destructible in C++ to be used as a return value of `color` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::road::element::LaneMarking::LaneChange>::value,
    "type carla::road::element::LaneMarking::LaneChange should be trivially move constructible and trivially destructible in C++ to be used as a return value of `carla_rust_client_FfiWaypoint_GetLaneChange_autocxx_wrapper_0xd539d5a17acbdd25`, `lane_change` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::traffic_manager::RoadOption>::value,
    "type carla::traffic_manager::RoadOption should be trivially move constructible and trivially destructible in C++ to be used as a return value of `road_option` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla_rust::geom::FfiLocation>::value,
    "type carla_rust::geom::FfiLocation should be trivially move constructible and trivially destructible in C++ to be used as an argument of `carla_rust_client_FfiWorld_ProjectPoint_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiWorld_GroundProjection_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiWorld_CastRay_autocxx_wrapper_0xd539d5a17acbdd25` or return value of `carla_rust_client_FfiActor_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiLightRef_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla_rust::geom::FfiTransform>::value,
    "type carla_rust::geom::FfiTransform should be trivially move constructible and trivially destructible in C++ to be used as a return value of `carla_rust_sensor_FfiSensorData_GetSensorTransform_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiActor_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiWaypoint_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla_rust::geom::FfiBoundingBox>::value,
    "type carla_rust::geom::FfiBoundingBox should be trivially move constructible and trivially destructible in C++ to be used as a return value of `carla_rust_client_FfiJunction_GetBoundingBox_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla_rust::rpc::FfiRpcLightGroup>::value,
    "type carla_rust::rpc::FfiRpcLightGroup should be trivially move constructible and trivially destructible in C++ to be used as an argument of `carla_rust_client_FfiLightRef_SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiLightManager_GetAllLights_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiLightManager_GetTurnedOnLights_autocxx_wrapper_0xd539d5a17acbdd25` or return value of `carla_rust_client_FfiLightRef_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiLightManager_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla_rust::sensor::data::FfiColor>::value,
    "type carla_rust::sensor::data::FfiColor should be trivially move constructible and trivially destructible in C++ to be used as an argument of `carla_rust_client_FfiLightRef_SetColor_autocxx_wrapper_0xd539d5a17acbdd25`, `SetColorList1`, `carla_rust_client_FfiLightManager_SetColor_autocxx_wrapper_0xd539d5a17acbdd25` or return value of `to_color`, `carla_rust_client_FfiLightRef_GetColor_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiLightManager_GetColor_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla_rust::client::FfiClientLightState>::value,
    "type carla_rust::client::FfiClientLightState should be trivially move constructible and trivially destructible in C++ to be used as an argument of `SetLightStateList1` or return value of `carla_rust_client_FfiLightRef_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_client_FfiLightManager_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::rpc::VehicleLightState::LightState>::value,
    "type carla::rpc::VehicleLightState::LightState should be trivially move constructible and trivially destructible in C++ to be used as an argument of `carla_rpc_VehicleLightState_new1_autocxx_wrapper_0xd539d5a17acbdd25` or return value of `GetLightStateEnum`, `light_state`, `carla_rust_client_FfiVehicle_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::road::SignalOrientation>::value,
    "type carla::road::SignalOrientation should be trivially move constructible and trivially destructible in C++ to be used as a return value of `GetOrientation`, `carla_rust_client_FfiLandmark_GetOrientation_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::rpc::VehicleFailureState>::value,
    "type carla::rpc::VehicleFailureState should be trivially move constructible and trivially destructible in C++ to be used as a return value of `GetFailureState` in Rust");
static_assert(
    ::rust::IsRelocatable<::carla::road::Lane::LaneType>::value,
    "type carla::road::Lane::LaneType should be trivially move constructible and trivially destructible in C++ to be used as an argument of `carla_rust_client_FfiJunction_GetWaypoints_autocxx_wrapper_0xd539d5a17acbdd25` or return value of `carla_rust_client_FfiWaypoint_GetType_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");
static_assert(
    ::rust::IsRelocatable<::c_int>::value,
    "type c_int should be trivially move constructible and trivially destructible in C++ to be used as an argument of `carla_rpc_EpisodeSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_rust_rpc_FfiEpisodeSettings_new2_autocxx_wrapper_0xd539d5a17acbdd25` or return value of `max_substeps`, `to_int` in Rust");
static_assert(
    ::rust::IsRelocatable<::c_uint>::value,
    "type c_uint should be trivially move constructible and trivially destructible in C++ to be used as an argument of `carla_rust_client_FfiWorld_SetPedestriansSeed_autocxx_wrapper_0xd539d5a17acbdd25` or return value of `carla_sensor_data_LidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_sensor_data_LidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25`, `carla_sensor_data_SemanticLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25` in Rust");

extern "C" {
::std::string *cxxbridge1$autocxx_make_string_0xd539d5a17acbdd25(::rust::Str str_) noexcept {
  ::std::unique_ptr<::std::string> (*autocxx_make_string_0xd539d5a17acbdd25$)(::rust::Str) = ::autocxx_make_string_0xd539d5a17acbdd25;
  return autocxx_make_string_0xd539d5a17acbdd25$(str_).release();
}

::carla::geom::Vector3D *cxxbridge1$Vector3D_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::geom::Vector3D *(*Vector3D_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::Vector3D_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return Vector3D_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$Vector3D_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D *arg0) noexcept {
  void (*Vector3D_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D *) = ::Vector3D_free_autocxx_wrapper_0xd539d5a17acbdd25;
  Vector3D_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::geom::Vector3DInt *cxxbridge1$Vector3DInt_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::geom::Vector3DInt *(*Vector3DInt_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::Vector3DInt_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return Vector3DInt_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$Vector3DInt_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3DInt *arg0) noexcept {
  void (*Vector3DInt_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3DInt *) = ::Vector3DInt_free_autocxx_wrapper_0xd539d5a17acbdd25;
  Vector3DInt_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::geom::Math *cxxbridge1$Math_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::geom::Math *(*Math_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::Math_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return Math_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$Math_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Math *arg0) noexcept {
  void (*Math_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Math *) = ::Math_free_autocxx_wrapper_0xd539d5a17acbdd25;
  Math_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::geom::Rotation *cxxbridge1$Rotation_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::geom::Rotation *(*Rotation_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::Rotation_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return Rotation_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$Rotation_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Rotation *arg0) noexcept {
  void (*Rotation_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Rotation *) = ::Rotation_free_autocxx_wrapper_0xd539d5a17acbdd25;
  Rotation_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::geom::BoundingBox *cxxbridge1$BoundingBox_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::geom::BoundingBox *(*BoundingBox_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::BoundingBox_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return BoundingBox_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$BoundingBox_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::BoundingBox *arg0) noexcept {
  void (*BoundingBox_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::BoundingBox *) = ::BoundingBox_free_autocxx_wrapper_0xd539d5a17acbdd25;
  BoundingBox_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::geom::Vector2D *cxxbridge1$Vector2D_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::geom::Vector2D *(*Vector2D_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::Vector2D_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return Vector2D_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$Vector2D_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector2D *arg0) noexcept {
  void (*Vector2D_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector2D *) = ::Vector2D_free_autocxx_wrapper_0xd539d5a17acbdd25;
  Vector2D_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::geom::MeshMaterial *cxxbridge1$MeshMaterial_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::geom::MeshMaterial *(*MeshMaterial_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::MeshMaterial_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return MeshMaterial_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$MeshMaterial_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshMaterial *arg0) noexcept {
  void (*MeshMaterial_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshMaterial *) = ::MeshMaterial_free_autocxx_wrapper_0xd539d5a17acbdd25;
  MeshMaterial_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::geom::Mesh *cxxbridge1$Mesh_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::geom::Mesh *(*Mesh_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::Mesh_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return Mesh_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$Mesh_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Mesh *arg0) noexcept {
  void (*Mesh_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Mesh *) = ::Mesh_free_autocxx_wrapper_0xd539d5a17acbdd25;
  Mesh_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::geom::GeoLocation *cxxbridge1$GeoLocation_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::geom::GeoLocation *(*GeoLocation_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::GeoLocation_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return GeoLocation_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$GeoLocation_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::GeoLocation *arg0) noexcept {
  void (*GeoLocation_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::GeoLocation *) = ::GeoLocation_free_autocxx_wrapper_0xd539d5a17acbdd25;
  GeoLocation_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::geom::CubicPolynomial *cxxbridge1$CubicPolynomial_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::geom::CubicPolynomial *(*CubicPolynomial_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::CubicPolynomial_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return CubicPolynomial_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$CubicPolynomial_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::CubicPolynomial *arg0) noexcept {
  void (*CubicPolynomial_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::CubicPolynomial *) = ::CubicPolynomial_free_autocxx_wrapper_0xd539d5a17acbdd25;
  CubicPolynomial_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::geom::MeshFactory *cxxbridge1$MeshFactory_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::geom::MeshFactory *(*MeshFactory_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::MeshFactory_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return MeshFactory_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$MeshFactory_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshFactory *arg0) noexcept {
  void (*MeshFactory_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshFactory *) = ::MeshFactory_free_autocxx_wrapper_0xd539d5a17acbdd25;
  MeshFactory_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::geom::MeshFactory::RoadParameters *cxxbridge1$MeshFactory_RoadParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::geom::MeshFactory::RoadParameters *(*MeshFactory_RoadParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::MeshFactory_RoadParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return MeshFactory_RoadParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$MeshFactory_RoadParameters_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshFactory::RoadParameters *arg0) noexcept {
  void (*MeshFactory_RoadParameters_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshFactory::RoadParameters *) = ::MeshFactory_RoadParameters_free_autocxx_wrapper_0xd539d5a17acbdd25;
  MeshFactory_RoadParameters_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}
} // extern "C"

namespace carla {
namespace geom {
extern "C" {
float carla$geom$cxxbridge1$Vector3D$SquaredLength(::carla::geom::Vector3D const &self) noexcept {
  float (::carla::geom::Vector3D::*SquaredLength$)() const = &::carla::geom::Vector3D::SquaredLength;
  return (self.*SquaredLength$)();
}

float carla$geom$cxxbridge1$Vector3D$Length(::carla::geom::Vector3D const &self) noexcept {
  float (::carla::geom::Vector3D::*Length$)() const = &::carla::geom::Vector3D::Length;
  return (self.*Length$)();
}

float carla$geom$cxxbridge1$Vector3D$SquaredLength2D(::carla::geom::Vector3D const &self) noexcept {
  float (::carla::geom::Vector3D::*SquaredLength2D$)() const = &::carla::geom::Vector3D::SquaredLength2D;
  return (self.*SquaredLength2D$)();
}

float carla$geom$cxxbridge1$Vector3D$Length2D(::carla::geom::Vector3D const &self) noexcept {
  float (::carla::geom::Vector3D::*Length2D$)() const = &::carla::geom::Vector3D::Length2D;
  return (self.*Length2D$)();
}

void carla$geom$cxxbridge1$Vector3D$Abs(::carla::geom::Vector3D const &self, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (::carla::geom::Vector3D::*Abs$)() const = &::carla::geom::Vector3D::Abs;
  new (return$) ::carla::geom::Vector3D((self.*Abs$)());
}

void carla$geom$cxxbridge1$Vector3D$MakeUnitVector(::carla::geom::Vector3D const &self, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (::carla::geom::Vector3D::*MakeUnitVector$)() const = &::carla::geom::Vector3D::MakeUnitVector;
  new (return$) ::carla::geom::Vector3D((self.*MakeUnitVector$)());
}

void carla$geom$cxxbridge1$Vector3D$MakeSafeUnitVector(::carla::geom::Vector3D const &self, float epsilon, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (::carla::geom::Vector3D::*MakeSafeUnitVector$)(float) const = &::carla::geom::Vector3D::MakeSafeUnitVector;
  new (return$) ::carla::geom::Vector3D((self.*MakeSafeUnitVector$)(epsilon));
}
} // extern "C"
} // namespace geom
} // namespace carla

extern "C" {
void cxxbridge1$carla_geom_Vector3D_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D *autocxx_gen_this) noexcept {
  void (*carla_geom_Vector3D_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D *) = ::carla_geom_Vector3D_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Vector3D_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_Vector3D_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D *autocxx_gen_this, float ix, float iy, float iz) noexcept {
  void (*carla_geom_Vector3D_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D *, float, float, float) = ::carla_geom_Vector3D_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Vector3D_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ix, iy, iz);
}

::std::int64_t cxxbridge1$carla_geom_Vector3DInt_SquaredLength_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3DInt const &autocxx_gen_this) noexcept {
  ::std::int64_t (*carla_geom_Vector3DInt_SquaredLength_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3DInt const &) = ::carla_geom_Vector3DInt_SquaredLength_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_geom_Vector3DInt_SquaredLength_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_geom_Vector3DInt_Length_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3DInt const &autocxx_gen_this) noexcept {
  double (*carla_geom_Vector3DInt_Length_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3DInt const &) = ::carla_geom_Vector3DInt_Length_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_geom_Vector3DInt_Length_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_Vector3DInt_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3DInt *autocxx_gen_this) noexcept {
  void (*carla_geom_Vector3DInt_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3DInt *) = ::carla_geom_Vector3DInt_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Vector3DInt_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_Vector3DInt_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3DInt *autocxx_gen_this, ::std::int32_t ix, ::std::int32_t iy, ::std::int32_t iz) noexcept {
  void (*carla_geom_Vector3DInt_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3DInt *, ::std::int32_t, ::std::int32_t, ::std::int32_t) = ::carla_geom_Vector3DInt_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Vector3DInt_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ix, iy, iz);
}

void cxxbridge1$Cross_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D const &a, ::carla::geom::Vector3D const &b, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (*Cross_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D const &, ::carla::geom::Vector3D const &) = ::Cross_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector3D(Cross_autocxx_wrapper_0xd539d5a17acbdd25$(a, b));
}

float cxxbridge1$Dot_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D const &a, ::carla::geom::Vector3D const &b) noexcept {
  float (*Dot_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D const &, ::carla::geom::Vector3D const &) = ::Dot_autocxx_wrapper_0xd539d5a17acbdd25;
  return Dot_autocxx_wrapper_0xd539d5a17acbdd25$(a, b);
}

float cxxbridge1$Dot2D_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D const &a, ::carla::geom::Vector3D const &b) noexcept {
  float (*Dot2D_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D const &, ::carla::geom::Vector3D const &) = ::Dot2D_autocxx_wrapper_0xd539d5a17acbdd25;
  return Dot2D_autocxx_wrapper_0xd539d5a17acbdd25$(a, b);
}

float cxxbridge1$DistanceSquared_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D const &a, ::carla::geom::Vector3D const &b) noexcept {
  float (*DistanceSquared_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D const &, ::carla::geom::Vector3D const &) = ::DistanceSquared_autocxx_wrapper_0xd539d5a17acbdd25;
  return DistanceSquared_autocxx_wrapper_0xd539d5a17acbdd25$(a, b);
}

float cxxbridge1$DistanceSquared2D_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D const &a, ::carla::geom::Vector3D const &b) noexcept {
  float (*DistanceSquared2D_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D const &, ::carla::geom::Vector3D const &) = ::DistanceSquared2D_autocxx_wrapper_0xd539d5a17acbdd25;
  return DistanceSquared2D_autocxx_wrapper_0xd539d5a17acbdd25$(a, b);
}

float cxxbridge1$Distance_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D const &a, ::carla::geom::Vector3D const &b) noexcept {
  float (*Distance_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D const &, ::carla::geom::Vector3D const &) = ::Distance_autocxx_wrapper_0xd539d5a17acbdd25;
  return Distance_autocxx_wrapper_0xd539d5a17acbdd25$(a, b);
}

float cxxbridge1$Distance2D_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D const &a, ::carla::geom::Vector3D const &b) noexcept {
  float (*Distance2D_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D const &, ::carla::geom::Vector3D const &) = ::Distance2D_autocxx_wrapper_0xd539d5a17acbdd25;
  return Distance2D_autocxx_wrapper_0xd539d5a17acbdd25$(a, b);
}

float cxxbridge1$LinearLerp_autocxx_wrapper_0xd539d5a17acbdd25(float a, float b, float f) noexcept {
  float (*LinearLerp_autocxx_wrapper_0xd539d5a17acbdd25$)(float, float, float) = ::LinearLerp_autocxx_wrapper_0xd539d5a17acbdd25;
  return LinearLerp_autocxx_wrapper_0xd539d5a17acbdd25$(a, b, f);
}

double cxxbridge1$GetVectorAngle_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D const &a, ::carla::geom::Vector3D const &b) noexcept {
  double (*GetVectorAngle_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D const &, ::carla::geom::Vector3D const &) = ::GetVectorAngle_autocxx_wrapper_0xd539d5a17acbdd25;
  return GetVectorAngle_autocxx_wrapper_0xd539d5a17acbdd25$(a, b);
}

::std_pair_float_float_AutocxxConcrete *cxxbridge1$DistanceSegmentToPoint_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D const &p, ::carla::geom::Vector3D const &v, ::carla::geom::Vector3D const &w) noexcept {
  ::std::unique_ptr<::std_pair_float_float_AutocxxConcrete> (*DistanceSegmentToPoint_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D const &, ::carla::geom::Vector3D const &, ::carla::geom::Vector3D const &) = ::DistanceSegmentToPoint_autocxx_wrapper_0xd539d5a17acbdd25;
  return DistanceSegmentToPoint_autocxx_wrapper_0xd539d5a17acbdd25$(p, v, w).release();
}

::std_pair_float_float_AutocxxConcrete *cxxbridge1$DistanceArcToPoint_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D *p, ::carla::geom::Vector3D *start_pos, float length, float heading, float curvature) noexcept {
  ::std::unique_ptr<::std_pair_float_float_AutocxxConcrete> (*DistanceArcToPoint_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D, ::carla::geom::Vector3D, float, float, float) = ::DistanceArcToPoint_autocxx_wrapper_0xd539d5a17acbdd25;
  return DistanceArcToPoint_autocxx_wrapper_0xd539d5a17acbdd25$(::std::move(*p), ::std::move(*start_pos), length, heading, curvature).release();
}

void cxxbridge1$RotatePointOnOrigin2D_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D *p, float angle, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (*RotatePointOnOrigin2D_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D, float) = ::RotatePointOnOrigin2D_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector3D(RotatePointOnOrigin2D_autocxx_wrapper_0xd539d5a17acbdd25$(::std::move(*p), angle));
}

void cxxbridge1$GetForwardVector_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Rotation const &rotation, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (*GetForwardVector_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Rotation const &) = ::GetForwardVector_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector3D(GetForwardVector_autocxx_wrapper_0xd539d5a17acbdd25$(rotation));
}

void cxxbridge1$GetRightVector_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Rotation const &rotation, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (*GetRightVector_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Rotation const &) = ::GetRightVector_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector3D(GetRightVector_autocxx_wrapper_0xd539d5a17acbdd25$(rotation));
}

void cxxbridge1$GetUpVector_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Rotation const &rotation, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (*GetUpVector_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Rotation const &) = ::GetUpVector_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector3D(GetUpVector_autocxx_wrapper_0xd539d5a17acbdd25$(rotation));
}

void cxxbridge1$carla_geom_Rotation_GetForwardVector_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Rotation const &autocxx_gen_this, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (*carla_geom_Rotation_GetForwardVector_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Rotation const &) = ::carla_geom_Rotation_GetForwardVector_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector3D(carla_geom_Rotation_GetForwardVector_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_geom_Rotation_GetRightVector_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Rotation const &autocxx_gen_this, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (*carla_geom_Rotation_GetRightVector_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Rotation const &) = ::carla_geom_Rotation_GetRightVector_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector3D(carla_geom_Rotation_GetRightVector_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_geom_Rotation_GetUpVector_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Rotation const &autocxx_gen_this, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (*carla_geom_Rotation_GetUpVector_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Rotation const &) = ::carla_geom_Rotation_GetUpVector_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector3D(carla_geom_Rotation_GetUpVector_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}
} // extern "C"

namespace carla {
namespace geom {
extern "C" {
void carla$geom$cxxbridge1$Rotation$RotateVector(::carla::geom::Rotation const &self, ::carla::geom::Vector3D &in_point) noexcept {
  void (::carla::geom::Rotation::*RotateVector$)(::carla::geom::Vector3D &) const = &::carla::geom::Rotation::RotateVector;
  (self.*RotateVector$)(in_point);
}

void carla$geom$cxxbridge1$Rotation$RotateVector1(::carla::geom::Rotation const &self, ::carla::geom::Vector3D const &in_point, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (::carla::geom::Rotation::*RotateVector1$)(::carla::geom::Vector3D const &) const = &::carla::geom::Rotation::RotateVector;
  new (return$) ::carla::geom::Vector3D((self.*RotateVector1$)(in_point));
}

void carla$geom$cxxbridge1$Rotation$InverseRotateVector(::carla::geom::Rotation const &self, ::carla::geom::Vector3D &in_point) noexcept {
  void (::carla::geom::Rotation::*InverseRotateVector$)(::carla::geom::Vector3D &) const = &::carla::geom::Rotation::InverseRotateVector;
  (self.*InverseRotateVector$)(in_point);
}
} // extern "C"
} // namespace geom
} // namespace carla

extern "C" {
void cxxbridge1$carla_geom_Rotation_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Rotation *autocxx_gen_this) noexcept {
  void (*carla_geom_Rotation_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Rotation *) = ::carla_geom_Rotation_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Rotation_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_Rotation_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Rotation *autocxx_gen_this, float p, float y, float r) noexcept {
  void (*carla_geom_Rotation_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Rotation *, float, float, float) = ::carla_geom_Rotation_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Rotation_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, p, y, r);
}

void cxxbridge1$carla_geom_BoundingBox_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::BoundingBox *autocxx_gen_this) noexcept {
  void (*carla_geom_BoundingBox_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::BoundingBox *) = ::carla_geom_BoundingBox_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_BoundingBox_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_BoundingBox_new3_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::BoundingBox *autocxx_gen_this, ::carla::geom::Vector3D const &in_extent) noexcept {
  void (*carla_geom_BoundingBox_new3_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::BoundingBox *, ::carla::geom::Vector3D const &) = ::carla_geom_BoundingBox_new3_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_BoundingBox_new3_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, in_extent);
}

float cxxbridge1$carla_geom_Vector2D_SquaredLength_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector2D const &autocxx_gen_this) noexcept {
  float (*carla_geom_Vector2D_SquaredLength_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector2D const &) = ::carla_geom_Vector2D_SquaredLength_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_geom_Vector2D_SquaredLength_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

float cxxbridge1$carla_geom_Vector2D_Length_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector2D const &autocxx_gen_this) noexcept {
  float (*carla_geom_Vector2D_Length_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector2D const &) = ::carla_geom_Vector2D_Length_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_geom_Vector2D_Length_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_Vector2D_MakeUnitVector_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector2D const &autocxx_gen_this, ::carla::geom::Vector2D *return$) noexcept {
  ::carla::geom::Vector2D (*carla_geom_Vector2D_MakeUnitVector_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector2D const &) = ::carla_geom_Vector2D_MakeUnitVector_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector2D(carla_geom_Vector2D_MakeUnitVector_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_geom_Vector2D_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector2D *autocxx_gen_this) noexcept {
  void (*carla_geom_Vector2D_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector2D *) = ::carla_geom_Vector2D_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Vector2D_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_Vector2D_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector2D *autocxx_gen_this, float ix, float iy) noexcept {
  void (*carla_geom_Vector2D_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector2D *, float, float) = ::carla_geom_Vector2D_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Vector2D_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ix, iy);
}

void cxxbridge1$carla_geom_MeshMaterial_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshMaterial *autocxx_gen_this, ::std::string const &new_name, ::std::size_t start, ::std::size_t end) noexcept {
  void (*carla_geom_MeshMaterial_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshMaterial *, ::std::string const &, ::std::size_t, ::std::size_t) = ::carla_geom_MeshMaterial_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_MeshMaterial_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, new_name, start, end);
}
} // extern "C"

namespace carla {
namespace geom {
extern "C" {
bool carla$geom$cxxbridge1$Mesh$IsValid(::carla::geom::Mesh const &self) noexcept {
  bool (::carla::geom::Mesh::*IsValid$)() const = &::carla::geom::Mesh::IsValid;
  return (self.*IsValid$)();
}

void carla$geom$cxxbridge1$Mesh$AddTriangleStrip(::carla::geom::Mesh &self, ::std::vector<::carla::geom::Vector3D> const &vertices) noexcept {
  void (::carla::geom::Mesh::*AddTriangleStrip$)(::std::vector<::carla::geom::Vector3D> const &) = &::carla::geom::Mesh::AddTriangleStrip;
  (self.*AddTriangleStrip$)(vertices);
}

void carla$geom$cxxbridge1$Mesh$AddTriangleFan(::carla::geom::Mesh &self, ::std::vector<::carla::geom::Vector3D> const &vertices) noexcept {
  void (::carla::geom::Mesh::*AddTriangleFan$)(::std::vector<::carla::geom::Vector3D> const &) = &::carla::geom::Mesh::AddTriangleFan;
  (self.*AddTriangleFan$)(vertices);
}

void carla$geom$cxxbridge1$Mesh$AddVertex(::carla::geom::Mesh &self, ::carla::geom::Vector3D *vertex) noexcept {
  void (::carla::geom::Mesh::*AddVertex$)(::carla::geom::Vector3D) = &::carla::geom::Mesh::AddVertex;
  (self.*AddVertex$)(::std::move(*vertex));
}

void carla$geom$cxxbridge1$Mesh$AddVertices(::carla::geom::Mesh &self, ::std::vector<::carla::geom::Vector3D> const &vertices) noexcept {
  void (::carla::geom::Mesh::*AddVertices$)(::std::vector<::carla::geom::Vector3D> const &) = &::carla::geom::Mesh::AddVertices;
  (self.*AddVertices$)(vertices);
}

void carla$geom$cxxbridge1$Mesh$AddNormal(::carla::geom::Mesh &self, ::carla::geom::Vector3D *normal) noexcept {
  void (::carla::geom::Mesh::*AddNormal$)(::carla::geom::Vector3D) = &::carla::geom::Mesh::AddNormal;
  (self.*AddNormal$)(::std::move(*normal));
}

void carla$geom$cxxbridge1$Mesh$AddIndex(::carla::geom::Mesh &self, ::std::size_t index) noexcept {
  void (::carla::geom::Mesh::*AddIndex$)(::std::size_t) = &::carla::geom::Mesh::AddIndex;
  (self.*AddIndex$)(index);
}

void carla$geom$cxxbridge1$Mesh$AddUV(::carla::geom::Mesh &self, ::carla::geom::Vector2D *uv) noexcept {
  void (::carla::geom::Mesh::*AddUV$)(::carla::geom::Vector2D) = &::carla::geom::Mesh::AddUV;
  (self.*AddUV$)(::std::move(*uv));
}

void carla$geom$cxxbridge1$Mesh$AddUVs(::carla::geom::Mesh &self, ::std::vector<::carla::geom::Vector2D> const &uv) noexcept {
  void (::carla::geom::Mesh::*AddUVs$)(::std::vector<::carla::geom::Vector2D> const &) = &::carla::geom::Mesh::AddUVs;
  (self.*AddUVs$)(uv);
}

void carla$geom$cxxbridge1$Mesh$AddMaterial(::carla::geom::Mesh &self, ::std::string const &material_name) noexcept {
  void (::carla::geom::Mesh::*AddMaterial$)(::std::string const &) = &::carla::geom::Mesh::AddMaterial;
  (self.*AddMaterial$)(material_name);
}

void carla$geom$cxxbridge1$Mesh$EndMaterial(::carla::geom::Mesh &self) noexcept {
  void (::carla::geom::Mesh::*EndMaterial$)() = &::carla::geom::Mesh::EndMaterial;
  (self.*EndMaterial$)();
}
} // extern "C"
} // namespace geom
} // namespace carla

extern "C" {
::std::string *cxxbridge1$GenerateOBJ_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Mesh const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*GenerateOBJ_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Mesh const &) = ::GenerateOBJ_autocxx_wrapper_0xd539d5a17acbdd25;
  return GenerateOBJ_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::std::string *cxxbridge1$GenerateOBJForRecast_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Mesh const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*GenerateOBJForRecast_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Mesh const &) = ::GenerateOBJForRecast_autocxx_wrapper_0xd539d5a17acbdd25;
  return GenerateOBJForRecast_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::std::string *cxxbridge1$GeneratePLY_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Mesh const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*GeneratePLY_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Mesh const &) = ::GeneratePLY_autocxx_wrapper_0xd539d5a17acbdd25;
  return GeneratePLY_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}
} // extern "C"

namespace carla {
namespace geom {
extern "C" {
::std::vector<::carla::geom::Vector3D> const *carla$geom$cxxbridge1$Mesh$GetVertices(::carla::geom::Mesh const &self) noexcept {
  ::std::vector<::carla::geom::Vector3D> const &(::carla::geom::Mesh::*GetVertices$)() const = &::carla::geom::Mesh::GetVertices;
  return &(self.*GetVertices$)();
}

::std::vector<::carla::geom::Vector3D> *carla$geom$cxxbridge1$Mesh$GetVertices1(::carla::geom::Mesh &self) noexcept {
  ::std::vector<::carla::geom::Vector3D> &(::carla::geom::Mesh::*GetVertices1$)() = &::carla::geom::Mesh::GetVertices;
  return &(self.*GetVertices1$)();
}

::std::size_t carla$geom$cxxbridge1$Mesh$GetVerticesNum(::carla::geom::Mesh const &self) noexcept {
  ::std::size_t (::carla::geom::Mesh::*GetVerticesNum$)() const = &::carla::geom::Mesh::GetVerticesNum;
  return (self.*GetVerticesNum$)();
}

::std::vector<::carla::geom::Vector3D> const *carla$geom$cxxbridge1$Mesh$GetNormals(::carla::geom::Mesh const &self) noexcept {
  ::std::vector<::carla::geom::Vector3D> const &(::carla::geom::Mesh::*GetNormals$)() const = &::carla::geom::Mesh::GetNormals;
  return &(self.*GetNormals$)();
}

::std::vector<::std::size_t> const *carla$geom$cxxbridge1$Mesh$GetIndexes(::carla::geom::Mesh const &self) noexcept {
  ::std::vector<::std::size_t> const &(::carla::geom::Mesh::*GetIndexes$)() const = &::carla::geom::Mesh::GetIndexes;
  return &(self.*GetIndexes$)();
}

::std::vector<::std::size_t> *carla$geom$cxxbridge1$Mesh$GetIndexes1(::carla::geom::Mesh &self) noexcept {
  ::std::vector<::std::size_t> &(::carla::geom::Mesh::*GetIndexes1$)() = &::carla::geom::Mesh::GetIndexes;
  return &(self.*GetIndexes1$)();
}

::std::size_t carla$geom$cxxbridge1$Mesh$GetIndexesNum(::carla::geom::Mesh const &self) noexcept {
  ::std::size_t (::carla::geom::Mesh::*GetIndexesNum$)() const = &::carla::geom::Mesh::GetIndexesNum;
  return (self.*GetIndexesNum$)();
}

::std::vector<::carla::geom::Vector2D> const *carla$geom$cxxbridge1$Mesh$GetUVs(::carla::geom::Mesh const &self) noexcept {
  ::std::vector<::carla::geom::Vector2D> const &(::carla::geom::Mesh::*GetUVs$)() const = &::carla::geom::Mesh::GetUVs;
  return &(self.*GetUVs$)();
}

::std::vector<::carla::geom::MeshMaterial> const *carla$geom$cxxbridge1$Mesh$GetMaterials(::carla::geom::Mesh const &self) noexcept {
  ::std::vector<::carla::geom::MeshMaterial> const &(::carla::geom::Mesh::*GetMaterials$)() const = &::carla::geom::Mesh::GetMaterials;
  return &(self.*GetMaterials$)();
}

::std::size_t carla$geom$cxxbridge1$Mesh$GetLastVertexIndex(::carla::geom::Mesh const &self) noexcept {
  ::std::size_t (::carla::geom::Mesh::*GetLastVertexIndex$)() const = &::carla::geom::Mesh::GetLastVertexIndex;
  return (self.*GetLastVertexIndex$)();
}
} // extern "C"
} // namespace geom
} // namespace carla

extern "C" {
void cxxbridge1$carla_geom_Mesh_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Mesh *autocxx_gen_this, ::std::vector<::carla::geom::Vector3D> const &vertices, ::std::vector<::carla::geom::Vector3D> const &normals, ::std::vector<::std::size_t> const &indexes, ::std::vector<::carla::geom::Vector2D> const &uvs) noexcept {
  void (*carla_geom_Mesh_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Mesh *, ::std::vector<::carla::geom::Vector3D> const &, ::std::vector<::carla::geom::Vector3D> const &, ::std::vector<::std::size_t> const &, ::std::vector<::carla::geom::Vector2D> const &) = ::carla_geom_Mesh_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Mesh_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, vertices, normals, indexes, uvs);
}

void cxxbridge1$carla_geom_GeoLocation_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::GeoLocation *autocxx_gen_this) noexcept {
  void (*carla_geom_GeoLocation_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::GeoLocation *) = ::carla_geom_GeoLocation_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_GeoLocation_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_GeoLocation_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::GeoLocation *autocxx_gen_this, double latitude, double longitude, double altitude) noexcept {
  void (*carla_geom_GeoLocation_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::GeoLocation *, double, double, double) = ::carla_geom_GeoLocation_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_GeoLocation_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, latitude, longitude, altitude);
}
} // extern "C"

namespace carla {
namespace geom {
extern "C" {
double carla$geom$cxxbridge1$CubicPolynomial$GetA(::carla::geom::CubicPolynomial const &self) noexcept {
  double (::carla::geom::CubicPolynomial::*GetA$)() const = &::carla::geom::CubicPolynomial::GetA;
  return (self.*GetA$)();
}

double carla$geom$cxxbridge1$CubicPolynomial$GetB(::carla::geom::CubicPolynomial const &self) noexcept {
  double (::carla::geom::CubicPolynomial::*GetB$)() const = &::carla::geom::CubicPolynomial::GetB;
  return (self.*GetB$)();
}

double carla$geom$cxxbridge1$CubicPolynomial$GetC(::carla::geom::CubicPolynomial const &self) noexcept {
  double (::carla::geom::CubicPolynomial::*GetC$)() const = &::carla::geom::CubicPolynomial::GetC;
  return (self.*GetC$)();
}

double carla$geom$cxxbridge1$CubicPolynomial$GetD(::carla::geom::CubicPolynomial const &self) noexcept {
  double (::carla::geom::CubicPolynomial::*GetD$)() const = &::carla::geom::CubicPolynomial::GetD;
  return (self.*GetD$)();
}

double carla$geom$cxxbridge1$CubicPolynomial$GetS(::carla::geom::CubicPolynomial const &self) noexcept {
  double (::carla::geom::CubicPolynomial::*GetS$)() const = &::carla::geom::CubicPolynomial::GetS;
  return (self.*GetS$)();
}

void carla$geom$cxxbridge1$CubicPolynomial$Set(::carla::geom::CubicPolynomial &self, double const &a, double const &b, double const &c, double const &d, double const &s) noexcept {
  void (::carla::geom::CubicPolynomial::*Set$)(double const &, double const &, double const &, double const &, double const &) = &::carla::geom::CubicPolynomial::Set;
  (self.*Set$)(a, b, c, d, s);
}

void carla$geom$cxxbridge1$CubicPolynomial$Set1(::carla::geom::CubicPolynomial &self, double const &a, double const &b, double const &c, double const &d) noexcept {
  void (::carla::geom::CubicPolynomial::*Set1$)(double const &, double const &, double const &, double const &) = &::carla::geom::CubicPolynomial::Set;
  (self.*Set1$)(a, b, c, d);
}

double carla$geom$cxxbridge1$CubicPolynomial$Evaluate(::carla::geom::CubicPolynomial const &self, double const &x) noexcept {
  double (::carla::geom::CubicPolynomial::*Evaluate$)(double const &) const = &::carla::geom::CubicPolynomial::Evaluate;
  return (self.*Evaluate$)(x);
}

double carla$geom$cxxbridge1$CubicPolynomial$Tangent(::carla::geom::CubicPolynomial const &self, double const &x) noexcept {
  double (::carla::geom::CubicPolynomial::*Tangent$)(double const &) const = &::carla::geom::CubicPolynomial::Tangent;
  return (self.*Tangent$)(x);
}
} // extern "C"
} // namespace geom
} // namespace carla

extern "C" {
void cxxbridge1$carla_geom_CubicPolynomial_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::CubicPolynomial *autocxx_gen_this) noexcept {
  void (*carla_geom_CubicPolynomial_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::CubicPolynomial *) = ::carla_geom_CubicPolynomial_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_CubicPolynomial_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_CubicPolynomial_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::CubicPolynomial *autocxx_gen_this, ::carla::geom::CubicPolynomial const &arg1) noexcept {
  void (*carla_geom_CubicPolynomial_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::CubicPolynomial *, ::carla::geom::CubicPolynomial const &) = ::carla_geom_CubicPolynomial_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_CubicPolynomial_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, arg1);
}

void cxxbridge1$carla_geom_CubicPolynomial_new2_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::CubicPolynomial *autocxx_gen_this, double const &a, double const &b, double const &c, double const &d) noexcept {
  void (*carla_geom_CubicPolynomial_new2_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::CubicPolynomial *, double const &, double const &, double const &, double const &) = ::carla_geom_CubicPolynomial_new2_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_CubicPolynomial_new2_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, a, b, c, d);
}

void cxxbridge1$carla_geom_CubicPolynomial_new3_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::CubicPolynomial *autocxx_gen_this, double const &a, double const &b, double const &c, double const &d, double const &s) noexcept {
  void (*carla_geom_CubicPolynomial_new3_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::CubicPolynomial *, double const &, double const &, double const &, double const &, double const &) = ::carla_geom_CubicPolynomial_new3_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_CubicPolynomial_new3_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, a, b, c, d, s);
}
} // extern "C"

namespace carla {
namespace geom {
extern "C" {
::carla::geom::Mesh *carla$geom$cxxbridge1$MeshFactory$Generate(::carla::geom::MeshFactory const &self, ::carla::road::Road const &road) noexcept {
  ::std::unique_ptr<::carla::geom::Mesh> (::carla::geom::MeshFactory::*Generate$)(::carla::road::Road const &) const = &::carla::geom::MeshFactory::Generate;
  return (self.*Generate$)(road).release();
}

::carla::geom::Mesh *carla$geom$cxxbridge1$MeshFactory$Generate1(::carla::geom::MeshFactory const &self, ::carla::road::LaneSection const &lane_section) noexcept {
  ::std::unique_ptr<::carla::geom::Mesh> (::carla::geom::MeshFactory::*Generate1$)(::carla::road::LaneSection const &) const = &::carla::geom::MeshFactory::Generate;
  return (self.*Generate1$)(lane_section).release();
}

::carla::geom::Mesh *carla$geom$cxxbridge1$MeshFactory$Generate2(::carla::geom::MeshFactory const &self, ::carla::road::Lane const &lane, double s_start, double s_end) noexcept {
  ::std::unique_ptr<::carla::geom::Mesh> (::carla::geom::MeshFactory::*Generate2$)(::carla::road::Lane const &, double, double) const = &::carla::geom::MeshFactory::Generate;
  return (self.*Generate2$)(lane, s_start, s_end).release();
}

::carla::geom::Mesh *carla$geom$cxxbridge1$MeshFactory$GenerateTesselated(::carla::geom::MeshFactory const &self, ::carla::road::Lane const &lane, double s_start, double s_end) noexcept {
  ::std::unique_ptr<::carla::geom::Mesh> (::carla::geom::MeshFactory::*GenerateTesselated$)(::carla::road::Lane const &, double, double) const = &::carla::geom::MeshFactory::GenerateTesselated;
  return (self.*GenerateTesselated$)(lane, s_start, s_end).release();
}

::carla::geom::Mesh *carla$geom$cxxbridge1$MeshFactory$Generate3(::carla::geom::MeshFactory const &self, ::carla::road::Lane const &lane) noexcept {
  ::std::unique_ptr<::carla::geom::Mesh> (::carla::geom::MeshFactory::*Generate3$)(::carla::road::Lane const &) const = &::carla::geom::MeshFactory::Generate;
  return (self.*Generate3$)(lane).release();
}

::carla::geom::Mesh *carla$geom$cxxbridge1$MeshFactory$GenerateTesselated1(::carla::geom::MeshFactory const &self, ::carla::road::Lane const &lane) noexcept {
  ::std::unique_ptr<::carla::geom::Mesh> (::carla::geom::MeshFactory::*GenerateTesselated1$)(::carla::road::Lane const &) const = &::carla::geom::MeshFactory::GenerateTesselated;
  return (self.*GenerateTesselated1$)(lane).release();
}

::carla::geom::Mesh *carla$geom$cxxbridge1$MeshFactory$GenerateSidewalk(::carla::geom::MeshFactory const &self, ::carla::road::LaneSection const &lane_section) noexcept {
  ::std::unique_ptr<::carla::geom::Mesh> (::carla::geom::MeshFactory::*GenerateSidewalk$)(::carla::road::LaneSection const &) const = &::carla::geom::MeshFactory::GenerateSidewalk;
  return (self.*GenerateSidewalk$)(lane_section).release();
}

::carla::geom::Mesh *carla$geom$cxxbridge1$MeshFactory$GenerateSidewalk1(::carla::geom::MeshFactory const &self, ::carla::road::Lane const &lane) noexcept {
  ::std::unique_ptr<::carla::geom::Mesh> (::carla::geom::MeshFactory::*GenerateSidewalk1$)(::carla::road::Lane const &) const = &::carla::geom::MeshFactory::GenerateSidewalk;
  return (self.*GenerateSidewalk1$)(lane).release();
}

::carla::geom::Mesh *carla$geom$cxxbridge1$MeshFactory$GenerateSidewalk2(::carla::geom::MeshFactory const &self, ::carla::road::Lane const &lane, double s_start, double s_end) noexcept {
  ::std::unique_ptr<::carla::geom::Mesh> (::carla::geom::MeshFactory::*GenerateSidewalk2$)(::carla::road::Lane const &, double, double) const = &::carla::geom::MeshFactory::GenerateSidewalk;
  return (self.*GenerateSidewalk2$)(lane, s_start, s_end).release();
}

::carla::geom::Mesh *carla$geom$cxxbridge1$MeshFactory$GenerateWalls(::carla::geom::MeshFactory const &self, ::carla::road::LaneSection const &lane_section) noexcept {
  ::std::unique_ptr<::carla::geom::Mesh> (::carla::geom::MeshFactory::*GenerateWalls$)(::carla::road::LaneSection const &) const = &::carla::geom::MeshFactory::GenerateWalls;
  return (self.*GenerateWalls$)(lane_section).release();
}

::carla::geom::Mesh *carla$geom$cxxbridge1$MeshFactory$GenerateRightWall(::carla::geom::MeshFactory const &self, ::carla::road::Lane const &lane, double s_start, double s_end) noexcept {
  ::std::unique_ptr<::carla::geom::Mesh> (::carla::geom::MeshFactory::*GenerateRightWall$)(::carla::road::Lane const &, double, double) const = &::carla::geom::MeshFactory::GenerateRightWall;
  return (self.*GenerateRightWall$)(lane, s_start, s_end).release();
}

::carla::geom::Mesh *carla$geom$cxxbridge1$MeshFactory$GenerateLeftWall(::carla::geom::MeshFactory const &self, ::carla::road::Lane const &lane, double s_start, double s_end) noexcept {
  ::std::unique_ptr<::carla::geom::Mesh> (::carla::geom::MeshFactory::*GenerateLeftWall$)(::carla::road::Lane const &, double, double) const = &::carla::geom::MeshFactory::GenerateLeftWall;
  return (self.*GenerateLeftWall$)(lane, s_start, s_end).release();
}
} // extern "C"
} // namespace geom
} // namespace carla

extern "C" {
void cxxbridge1$carla_geom_MeshFactory_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshFactory *autocxx_gen_this, ::carla::rpc::OpendriveGenerationParameters *params) noexcept {
  void (*carla_geom_MeshFactory_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshFactory *, ::carla::rpc::OpendriveGenerationParameters *) = ::carla_geom_MeshFactory_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_MeshFactory_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, params);
}

::carla::rpc::VehicleControl *cxxbridge1$VehicleControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::VehicleControl *(*VehicleControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::VehicleControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return VehicleControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$VehicleControl_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleControl *arg0) noexcept {
  void (*VehicleControl_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleControl *) = ::VehicleControl_free_autocxx_wrapper_0xd539d5a17acbdd25;
  VehicleControl_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::rpc::EpisodeSettings *cxxbridge1$EpisodeSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::EpisodeSettings *(*EpisodeSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::EpisodeSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return EpisodeSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$EpisodeSettings_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::EpisodeSettings *arg0) noexcept {
  void (*EpisodeSettings_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::EpisodeSettings *) = ::EpisodeSettings_free_autocxx_wrapper_0xd539d5a17acbdd25;
  EpisodeSettings_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::rpc::LabelledPoint *cxxbridge1$LabelledPoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::LabelledPoint *(*LabelledPoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::LabelledPoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return LabelledPoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$LabelledPoint_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::LabelledPoint *arg0) noexcept {
  void (*LabelledPoint_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::LabelledPoint *) = ::LabelledPoint_free_autocxx_wrapper_0xd539d5a17acbdd25;
  LabelledPoint_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::rpc::GearPhysicsControl *cxxbridge1$GearPhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::GearPhysicsControl *(*GearPhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::GearPhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return GearPhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$GearPhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::GearPhysicsControl *arg0) noexcept {
  void (*GearPhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::GearPhysicsControl *) = ::GearPhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25;
  GearPhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::rpc::WheelPhysicsControl *cxxbridge1$WheelPhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::WheelPhysicsControl *(*WheelPhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::WheelPhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return WheelPhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$WheelPhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WheelPhysicsControl *arg0) noexcept {
  void (*WheelPhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WheelPhysicsControl *) = ::WheelPhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25;
  WheelPhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::rpc::WeatherParameters *cxxbridge1$WeatherParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::WeatherParameters *(*WeatherParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::WeatherParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return WeatherParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$WeatherParameters_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WeatherParameters *arg0) noexcept {
  void (*WeatherParameters_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WeatherParameters *) = ::WeatherParameters_free_autocxx_wrapper_0xd539d5a17acbdd25;
  WeatherParameters_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::rpc::VehicleLightState *cxxbridge1$VehicleLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::VehicleLightState *(*VehicleLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::VehicleLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return VehicleLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$VehicleLightState_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleLightState *arg0) noexcept {
  void (*VehicleLightState_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleLightState *) = ::VehicleLightState_free_autocxx_wrapper_0xd539d5a17acbdd25;
  VehicleLightState_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::rpc::AckermannControllerSettings *cxxbridge1$AckermannControllerSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::AckermannControllerSettings *(*AckermannControllerSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::AckermannControllerSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return AckermannControllerSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$AckermannControllerSettings_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::AckermannControllerSettings *arg0) noexcept {
  void (*AckermannControllerSettings_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::AckermannControllerSettings *) = ::AckermannControllerSettings_free_autocxx_wrapper_0xd539d5a17acbdd25;
  AckermannControllerSettings_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::rpc::VehicleAckermannControl *cxxbridge1$VehicleAckermannControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::VehicleAckermannControl *(*VehicleAckermannControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::VehicleAckermannControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return VehicleAckermannControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$VehicleAckermannControl_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleAckermannControl *arg0) noexcept {
  void (*VehicleAckermannControl_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleAckermannControl *) = ::VehicleAckermannControl_free_autocxx_wrapper_0xd539d5a17acbdd25;
  VehicleAckermannControl_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::rpc::OpendriveGenerationParameters *cxxbridge1$OpendriveGenerationParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::OpendriveGenerationParameters *(*OpendriveGenerationParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::OpendriveGenerationParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return OpendriveGenerationParameters_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$OpendriveGenerationParameters_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::OpendriveGenerationParameters *arg0) noexcept {
  void (*OpendriveGenerationParameters_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::OpendriveGenerationParameters *) = ::OpendriveGenerationParameters_free_autocxx_wrapper_0xd539d5a17acbdd25;
  OpendriveGenerationParameters_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_rpc_VehicleControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleControl *autocxx_gen_this) noexcept {
  void (*carla_rpc_VehicleControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleControl *) = ::carla_rpc_VehicleControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehicleControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_VehicleControl_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleControl *autocxx_gen_this, float in_throttle, float in_steer, float in_brake, bool in_hand_brake, bool in_reverse, bool in_manual_gear_shift, ::std::int32_t in_gear) noexcept {
  void (*carla_rpc_VehicleControl_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleControl *, float, float, float, bool, bool, bool, ::std::int32_t) = ::carla_rpc_VehicleControl_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehicleControl_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, in_throttle, in_steer, in_brake, in_hand_brake, in_reverse, in_manual_gear_shift, in_gear);
}

void cxxbridge1$carla_rpc_EpisodeSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::EpisodeSettings *autocxx_gen_this) noexcept {
  void (*carla_rpc_EpisodeSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::EpisodeSettings *) = ::carla_rpc_EpisodeSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_EpisodeSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_EpisodeSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::EpisodeSettings *autocxx_gen_this, bool synchronous_mode, bool no_rendering_mode, double fixed_delta_seconds, bool substepping, double max_substep_delta_time, ::c_int *max_substeps, float max_culling_distance, bool deterministic_ragdolls, float tile_stream_distance, float actor_active_distance, bool spectator_as_ego) noexcept {
  void (*carla_rpc_EpisodeSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::EpisodeSettings *, bool, bool, double, bool, double, ::c_int, float, bool, float, float, bool) = ::carla_rpc_EpisodeSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_EpisodeSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, synchronous_mode, no_rendering_mode, fixed_delta_seconds, substepping, max_substep_delta_time, ::std::move(*max_substeps), max_culling_distance, deterministic_ragdolls, tile_stream_distance, actor_active_distance, spectator_as_ego);
}

void cxxbridge1$carla_rpc_LabelledPoint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::LabelledPoint *autocxx_gen_this) noexcept {
  void (*carla_rpc_LabelledPoint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::LabelledPoint *) = ::carla_rpc_LabelledPoint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_LabelledPoint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_GearPhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::GearPhysicsControl *autocxx_gen_this) noexcept {
  void (*carla_rpc_GearPhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::GearPhysicsControl *) = ::carla_rpc_GearPhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_GearPhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_GearPhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::GearPhysicsControl *autocxx_gen_this, float in_ratio, float in_down_ratio, float in_up_ratio) noexcept {
  void (*carla_rpc_GearPhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::GearPhysicsControl *, float, float, float) = ::carla_rpc_GearPhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_GearPhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, in_ratio, in_down_ratio, in_up_ratio);
}

void cxxbridge1$carla_rpc_WheelPhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WheelPhysicsControl *autocxx_gen_this) noexcept {
  void (*carla_rpc_WheelPhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WheelPhysicsControl *) = ::carla_rpc_WheelPhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_WheelPhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_WheelPhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WheelPhysicsControl *autocxx_gen_this, float in_tire_friction, float in_damping_rate, float in_max_steer_angle, float in_radius, float in_max_brake_torque, float in_max_handbrake_torque, float in_lat_stiff_max_load, float in_lat_stiff_value, float in_long_stiff_value, ::carla::geom::Vector3D *in_position) noexcept {
  void (*carla_rpc_WheelPhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WheelPhysicsControl *, float, float, float, float, float, float, float, float, float, ::carla::geom::Vector3D) = ::carla_rpc_WheelPhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_WheelPhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, in_tire_friction, in_damping_rate, in_max_steer_angle, in_radius, in_max_brake_torque, in_max_handbrake_torque, in_lat_stiff_max_load, in_lat_stiff_value, in_long_stiff_value, ::std::move(*in_position));
}

void cxxbridge1$carla_rpc_WeatherParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WeatherParameters *autocxx_gen_this) noexcept {
  void (*carla_rpc_WeatherParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WeatherParameters *) = ::carla_rpc_WeatherParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_WeatherParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_WeatherParameters_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WeatherParameters *autocxx_gen_this, float in_cloudiness, float in_precipitation, float in_precipitation_deposits, float in_wind_intensity, float in_sun_azimuth_angle, float in_sun_altitude_angle, float in_fog_density, float in_fog_distance, float in_fog_falloff, float in_wetness, float in_scattering_intensity, float in_mie_scattering_scale, float in_rayleigh_scattering_scale, float in_dust_storm) noexcept {
  void (*carla_rpc_WeatherParameters_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WeatherParameters *, float, float, float, float, float, float, float, float, float, float, float, float, float, float) = ::carla_rpc_WeatherParameters_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_WeatherParameters_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, in_cloudiness, in_precipitation, in_precipitation_deposits, in_wind_intensity, in_sun_azimuth_angle, in_sun_altitude_angle, in_fog_density, in_fog_distance, in_fog_falloff, in_wetness, in_scattering_intensity, in_mie_scattering_scale, in_rayleigh_scattering_scale, in_dust_storm);
}
} // extern "C"

namespace carla {
namespace rpc {
extern "C" {
void carla$rpc$cxxbridge1$VehicleLightState$GetLightStateEnum(::carla::rpc::VehicleLightState const &self, ::carla::rpc::VehicleLightState::LightState *return$) noexcept {
  ::carla::rpc::VehicleLightState::LightState (::carla::rpc::VehicleLightState::*GetLightStateEnum$)() const = &::carla::rpc::VehicleLightState::GetLightStateEnum;
  new (return$) ::carla::rpc::VehicleLightState::LightState((self.*GetLightStateEnum$)());
}

::std::uint32_t carla$rpc$cxxbridge1$VehicleLightState$GetLightStateAsValue(::carla::rpc::VehicleLightState const &self) noexcept {
  ::std::uint32_t (::carla::rpc::VehicleLightState::*GetLightStateAsValue$)() const = &::carla::rpc::VehicleLightState::GetLightStateAsValue;
  return (self.*GetLightStateAsValue$)();
}
} // extern "C"
} // namespace rpc
} // namespace carla

extern "C" {
void cxxbridge1$carla_rpc_VehicleLightState_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleLightState *autocxx_gen_this) noexcept {
  void (*carla_rpc_VehicleLightState_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleLightState *) = ::carla_rpc_VehicleLightState_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehicleLightState_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_VehicleLightState_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleLightState *autocxx_gen_this, ::carla::rpc::VehicleLightState::LightState *light_state) noexcept {
  void (*carla_rpc_VehicleLightState_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleLightState *, ::carla::rpc::VehicleLightState::LightState) = ::carla_rpc_VehicleLightState_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehicleLightState_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*light_state));
}

void cxxbridge1$carla_rpc_VehicleLightState_new2_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleLightState *autocxx_gen_this, ::std::uint32_t light_state) noexcept {
  void (*carla_rpc_VehicleLightState_new2_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleLightState *, ::std::uint32_t) = ::carla_rpc_VehicleLightState_new2_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehicleLightState_new2_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, light_state);
}

void cxxbridge1$carla_rpc_AckermannControllerSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::AckermannControllerSettings *autocxx_gen_this) noexcept {
  void (*carla_rpc_AckermannControllerSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::AckermannControllerSettings *) = ::carla_rpc_AckermannControllerSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_AckermannControllerSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_AckermannControllerSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::AckermannControllerSettings *autocxx_gen_this, float speed_kp, float speed_ki, float speed_kd, float accel_kp, float accel_ki, float accel_kd) noexcept {
  void (*carla_rpc_AckermannControllerSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::AckermannControllerSettings *, float, float, float, float, float, float) = ::carla_rpc_AckermannControllerSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_AckermannControllerSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, speed_kp, speed_ki, speed_kd, accel_kp, accel_ki, accel_kd);
}

void cxxbridge1$carla_rpc_VehicleAckermannControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleAckermannControl *autocxx_gen_this) noexcept {
  void (*carla_rpc_VehicleAckermannControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleAckermannControl *) = ::carla_rpc_VehicleAckermannControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehicleAckermannControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_VehicleAckermannControl_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleAckermannControl *autocxx_gen_this, float in_steer, float in_steer_speed, float in_speed, float in_acceleration, float in_jerk) noexcept {
  void (*carla_rpc_VehicleAckermannControl_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleAckermannControl *, float, float, float, float, float) = ::carla_rpc_VehicleAckermannControl_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehicleAckermannControl_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, in_steer, in_steer_speed, in_speed, in_acceleration, in_jerk);
}

void cxxbridge1$carla_rpc_OpendriveGenerationParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::OpendriveGenerationParameters *autocxx_gen_this) noexcept {
  void (*carla_rpc_OpendriveGenerationParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::OpendriveGenerationParameters *) = ::carla_rpc_OpendriveGenerationParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_OpendriveGenerationParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_OpendriveGenerationParameters_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::OpendriveGenerationParameters *autocxx_gen_this, double v_distance, double max_road_len, double w_height, double a_width, bool smooth_junc, bool e_visibility, bool e_pedestrian) noexcept {
  void (*carla_rpc_OpendriveGenerationParameters_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::OpendriveGenerationParameters *, double, double, double, double, bool, bool, bool) = ::carla_rpc_OpendriveGenerationParameters_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_OpendriveGenerationParameters_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, v_distance, max_road_len, w_height, a_width, smooth_junc, e_visibility, e_pedestrian);
}

::carla::sensor::data::SemanticLidarDetection *cxxbridge1$SemanticLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::sensor::data::SemanticLidarDetection *(*SemanticLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::SemanticLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return SemanticLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$SemanticLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarDetection *arg0) noexcept {
  void (*SemanticLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarDetection *) = ::SemanticLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25;
  SemanticLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::sensor::data::SemanticLidarData *cxxbridge1$SemanticLidarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::sensor::data::SemanticLidarData *(*SemanticLidarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::SemanticLidarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return SemanticLidarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$SemanticLidarData_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarData *arg0) noexcept {
  void (*SemanticLidarData_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarData *) = ::SemanticLidarData_free_autocxx_wrapper_0xd539d5a17acbdd25;
  SemanticLidarData_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::sensor::data::LidarDetection *cxxbridge1$LidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::sensor::data::LidarDetection *(*LidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::LidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return LidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$LidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarDetection *arg0) noexcept {
  void (*LidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarDetection *) = ::LidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25;
  LidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::sensor::data::SemanticLidarData const *cxxbridge1$cast_LidarData_to_SemanticLidarData_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarData const &autocxx_gen_this) noexcept {
  ::carla::sensor::data::SemanticLidarData const &(*cast_LidarData_to_SemanticLidarData_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarData const &) = ::cast_LidarData_to_SemanticLidarData_autocxx_wrapper_0xd539d5a17acbdd25;
  return &cast_LidarData_to_SemanticLidarData_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla::sensor::data::LidarData *cxxbridge1$LidarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::sensor::data::LidarData *(*LidarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::LidarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return LidarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$LidarData_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarData *arg0) noexcept {
  void (*LidarData_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarData *) = ::LidarData_free_autocxx_wrapper_0xd539d5a17acbdd25;
  LidarData_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::sensor::SensorData const *cxxbridge1$cast_IMUMeasurement_to_SensorData_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::IMUMeasurement const &autocxx_gen_this) noexcept {
  ::carla::sensor::SensorData const &(*cast_IMUMeasurement_to_SensorData_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::IMUMeasurement const &) = ::cast_IMUMeasurement_to_SensorData_autocxx_wrapper_0xd539d5a17acbdd25;
  return &cast_IMUMeasurement_to_SensorData_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla::sensor::data::IMUMeasurement *cxxbridge1$IMUMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::sensor::data::IMUMeasurement *(*IMUMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::IMUMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return IMUMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$IMUMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::IMUMeasurement *arg0) noexcept {
  void (*IMUMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::IMUMeasurement *) = ::IMUMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25;
  IMUMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::sensor::SensorData const *cxxbridge1$cast_GnssMeasurement_to_SensorData_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::GnssMeasurement const &autocxx_gen_this) noexcept {
  ::carla::sensor::SensorData const &(*cast_GnssMeasurement_to_SensorData_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::GnssMeasurement const &) = ::cast_GnssMeasurement_to_SensorData_autocxx_wrapper_0xd539d5a17acbdd25;
  return &cast_GnssMeasurement_to_SensorData_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla::sensor::data::GnssMeasurement *cxxbridge1$GnssMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::sensor::data::GnssMeasurement *(*GnssMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::GnssMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return GnssMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$GnssMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::GnssMeasurement *arg0) noexcept {
  void (*GnssMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::GnssMeasurement *) = ::GnssMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25;
  GnssMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::sensor::data::LidarMeasurement *cxxbridge1$LidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::sensor::data::LidarMeasurement *(*LidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::LidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return LidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$LidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarMeasurement *arg0) noexcept {
  void (*LidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarMeasurement *) = ::LidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25;
  LidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::sensor::data::SemanticLidarMeasurement *cxxbridge1$SemanticLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::sensor::data::SemanticLidarMeasurement *(*SemanticLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::SemanticLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return SemanticLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$SemanticLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarMeasurement *arg0) noexcept {
  void (*SemanticLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarMeasurement *) = ::SemanticLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25;
  SemanticLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::sensor::data::RadarDetection *cxxbridge1$RadarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::sensor::data::RadarDetection *(*RadarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::RadarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return RadarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$RadarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::RadarDetection *arg0) noexcept {
  void (*RadarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::RadarDetection *) = ::RadarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25;
  RadarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::sensor::data::RadarData *cxxbridge1$RadarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::sensor::data::RadarData *(*RadarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::RadarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return RadarData_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$RadarData_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::RadarData *arg0) noexcept {
  void (*RadarData_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::RadarData *) = ::RadarData_free_autocxx_wrapper_0xd539d5a17acbdd25;
  RadarData_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::sensor::data::RadarMeasurement *cxxbridge1$RadarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::sensor::data::RadarMeasurement *(*RadarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::RadarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return RadarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$RadarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::RadarMeasurement *arg0) noexcept {
  void (*RadarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::RadarMeasurement *) = ::RadarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25;
  RadarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}
} // extern "C"

namespace carla {
namespace sensor {
namespace data {
extern "C" {
void carla$sensor$data$cxxbridge1$SemanticLidarDetection$WritePlyHeaderInfo(::carla::sensor::data::SemanticLidarDetection const &self, ::std_basic_ostream_char_AutocxxConcrete &out) noexcept {
  void (::carla::sensor::data::SemanticLidarDetection::*WritePlyHeaderInfo$)(::std_basic_ostream_char_AutocxxConcrete &) const = &::carla::sensor::data::SemanticLidarDetection::WritePlyHeaderInfo;
  (self.*WritePlyHeaderInfo$)(out);
}

void carla$sensor$data$cxxbridge1$SemanticLidarDetection$WriteDetection(::carla::sensor::data::SemanticLidarDetection const &self, ::std_basic_ostream_char_AutocxxConcrete &out) noexcept {
  void (::carla::sensor::data::SemanticLidarDetection::*WriteDetection$)(::std_basic_ostream_char_AutocxxConcrete &) const = &::carla::sensor::data::SemanticLidarDetection::WriteDetection;
  (self.*WriteDetection$)(out);
}
} // extern "C"
} // namespace data
} // namespace sensor
} // namespace carla

extern "C" {
void cxxbridge1$carla_sensor_data_SemanticLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarDetection *autocxx_gen_this) noexcept {
  void (*carla_sensor_data_SemanticLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarDetection *) = ::carla_sensor_data_SemanticLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_SemanticLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_sensor_data_SemanticLidarDetection_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarDetection *autocxx_gen_this, float x, float y, float z, float cosTh, ::std::uint32_t idx, ::std::uint32_t tag) noexcept {
  void (*carla_sensor_data_SemanticLidarDetection_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarDetection *, float, float, float, float, ::std::uint32_t, ::std::uint32_t) = ::carla_sensor_data_SemanticLidarDetection_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_SemanticLidarDetection_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, x, y, z, cosTh, idx, tag);
}

float cxxbridge1$carla_sensor_data_SemanticLidarData_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarData const &autocxx_gen_this) noexcept {
  float (*carla_sensor_data_SemanticLidarData_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarData const &) = ::carla_sensor_data_SemanticLidarData_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_sensor_data_SemanticLidarData_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}
} // extern "C"

namespace carla {
namespace sensor {
namespace data {
extern "C" {
void carla$sensor$data$cxxbridge1$SemanticLidarData$SetHorizontalAngle(::carla::sensor::data::SemanticLidarData &self, float angle) noexcept {
  void (::carla::sensor::data::SemanticLidarData::*SetHorizontalAngle$)(float) = &::carla::sensor::data::SemanticLidarData::SetHorizontalAngle;
  (self.*SetHorizontalAngle$)(angle);
}
} // extern "C"
} // namespace data
} // namespace sensor
} // namespace carla

extern "C" {
::std::uint32_t cxxbridge1$carla_sensor_data_SemanticLidarData_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarData const &autocxx_gen_this) noexcept {
  ::std::uint32_t (*carla_sensor_data_SemanticLidarData_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarData const &) = ::carla_sensor_data_SemanticLidarData_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_sensor_data_SemanticLidarData_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_sensor_data_SemanticLidarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarData *autocxx_gen_this, ::std::uint32_t ChannelCount) noexcept {
  void (*carla_sensor_data_SemanticLidarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarData *, ::std::uint32_t) = ::carla_sensor_data_SemanticLidarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_SemanticLidarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ChannelCount);
}

void cxxbridge1$SemanticLidarData_destructor_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarData *autocxx_gen_this) noexcept {
  void (*SemanticLidarData_destructor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarData *) = ::SemanticLidarData_destructor_autocxx_wrapper_0xd539d5a17acbdd25;
  SemanticLidarData_destructor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$ResetMemory_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarData &autocxx_gen_this, ::std::vector<::std::uint32_t> *points_per_channel) noexcept {
  void (*ResetMemory_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarData &, ::std::vector<::std::uint32_t> *) = ::ResetMemory_autocxx_wrapper_0xd539d5a17acbdd25;
  ResetMemory_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, points_per_channel);
}

void cxxbridge1$WriteChannelCount_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarData &autocxx_gen_this, ::std::vector<::std::uint32_t> *points_per_channel) noexcept {
  void (*WriteChannelCount_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarData &, ::std::vector<::std::uint32_t> *) = ::WriteChannelCount_autocxx_wrapper_0xd539d5a17acbdd25;
  WriteChannelCount_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, points_per_channel);
}

void cxxbridge1$WritePointSync_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarData &autocxx_gen_this, ::carla::sensor::data::SemanticLidarDetection &detection) noexcept {
  void (*WritePointSync_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarData &, ::carla::sensor::data::SemanticLidarDetection &) = ::WritePointSync_autocxx_wrapper_0xd539d5a17acbdd25;
  WritePointSync_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, detection);
}

void cxxbridge1$carla_sensor_data_LidarDetection_WritePlyHeaderInfo_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarDetection const &autocxx_gen_this, ::std_basic_ostream_char_AutocxxConcrete &out) noexcept {
  void (*carla_sensor_data_LidarDetection_WritePlyHeaderInfo_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarDetection const &, ::std_basic_ostream_char_AutocxxConcrete &) = ::carla_sensor_data_LidarDetection_WritePlyHeaderInfo_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_LidarDetection_WritePlyHeaderInfo_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, out);
}

void cxxbridge1$carla_sensor_data_LidarDetection_WriteDetection_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarDetection const &autocxx_gen_this, ::std_basic_ostream_char_AutocxxConcrete &out) noexcept {
  void (*carla_sensor_data_LidarDetection_WriteDetection_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarDetection const &, ::std_basic_ostream_char_AutocxxConcrete &) = ::carla_sensor_data_LidarDetection_WriteDetection_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_LidarDetection_WriteDetection_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, out);
}

void cxxbridge1$carla_sensor_data_LidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarDetection *autocxx_gen_this) noexcept {
  void (*carla_sensor_data_LidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarDetection *) = ::carla_sensor_data_LidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_LidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_sensor_data_LidarDetection_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarDetection *autocxx_gen_this, float x, float y, float z, float intensity) noexcept {
  void (*carla_sensor_data_LidarDetection_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarDetection *, float, float, float, float) = ::carla_sensor_data_LidarDetection_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_LidarDetection_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, x, y, z, intensity);
}

void cxxbridge1$carla_sensor_data_LidarData_WritePointSync_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarData &autocxx_gen_this, ::carla::sensor::data::LidarDetection &detection) noexcept {
  void (*carla_sensor_data_LidarData_WritePointSync_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarData &, ::carla::sensor::data::LidarDetection &) = ::carla_sensor_data_LidarData_WritePointSync_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_LidarData_WritePointSync_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, detection);
}

void cxxbridge1$carla_sensor_data_LidarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarData *autocxx_gen_this, ::std::uint32_t ChannelCount) noexcept {
  void (*carla_sensor_data_LidarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarData *, ::std::uint32_t) = ::carla_sensor_data_LidarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_LidarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ChannelCount);
}

void cxxbridge1$LidarData_destructor_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarData *autocxx_gen_this) noexcept {
  void (*LidarData_destructor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarData *) = ::LidarData_destructor_autocxx_wrapper_0xd539d5a17acbdd25;
  LidarData_destructor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_sensor_data_LidarData_ResetMemory_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarData &autocxx_gen_this, ::std::vector<::std::uint32_t> *points_per_channel) noexcept {
  void (*carla_sensor_data_LidarData_ResetMemory_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarData &, ::std::vector<::std::uint32_t> *) = ::carla_sensor_data_LidarData_ResetMemory_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_LidarData_ResetMemory_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, points_per_channel);
}

void cxxbridge1$WritePointSync1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarData &autocxx_gen_this, ::carla::sensor::data::SemanticLidarDetection &detection) noexcept {
  void (*WritePointSync1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarData &, ::carla::sensor::data::SemanticLidarDetection &) = ::WritePointSync1_autocxx_wrapper_0xd539d5a17acbdd25;
  WritePointSync1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, detection);
}
} // extern "C"

namespace carla {
namespace sensor {
namespace data {
extern "C" {
void carla$sensor$data$cxxbridge1$IMUMeasurement$GetAccelerometer(::carla::sensor::data::IMUMeasurement const &self, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (::carla::sensor::data::IMUMeasurement::*GetAccelerometer$)() const = &::carla::sensor::data::IMUMeasurement::GetAccelerometer;
  new (return$) ::carla::geom::Vector3D((self.*GetAccelerometer$)());
}

void carla$sensor$data$cxxbridge1$IMUMeasurement$GetGyroscope(::carla::sensor::data::IMUMeasurement const &self, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (::carla::sensor::data::IMUMeasurement::*GetGyroscope$)() const = &::carla::sensor::data::IMUMeasurement::GetGyroscope;
  new (return$) ::carla::geom::Vector3D((self.*GetGyroscope$)());
}

float carla$sensor$data$cxxbridge1$IMUMeasurement$GetCompass(::carla::sensor::data::IMUMeasurement const &self) noexcept {
  float (::carla::sensor::data::IMUMeasurement::*GetCompass$)() const = &::carla::sensor::data::IMUMeasurement::GetCompass;
  return (self.*GetCompass$)();
}

void carla$sensor$data$cxxbridge1$GnssMeasurement$GetGeoLocation(::carla::sensor::data::GnssMeasurement const &self, ::carla::geom::GeoLocation *return$) noexcept {
  ::carla::geom::GeoLocation (::carla::sensor::data::GnssMeasurement::*GetGeoLocation$)() const = &::carla::sensor::data::GnssMeasurement::GetGeoLocation;
  new (return$) ::carla::geom::GeoLocation((self.*GetGeoLocation$)());
}

double carla$sensor$data$cxxbridge1$GnssMeasurement$GetLongitude(::carla::sensor::data::GnssMeasurement const &self) noexcept {
  double (::carla::sensor::data::GnssMeasurement::*GetLongitude$)() const = &::carla::sensor::data::GnssMeasurement::GetLongitude;
  return (self.*GetLongitude$)();
}

double carla$sensor$data$cxxbridge1$GnssMeasurement$GetLatitude(::carla::sensor::data::GnssMeasurement const &self) noexcept {
  double (::carla::sensor::data::GnssMeasurement::*GetLatitude$)() const = &::carla::sensor::data::GnssMeasurement::GetLatitude;
  return (self.*GetLatitude$)();
}

double carla$sensor$data$cxxbridge1$GnssMeasurement$GetAltitude(::carla::sensor::data::GnssMeasurement const &self) noexcept {
  double (::carla::sensor::data::GnssMeasurement::*GetAltitude$)() const = &::carla::sensor::data::GnssMeasurement::GetAltitude;
  return (self.*GetAltitude$)();
}
} // extern "C"
} // namespace data
} // namespace sensor
} // namespace carla

extern "C" {
float cxxbridge1$carla_sensor_data_LidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarMeasurement const &autocxx_gen_this) noexcept {
  float (*carla_sensor_data_LidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarMeasurement const &) = ::carla_sensor_data_LidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_sensor_data_LidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_sensor_data_LidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarMeasurement const &autocxx_gen_this, ::c_uint *return$) noexcept {
  ::c_uint (*carla_sensor_data_LidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarMeasurement const &) = ::carla_sensor_data_LidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::c_uint(carla_sensor_data_LidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_sensor_data_LidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarMeasurement const &autocxx_gen_this, ::std::size_t channel, ::c_uint *return$) noexcept {
  ::c_uint (*carla_sensor_data_LidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarMeasurement const &, ::std::size_t) = ::carla_sensor_data_LidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::c_uint(carla_sensor_data_LidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, channel));
}

float cxxbridge1$carla_sensor_data_SemanticLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarMeasurement const &autocxx_gen_this) noexcept {
  float (*carla_sensor_data_SemanticLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarMeasurement const &) = ::carla_sensor_data_SemanticLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_sensor_data_SemanticLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_sensor_data_SemanticLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarMeasurement const &autocxx_gen_this, ::c_uint *return$) noexcept {
  ::c_uint (*carla_sensor_data_SemanticLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarMeasurement const &) = ::carla_sensor_data_SemanticLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::c_uint(carla_sensor_data_SemanticLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_sensor_data_SemanticLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarMeasurement const &autocxx_gen_this, ::std::size_t channel, ::c_uint *return$) noexcept {
  ::c_uint (*carla_sensor_data_SemanticLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarMeasurement const &, ::std::size_t) = ::carla_sensor_data_SemanticLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::c_uint(carla_sensor_data_SemanticLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, channel));
}
} // extern "C"

namespace carla {
namespace sensor {
namespace data {
extern "C" {
void carla$sensor$data$cxxbridge1$RadarData$SetResolution(::carla::sensor::data::RadarData &self, ::std::uint32_t resolution) noexcept {
  void (::carla::sensor::data::RadarData::*SetResolution$)(::std::uint32_t) = &::carla::sensor::data::RadarData::SetResolution;
  (self.*SetResolution$)(resolution);
}

::std::size_t carla$sensor$data$cxxbridge1$RadarData$GetDetectionCount(::carla::sensor::data::RadarData const &self) noexcept {
  ::std::size_t (::carla::sensor::data::RadarData::*GetDetectionCount$)() const = &::carla::sensor::data::RadarData::GetDetectionCount;
  return (self.*GetDetectionCount$)();
}

void carla$sensor$data$cxxbridge1$RadarData$Reset(::carla::sensor::data::RadarData &self) noexcept {
  void (::carla::sensor::data::RadarData::*Reset$)() = &::carla::sensor::data::RadarData::Reset;
  (self.*Reset$)();
}
} // extern "C"
} // namespace data
} // namespace sensor
} // namespace carla

extern "C" {
void cxxbridge1$carla_sensor_data_RadarData_WriteDetection_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::RadarData &autocxx_gen_this, ::carla::sensor::data::RadarDetection *detection) noexcept {
  void (*carla_sensor_data_RadarData_WriteDetection_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::RadarData &, ::carla::sensor::data::RadarDetection) = ::carla_sensor_data_RadarData_WriteDetection_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_RadarData_WriteDetection_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*detection));
}

void cxxbridge1$carla_sensor_data_RadarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::RadarData *autocxx_gen_this) noexcept {
  void (*carla_sensor_data_RadarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::RadarData *) = ::carla_sensor_data_RadarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_RadarData_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla::sensor::SensorData *cxxbridge1$SensorData_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::sensor::SensorData *(*SensorData_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::SensorData_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return SensorData_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$SensorData_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::SensorData *arg0) noexcept {
  void (*SensorData_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::SensorData *) = ::SensorData_free_autocxx_wrapper_0xd539d5a17acbdd25;
  SensorData_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::std::size_t cxxbridge1$carla_sensor_SensorData_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::SensorData const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_sensor_SensorData_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::SensorData const &) = ::carla_sensor_SensorData_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_sensor_SensorData_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_sensor_SensorData_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::SensorData const &autocxx_gen_this) noexcept {
  double (*carla_sensor_SensorData_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::SensorData const &) = ::carla_sensor_SensorData_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_sensor_SensorData_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$SensorData_destructor_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::SensorData *autocxx_gen_this) noexcept {
  void (*SensorData_destructor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::SensorData *) = ::SensorData_destructor_autocxx_wrapper_0xd539d5a17acbdd25;
  SensorData_destructor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla::client::Landmark *cxxbridge1$Landmark_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::Landmark *(*Landmark_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::Landmark_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return Landmark_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$Landmark_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Landmark *arg0) noexcept {
  void (*Landmark_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Landmark *) = ::Landmark_free_autocxx_wrapper_0xd539d5a17acbdd25;
  Landmark_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::client::Timestamp *cxxbridge1$Timestamp_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::Timestamp *(*Timestamp_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::Timestamp_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return Timestamp_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$Timestamp_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Timestamp *arg0) noexcept {
  void (*Timestamp_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Timestamp *) = ::Timestamp_free_autocxx_wrapper_0xd539d5a17acbdd25;
  Timestamp_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::client::WorldSnapshot *cxxbridge1$WorldSnapshot_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::WorldSnapshot *(*WorldSnapshot_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::WorldSnapshot_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return WorldSnapshot_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$WorldSnapshot_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::WorldSnapshot *arg0) noexcept {
  void (*WorldSnapshot_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::WorldSnapshot *) = ::WorldSnapshot_free_autocxx_wrapper_0xd539d5a17acbdd25;
  WorldSnapshot_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::client::Light *cxxbridge1$Light_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::Light *(*Light_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::Light_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return Light_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$Light_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Light *arg0) noexcept {
  void (*Light_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Light *) = ::Light_free_autocxx_wrapper_0xd539d5a17acbdd25;
  Light_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::client::Vehicle *cxxbridge1$Vehicle_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::Vehicle *(*Vehicle_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::Vehicle_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return Vehicle_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$Vehicle_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Vehicle *arg0) noexcept {
  void (*Vehicle_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Vehicle *) = ::Vehicle_free_autocxx_wrapper_0xd539d5a17acbdd25;
  Vehicle_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::client::TrafficSign *cxxbridge1$TrafficSign_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::TrafficSign *(*TrafficSign_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::TrafficSign_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return TrafficSign_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$TrafficSign_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::TrafficSign *arg0) noexcept {
  void (*TrafficSign_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::TrafficSign *) = ::TrafficSign_free_autocxx_wrapper_0xd539d5a17acbdd25;
  TrafficSign_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::client::TrafficSign const *cxxbridge1$cast_TrafficLight_to_TrafficSign_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::TrafficLight const &autocxx_gen_this) noexcept {
  ::carla::client::TrafficSign const &(*cast_TrafficLight_to_TrafficSign_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::TrafficLight const &) = ::cast_TrafficLight_to_TrafficSign_autocxx_wrapper_0xd539d5a17acbdd25;
  return &cast_TrafficLight_to_TrafficSign_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla::client::TrafficLight *cxxbridge1$TrafficLight_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::TrafficLight *(*TrafficLight_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::TrafficLight_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return TrafficLight_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$TrafficLight_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::TrafficLight *arg0) noexcept {
  void (*TrafficLight_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::TrafficLight *) = ::TrafficLight_free_autocxx_wrapper_0xd539d5a17acbdd25;
  TrafficLight_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::client::Walker *cxxbridge1$Walker_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::Walker *(*Walker_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::Walker_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return Walker_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$Walker_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Walker *arg0) noexcept {
  void (*Walker_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Walker *) = ::Walker_free_autocxx_wrapper_0xd539d5a17acbdd25;
  Walker_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::client::ActorBlueprint *cxxbridge1$ActorBlueprint_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::ActorBlueprint *(*ActorBlueprint_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::ActorBlueprint_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return ActorBlueprint_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$ActorBlueprint_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorBlueprint *arg0) noexcept {
  void (*ActorBlueprint_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorBlueprint *) = ::ActorBlueprint_free_autocxx_wrapper_0xd539d5a17acbdd25;
  ActorBlueprint_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::client::ActorList *cxxbridge1$ActorList_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::ActorList *(*ActorList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::ActorList_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return ActorList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$ActorList_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorList *arg0) noexcept {
  void (*ActorList_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorList *) = ::ActorList_free_autocxx_wrapper_0xd539d5a17acbdd25;
  ActorList_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::client::LaneInvasionSensor *cxxbridge1$LaneInvasionSensor_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::LaneInvasionSensor *(*LaneInvasionSensor_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::LaneInvasionSensor_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return LaneInvasionSensor_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$LaneInvasionSensor_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::LaneInvasionSensor *arg0) noexcept {
  void (*LaneInvasionSensor_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::LaneInvasionSensor *) = ::LaneInvasionSensor_free_autocxx_wrapper_0xd539d5a17acbdd25;
  LaneInvasionSensor_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::std::uint32_t cxxbridge1$carla_client_Landmark_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Landmark const &autocxx_gen_this) noexcept {
  ::std::uint32_t (*carla_client_Landmark_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Landmark const &) = ::carla_client_Landmark_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_client_Landmark_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_client_Landmark_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Landmark const &autocxx_gen_this) noexcept {
  double (*carla_client_Landmark_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Landmark const &) = ::carla_client_Landmark_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_client_Landmark_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_client_Landmark_GetS_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Landmark const &autocxx_gen_this) noexcept {
  double (*carla_client_Landmark_GetS_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Landmark const &) = ::carla_client_Landmark_GetS_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_client_Landmark_GetS_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
double carla$client$cxxbridge1$Landmark$GetT(::carla::client::Landmark const &self) noexcept {
  double (::carla::client::Landmark::*GetT$)() const = &::carla::client::Landmark::GetT;
  return (self.*GetT$)();
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
::std::string *cxxbridge1$carla_client_Landmark_GetId_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Landmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_client_Landmark_GetId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Landmark const &) = ::carla_client_Landmark_GetId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_client_Landmark_GetId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::std::string *cxxbridge1$GetName_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Landmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*GetName_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Landmark const &) = ::GetName_autocxx_wrapper_0xd539d5a17acbdd25;
  return GetName_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
bool carla$client$cxxbridge1$Landmark$IsDynamic(::carla::client::Landmark const &self) noexcept {
  bool (::carla::client::Landmark::*IsDynamic$)() const = &::carla::client::Landmark::IsDynamic;
  return (self.*IsDynamic$)();
}

void carla$client$cxxbridge1$Landmark$GetOrientation(::carla::client::Landmark const &self, ::carla::road::SignalOrientation *return$) noexcept {
  ::carla::road::SignalOrientation (::carla::client::Landmark::*GetOrientation$)() const = &::carla::client::Landmark::GetOrientation;
  new (return$) ::carla::road::SignalOrientation((self.*GetOrientation$)());
}

double carla$client$cxxbridge1$Landmark$GetZOffset(::carla::client::Landmark const &self) noexcept {
  double (::carla::client::Landmark::*GetZOffset$)() const = &::carla::client::Landmark::GetZOffset;
  return (self.*GetZOffset$)();
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
::std::string *cxxbridge1$GetCountry_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Landmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*GetCountry_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Landmark const &) = ::GetCountry_autocxx_wrapper_0xd539d5a17acbdd25;
  return GetCountry_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::std::string *cxxbridge1$carla_client_Landmark_GetType_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Landmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_client_Landmark_GetType_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Landmark const &) = ::carla_client_Landmark_GetType_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_client_Landmark_GetType_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::std::string *cxxbridge1$GetSubType_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Landmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*GetSubType_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Landmark const &) = ::GetSubType_autocxx_wrapper_0xd539d5a17acbdd25;
  return GetSubType_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
double carla$client$cxxbridge1$Landmark$GetValue(::carla::client::Landmark const &self) noexcept {
  double (::carla::client::Landmark::*GetValue$)() const = &::carla::client::Landmark::GetValue;
  return (self.*GetValue$)();
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
::std::string *cxxbridge1$GetUnit_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Landmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*GetUnit_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Landmark const &) = ::GetUnit_autocxx_wrapper_0xd539d5a17acbdd25;
  return GetUnit_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
double carla$client$cxxbridge1$Landmark$GetHeight(::carla::client::Landmark const &self) noexcept {
  double (::carla::client::Landmark::*GetHeight$)() const = &::carla::client::Landmark::GetHeight;
  return (self.*GetHeight$)();
}

double carla$client$cxxbridge1$Landmark$GetWidth(::carla::client::Landmark const &self) noexcept {
  double (::carla::client::Landmark::*GetWidth$)() const = &::carla::client::Landmark::GetWidth;
  return (self.*GetWidth$)();
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
::std::string *cxxbridge1$GetText_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Landmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*GetText_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Landmark const &) = ::GetText_autocxx_wrapper_0xd539d5a17acbdd25;
  return GetText_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
double carla$client$cxxbridge1$Landmark$GethOffset(::carla::client::Landmark const &self) noexcept {
  double (::carla::client::Landmark::*GethOffset$)() const = &::carla::client::Landmark::GethOffset;
  return (self.*GethOffset$)();
}

double carla$client$cxxbridge1$Landmark$GetPitch(::carla::client::Landmark const &self) noexcept {
  double (::carla::client::Landmark::*GetPitch$)() const = &::carla::client::Landmark::GetPitch;
  return (self.*GetPitch$)();
}

double carla$client$cxxbridge1$Landmark$GetRoll(::carla::client::Landmark const &self) noexcept {
  double (::carla::client::Landmark::*GetRoll$)() const = &::carla::client::Landmark::GetRoll;
  return (self.*GetRoll$)();
}

::std::vector<::carla::road::LaneValidity> const *carla$client$cxxbridge1$Landmark$GetValidities(::carla::client::Landmark const &self) noexcept {
  ::std::vector<::carla::road::LaneValidity> const &(::carla::client::Landmark::*GetValidities$)() const = &::carla::client::Landmark::GetValidities;
  return &(self.*GetValidities$)();
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
void cxxbridge1$carla_client_Timestamp_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Timestamp *autocxx_gen_this) noexcept {
  void (*carla_client_Timestamp_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Timestamp *) = ::carla_client_Timestamp_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Timestamp_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_client_Timestamp_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Timestamp *autocxx_gen_this, ::std::size_t in_frame, double in_elapsed_seconds, double in_delta_seconds, double in_platform_timestamp) noexcept {
  void (*carla_client_Timestamp_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Timestamp *, ::std::size_t, double, double, double) = ::carla_client_Timestamp_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Timestamp_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, in_frame, in_elapsed_seconds, in_delta_seconds, in_platform_timestamp);
}

::std::uint64_t cxxbridge1$carla_client_WorldSnapshot_GetId_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::WorldSnapshot const &autocxx_gen_this) noexcept {
  ::std::uint64_t (*carla_client_WorldSnapshot_GetId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::WorldSnapshot const &) = ::carla_client_WorldSnapshot_GetId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_client_WorldSnapshot_GetId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::size_t cxxbridge1$carla_client_WorldSnapshot_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::WorldSnapshot const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_client_WorldSnapshot_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::WorldSnapshot const &) = ::carla_client_WorldSnapshot_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_client_WorldSnapshot_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla::client::Timestamp const *cxxbridge1$carla_client_WorldSnapshot_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::WorldSnapshot const &autocxx_gen_this) noexcept {
  ::carla::client::Timestamp const &(*carla_client_WorldSnapshot_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::WorldSnapshot const &) = ::carla_client_WorldSnapshot_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_client_WorldSnapshot_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::size_t cxxbridge1$carla_client_WorldSnapshot_size_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::WorldSnapshot const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_client_WorldSnapshot_size_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::WorldSnapshot const &) = ::carla_client_WorldSnapshot_size_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_client_WorldSnapshot_size_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_client_WorldSnapshot_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::WorldSnapshot *autocxx_gen_this, ::std::shared_ptr<::carla::client::detail::EpisodeState> *state) noexcept {
  void (*carla_client_WorldSnapshot_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::WorldSnapshot *, ::std::shared_ptr<::carla::client::detail::EpisodeState>) = ::carla_client_WorldSnapshot_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_WorldSnapshot_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*state));
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
float carla$client$cxxbridge1$Light$GetIntensity(::carla::client::Light const &self) noexcept {
  float (::carla::client::Light::*GetIntensity$)() const = &::carla::client::Light::GetIntensity;
  return (self.*GetIntensity$)();
}

bool carla$client$cxxbridge1$Light$IsOn(::carla::client::Light const &self) noexcept {
  bool (::carla::client::Light::*IsOn$)() const = &::carla::client::Light::IsOn;
  return (self.*IsOn$)();
}

bool carla$client$cxxbridge1$Light$IsOff(::carla::client::Light const &self) noexcept {
  bool (::carla::client::Light::*IsOff$)() const = &::carla::client::Light::IsOff;
  return (self.*IsOff$)();
}

void carla$client$cxxbridge1$Light$SetIntensity(::carla::client::Light &self, float intensity) noexcept {
  void (::carla::client::Light::*SetIntensity$)(float) = &::carla::client::Light::SetIntensity;
  (self.*SetIntensity$)(intensity);
}

void carla$client$cxxbridge1$Light$TurnOn(::carla::client::Light &self) noexcept {
  void (::carla::client::Light::*TurnOn$)() = &::carla::client::Light::TurnOn;
  (self.*TurnOn$)();
}

void carla$client$cxxbridge1$Light$TurnOff(::carla::client::Light &self) noexcept {
  void (::carla::client::Light::*TurnOff$)() = &::carla::client::Light::TurnOff;
  (self.*TurnOff$)();
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
void cxxbridge1$carla_client_Light_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Light *autocxx_gen_this) noexcept {
  void (*carla_client_Light_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Light *) = ::carla_client_Light_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Light_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
void carla$client$cxxbridge1$Vehicle$SetAutopilot(::carla::client::Vehicle &self, bool enabled, ::std::uint16_t tm_port) noexcept {
  void (::carla::client::Vehicle::*SetAutopilot$)(bool, ::std::uint16_t) = &::carla::client::Vehicle::SetAutopilot;
  (self.*SetAutopilot$)(enabled, tm_port);
}

void carla$client$cxxbridge1$Vehicle$ShowDebugTelemetry(::carla::client::Vehicle &self, bool enabled) noexcept {
  void (::carla::client::Vehicle::*ShowDebugTelemetry$)(bool) = &::carla::client::Vehicle::ShowDebugTelemetry;
  (self.*ShowDebugTelemetry$)(enabled);
}

void carla$client$cxxbridge1$Vehicle$ApplyControl(::carla::client::Vehicle &self, ::carla::rpc::VehicleControl const &control) noexcept {
  void (::carla::client::Vehicle::*ApplyControl$)(::carla::rpc::VehicleControl const &) = &::carla::client::Vehicle::ApplyControl;
  (self.*ApplyControl$)(control);
}

void carla$client$cxxbridge1$Vehicle$ApplyAckermannControl(::carla::client::Vehicle &self, ::carla::rpc::VehicleAckermannControl const &control) noexcept {
  void (::carla::client::Vehicle::*ApplyAckermannControl$)(::carla::rpc::VehicleAckermannControl const &) = &::carla::client::Vehicle::ApplyAckermannControl;
  (self.*ApplyAckermannControl$)(control);
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
void cxxbridge1$carla_client_Vehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Vehicle const &autocxx_gen_this, ::carla::rpc::AckermannControllerSettings *return$) noexcept {
  ::carla::rpc::AckermannControllerSettings (*carla_client_Vehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Vehicle const &) = ::carla_client_Vehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::rpc::AckermannControllerSettings(carla_client_Vehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_client_Vehicle_ApplyAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Vehicle &autocxx_gen_this, ::carla::rpc::AckermannControllerSettings const &settings) noexcept {
  void (*carla_client_Vehicle_ApplyAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Vehicle &, ::carla::rpc::AckermannControllerSettings const &) = ::carla_client_Vehicle_ApplyAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Vehicle_ApplyAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, settings);
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
void carla$client$cxxbridge1$Vehicle$ApplyPhysicsControl(::carla::client::Vehicle &self, ::carla::rpc::VehiclePhysicsControl const &physics_control) noexcept {
  void (::carla::client::Vehicle::*ApplyPhysicsControl$)(::carla::rpc::VehiclePhysicsControl const &) = &::carla::client::Vehicle::ApplyPhysicsControl;
  (self.*ApplyPhysicsControl$)(physics_control);
}

void carla$client$cxxbridge1$Vehicle$GetControl(::carla::client::Vehicle const &self, ::carla::rpc::VehicleControl *return$) noexcept {
  ::carla::rpc::VehicleControl (::carla::client::Vehicle::*GetControl$)() const = &::carla::client::Vehicle::GetControl;
  new (return$) ::carla::rpc::VehicleControl((self.*GetControl$)());
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
void cxxbridge1$GetPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Vehicle const &autocxx_gen_this, ::carla::rpc::VehiclePhysicsControl *placement_return_type) noexcept {
  void (*GetPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Vehicle const &, ::carla::rpc::VehiclePhysicsControl *) = ::GetPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25;
  GetPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
float carla$client$cxxbridge1$Vehicle$GetSpeedLimit(::carla::client::Vehicle const &self) noexcept {
  float (::carla::client::Vehicle::*GetSpeedLimit$)() const = &::carla::client::Vehicle::GetSpeedLimit;
  return (self.*GetSpeedLimit$)();
}

void carla$client$cxxbridge1$Vehicle$GetTrafficLightState(::carla::client::Vehicle const &self, ::carla::rpc::TrafficLightState *return$) noexcept {
  ::carla::rpc::TrafficLightState (::carla::client::Vehicle::*GetTrafficLightState$)() const = &::carla::client::Vehicle::GetTrafficLightState;
  new (return$) ::carla::rpc::TrafficLightState((self.*GetTrafficLightState$)());
}

bool carla$client$cxxbridge1$Vehicle$IsAtTrafficLight(::carla::client::Vehicle &self) noexcept {
  bool (::carla::client::Vehicle::*IsAtTrafficLight$)() = &::carla::client::Vehicle::IsAtTrafficLight;
  return (self.*IsAtTrafficLight$)();
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
void cxxbridge1$carla_client_Vehicle_EnableCarSim_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Vehicle &autocxx_gen_this, ::std::string *simfile_path) noexcept {
  void (*carla_client_Vehicle_EnableCarSim_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Vehicle &, ::std::unique_ptr<::std::string>) = ::carla_client_Vehicle_EnableCarSim_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Vehicle_EnableCarSim_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::unique_ptr<::std::string>(simfile_path));
}

void cxxbridge1$carla_client_Vehicle_UseCarSimRoad_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Vehicle &autocxx_gen_this, bool enabled) noexcept {
  void (*carla_client_Vehicle_UseCarSimRoad_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Vehicle &, bool) = ::carla_client_Vehicle_UseCarSimRoad_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Vehicle_UseCarSimRoad_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, enabled);
}

void cxxbridge1$carla_client_Vehicle_EnableChronoPhysics_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Vehicle &autocxx_gen_this, ::std::uint64_t MaxSubsteps, float MaxSubstepDeltaTime, ::std::string *VehicleJSON, ::std::string *PowertrainJSON, ::std::string *TireJSON, ::std::string *BaseJSONPath) noexcept {
  void (*carla_client_Vehicle_EnableChronoPhysics_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Vehicle &, ::std::uint64_t, float, ::std::unique_ptr<::std::string>, ::std::unique_ptr<::std::string>, ::std::unique_ptr<::std::string>, ::std::unique_ptr<::std::string>) = ::carla_client_Vehicle_EnableChronoPhysics_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Vehicle_EnableChronoPhysics_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, MaxSubsteps, MaxSubstepDeltaTime, ::std::unique_ptr<::std::string>(VehicleJSON), ::std::unique_ptr<::std::string>(PowertrainJSON), ::std::unique_ptr<::std::string>(TireJSON), ::std::unique_ptr<::std::string>(BaseJSONPath));
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
void carla$client$cxxbridge1$Vehicle$GetFailureState(::carla::client::Vehicle const &self, ::carla::rpc::VehicleFailureState *return$) noexcept {
  ::carla::rpc::VehicleFailureState (::carla::client::Vehicle::*GetFailureState$)() const = &::carla::client::Vehicle::GetFailureState;
  new (return$) ::carla::rpc::VehicleFailureState((self.*GetFailureState$)());
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
void cxxbridge1$carla_client_Vehicle_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Vehicle *autocxx_gen_this, ::carla::client::ActorInitializer *init) noexcept {
  void (*carla_client_Vehicle_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Vehicle *, ::carla::client::ActorInitializer *) = ::carla_client_Vehicle_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Vehicle_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, init);
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
::carla::geom::BoundingBox const *carla$client$cxxbridge1$TrafficSign$GetTriggerVolume(::carla::client::TrafficSign const &self) noexcept {
  ::carla::geom::BoundingBox const &(::carla::client::TrafficSign::*GetTriggerVolume$)() const = &::carla::client::TrafficSign::GetTriggerVolume;
  return &(self.*GetTriggerVolume$)();
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
::std::string *cxxbridge1$GetSignId_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::TrafficSign const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*GetSignId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::TrafficSign const &) = ::GetSignId_autocxx_wrapper_0xd539d5a17acbdd25;
  return GetSignId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

void cxxbridge1$carla_client_TrafficSign_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::TrafficSign *autocxx_gen_this, ::carla::client::ActorInitializer *init) noexcept {
  void (*carla_client_TrafficSign_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::TrafficSign *, ::carla::client::ActorInitializer *) = ::carla_client_TrafficSign_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_TrafficSign_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, init);
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
void carla$client$cxxbridge1$TrafficLight$SetState(::carla::client::TrafficLight &self, ::carla::rpc::TrafficLightState *state) noexcept {
  void (::carla::client::TrafficLight::*SetState$)(::carla::rpc::TrafficLightState) = &::carla::client::TrafficLight::SetState;
  (self.*SetState$)(::std::move(*state));
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
void cxxbridge1$carla_client_TrafficLight_GetState_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::TrafficLight const &autocxx_gen_this, ::carla::rpc::TrafficLightState *return$) noexcept {
  ::carla::rpc::TrafficLightState (*carla_client_TrafficLight_GetState_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::TrafficLight const &) = ::carla_client_TrafficLight_GetState_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::rpc::TrafficLightState(carla_client_TrafficLight_GetState_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
void carla$client$cxxbridge1$TrafficLight$SetGreenTime(::carla::client::TrafficLight &self, float green_time) noexcept {
  void (::carla::client::TrafficLight::*SetGreenTime$)(float) = &::carla::client::TrafficLight::SetGreenTime;
  (self.*SetGreenTime$)(green_time);
}

float carla$client$cxxbridge1$TrafficLight$GetGreenTime(::carla::client::TrafficLight const &self) noexcept {
  float (::carla::client::TrafficLight::*GetGreenTime$)() const = &::carla::client::TrafficLight::GetGreenTime;
  return (self.*GetGreenTime$)();
}

void carla$client$cxxbridge1$TrafficLight$SetYellowTime(::carla::client::TrafficLight &self, float yellow_time) noexcept {
  void (::carla::client::TrafficLight::*SetYellowTime$)(float) = &::carla::client::TrafficLight::SetYellowTime;
  (self.*SetYellowTime$)(yellow_time);
}

float carla$client$cxxbridge1$TrafficLight$GetYellowTime(::carla::client::TrafficLight const &self) noexcept {
  float (::carla::client::TrafficLight::*GetYellowTime$)() const = &::carla::client::TrafficLight::GetYellowTime;
  return (self.*GetYellowTime$)();
}

void carla$client$cxxbridge1$TrafficLight$SetRedTime(::carla::client::TrafficLight &self, float red_time) noexcept {
  void (::carla::client::TrafficLight::*SetRedTime$)(float) = &::carla::client::TrafficLight::SetRedTime;
  (self.*SetRedTime$)(red_time);
}

float carla$client$cxxbridge1$TrafficLight$GetRedTime(::carla::client::TrafficLight const &self) noexcept {
  float (::carla::client::TrafficLight::*GetRedTime$)() const = &::carla::client::TrafficLight::GetRedTime;
  return (self.*GetRedTime$)();
}

float carla$client$cxxbridge1$TrafficLight$GetElapsedTime(::carla::client::TrafficLight const &self) noexcept {
  float (::carla::client::TrafficLight::*GetElapsedTime$)() const = &::carla::client::TrafficLight::GetElapsedTime;
  return (self.*GetElapsedTime$)();
}

void carla$client$cxxbridge1$TrafficLight$Freeze(::carla::client::TrafficLight &self, bool freeze) noexcept {
  void (::carla::client::TrafficLight::*Freeze$)(bool) = &::carla::client::TrafficLight::Freeze;
  (self.*Freeze$)(freeze);
}

bool carla$client$cxxbridge1$TrafficLight$IsFrozen(::carla::client::TrafficLight const &self) noexcept {
  bool (::carla::client::TrafficLight::*IsFrozen$)() const = &::carla::client::TrafficLight::IsFrozen;
  return (self.*IsFrozen$)();
}

::std::uint32_t carla$client$cxxbridge1$TrafficLight$GetPoleIndex(::carla::client::TrafficLight &self) noexcept {
  ::std::uint32_t (::carla::client::TrafficLight::*GetPoleIndex$)() = &::carla::client::TrafficLight::GetPoleIndex;
  return (self.*GetPoleIndex$)();
}

void carla$client$cxxbridge1$TrafficLight$ResetGroup(::carla::client::TrafficLight &self) noexcept {
  void (::carla::client::TrafficLight::*ResetGroup$)() = &::carla::client::TrafficLight::ResetGroup;
  (self.*ResetGroup$)();
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
::std::vector<::carla::geom::BoundingBox> *cxxbridge1$carla_client_TrafficLight_GetLightBoxes_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::TrafficLight const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::vector<::carla::geom::BoundingBox>> (*carla_client_TrafficLight_GetLightBoxes_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::TrafficLight const &) = ::carla_client_TrafficLight_GetLightBoxes_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_client_TrafficLight_GetLightBoxes_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::std::string *cxxbridge1$GetOpenDRIVEID_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::TrafficLight const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*GetOpenDRIVEID_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::TrafficLight const &) = ::GetOpenDRIVEID_autocxx_wrapper_0xd539d5a17acbdd25;
  return GetOpenDRIVEID_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

void cxxbridge1$carla_client_TrafficLight_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::TrafficLight *autocxx_gen_this, ::carla::client::ActorInitializer *init) noexcept {
  void (*carla_client_TrafficLight_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::TrafficLight *, ::carla::client::ActorInitializer *) = ::carla_client_TrafficLight_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_TrafficLight_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, init);
}

void cxxbridge1$carla_client_Walker_ApplyControl_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Walker &autocxx_gen_this, ::carla::rpc::WalkerControl const &control) noexcept {
  void (*carla_client_Walker_ApplyControl_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Walker &, ::carla::rpc::WalkerControl const &) = ::carla_client_Walker_ApplyControl_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Walker_ApplyControl_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, control);
}

void cxxbridge1$GetWalkerControl_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Walker const &autocxx_gen_this, ::carla::rpc::WalkerControl *placement_return_type) noexcept {
  void (*GetWalkerControl_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Walker const &, ::carla::rpc::WalkerControl *) = ::GetWalkerControl_autocxx_wrapper_0xd539d5a17acbdd25;
  GetWalkerControl_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

void cxxbridge1$carla_client_Walker_GetBonesTransform_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Walker &autocxx_gen_this, ::carla::rpc::WalkerBoneControlOut *placement_return_type) noexcept {
  void (*carla_client_Walker_GetBonesTransform_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Walker &, ::carla::rpc::WalkerBoneControlOut *) = ::carla_client_Walker_GetBonesTransform_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Walker_GetBonesTransform_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

void cxxbridge1$carla_client_Walker_SetBonesTransform_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Walker &autocxx_gen_this, ::carla::rpc::WalkerBoneControlIn const &bones) noexcept {
  void (*carla_client_Walker_SetBonesTransform_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Walker &, ::carla::rpc::WalkerBoneControlIn const &) = ::carla_client_Walker_SetBonesTransform_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Walker_SetBonesTransform_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, bones);
}

void cxxbridge1$carla_client_Walker_BlendPose_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Walker &autocxx_gen_this, float blend) noexcept {
  void (*carla_client_Walker_BlendPose_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Walker &, float) = ::carla_client_Walker_BlendPose_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Walker_BlendPose_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, blend);
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
void carla$client$cxxbridge1$Walker$ShowPose(::carla::client::Walker &self) noexcept {
  void (::carla::client::Walker::*ShowPose$)() = &::carla::client::Walker::ShowPose;
  (self.*ShowPose$)();
}

void carla$client$cxxbridge1$Walker$HidePose(::carla::client::Walker &self) noexcept {
  void (::carla::client::Walker::*HidePose$)() = &::carla::client::Walker::HidePose;
  (self.*HidePose$)();
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
void cxxbridge1$carla_client_Walker_GetPoseFromAnimation_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Walker &autocxx_gen_this) noexcept {
  void (*carla_client_Walker_GetPoseFromAnimation_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Walker &) = ::carla_client_Walker_GetPoseFromAnimation_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Walker_GetPoseFromAnimation_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_client_Walker_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Walker *autocxx_gen_this, ::carla::client::ActorInitializer *init) noexcept {
  void (*carla_client_Walker_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Walker *, ::carla::client::ActorInitializer *) = ::carla_client_Walker_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Walker_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, init);
}

::std::string const *cxxbridge1$carla_client_ActorBlueprint_GetId_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorBlueprint const &autocxx_gen_this) noexcept {
  ::std::string const &(*carla_client_ActorBlueprint_GetId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorBlueprint const &) = ::carla_client_ActorBlueprint_GetId_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_client_ActorBlueprint_GetId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
bool carla$client$cxxbridge1$ActorBlueprint$ContainsTag(::carla::client::ActorBlueprint const &self, ::std::string const &tag) noexcept {
  bool (::carla::client::ActorBlueprint::*ContainsTag$)(::std::string const &) const = &::carla::client::ActorBlueprint::ContainsTag;
  return (self.*ContainsTag$)(tag);
}

bool carla$client$cxxbridge1$ActorBlueprint$MatchTags(::carla::client::ActorBlueprint const &self, ::std::string const &wildcard_pattern) noexcept {
  bool (::carla::client::ActorBlueprint::*MatchTags$)(::std::string const &) const = &::carla::client::ActorBlueprint::MatchTags;
  return (self.*MatchTags$)(wildcard_pattern);
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
::std::vector<::std::string> *cxxbridge1$GetTags_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorBlueprint const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::vector<::std::string>> (*GetTags_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorBlueprint const &) = ::GetTags_autocxx_wrapper_0xd539d5a17acbdd25;
  return GetTags_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}
} // extern "C"

namespace carla {
namespace client {
extern "C" {
bool carla$client$cxxbridge1$ActorBlueprint$ContainsAttribute(::carla::client::ActorBlueprint const &self, ::std::string const &id) noexcept {
  bool (::carla::client::ActorBlueprint::*ContainsAttribute$)(::std::string const &) const = &::carla::client::ActorBlueprint::ContainsAttribute;
  return (self.*ContainsAttribute$)(id);
}
} // extern "C"
} // namespace client
} // namespace carla

extern "C" {
void cxxbridge1$SetAttribute_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorBlueprint &autocxx_gen_this, ::std::string const &id, ::std::string *value) noexcept {
  void (*SetAttribute_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorBlueprint &, ::std::string const &, ::std::unique_ptr<::std::string>) = ::SetAttribute_autocxx_wrapper_0xd539d5a17acbdd25;
  SetAttribute_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, id, ::std::unique_ptr<::std::string>(value));
}

::std::size_t cxxbridge1$carla_client_ActorBlueprint_size_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorBlueprint const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_client_ActorBlueprint_size_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorBlueprint const &) = ::carla_client_ActorBlueprint_size_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_client_ActorBlueprint_size_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$MakeActorDescription_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorBlueprint const &autocxx_gen_this, ::carla::rpc::ActorDescription *placement_return_type) noexcept {
  void (*MakeActorDescription_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorBlueprint const &, ::carla::rpc::ActorDescription *) = ::MakeActorDescription_autocxx_wrapper_0xd539d5a17acbdd25;
  MakeActorDescription_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

void cxxbridge1$carla_client_ActorBlueprint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorBlueprint *autocxx_gen_this, ::carla::rpc::ActorDefinition *actor_definition) noexcept {
  void (*carla_client_ActorBlueprint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorBlueprint *, ::carla::rpc::ActorDefinition *) = ::carla_client_ActorBlueprint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_ActorBlueprint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor_definition);
}

bool cxxbridge1$carla_client_ActorList_empty_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorList const &autocxx_gen_this) noexcept {
  bool (*carla_client_ActorList_empty_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorList const &) = ::carla_client_ActorList_empty_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_client_ActorList_empty_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::size_t cxxbridge1$carla_client_ActorList_size_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorList const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_client_ActorList_size_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorList const &) = ::carla_client_ActorList_size_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_client_ActorList_size_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$LaneInvasionSensor_destructor_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::LaneInvasionSensor *autocxx_gen_this) noexcept {
  void (*LaneInvasionSensor_destructor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::LaneInvasionSensor *) = ::LaneInvasionSensor_destructor_autocxx_wrapper_0xd539d5a17acbdd25;
  LaneInvasionSensor_destructor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_client_LaneInvasionSensor_Stop_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::LaneInvasionSensor &autocxx_gen_this) noexcept {
  void (*carla_client_LaneInvasionSensor_Stop_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::LaneInvasionSensor &) = ::carla_client_LaneInvasionSensor_Stop_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_LaneInvasionSensor_Stop_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

bool cxxbridge1$carla_client_LaneInvasionSensor_IsListening_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::LaneInvasionSensor const &autocxx_gen_this) noexcept {
  bool (*carla_client_LaneInvasionSensor_IsListening_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::LaneInvasionSensor const &) = ::carla_client_LaneInvasionSensor_IsListening_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_client_LaneInvasionSensor_IsListening_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla_rust::geom::FfiLocation *cxxbridge1$FfiLocation_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::geom::FfiLocation *(*FfiLocation_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiLocation_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiLocation_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiLocation_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiLocation *arg0) noexcept {
  void (*FfiLocation_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiLocation *) = ::FfiLocation_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLocation_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::geom::FfiTransform *cxxbridge1$FfiTransform_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::geom::FfiTransform *(*FfiTransform_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiTransform_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiTransform_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiTransform_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiTransform *arg0) noexcept {
  void (*FfiTransform_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiTransform *) = ::FfiTransform_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiTransform_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::geom::FfiBoundingBox *cxxbridge1$FfiBoundingBox_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::geom::FfiBoundingBox *(*FfiBoundingBox_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiBoundingBox_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiBoundingBox_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiBoundingBox_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiBoundingBox *arg0) noexcept {
  void (*FfiBoundingBox_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiBoundingBox *) = ::FfiBoundingBox_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiBoundingBox_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

bool cxxbridge1$carla_rust_geom_FfiBoundingBox_Contains_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiBoundingBox const &autocxx_gen_this, ::carla_rust::geom::FfiLocation const &in_world_point, ::carla_rust::geom::FfiTransform const &in_bbox_to_world_transform) noexcept {
  bool (*carla_rust_geom_FfiBoundingBox_Contains_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiBoundingBox const &, ::carla_rust::geom::FfiLocation const &, ::carla_rust::geom::FfiTransform const &) = ::carla_rust_geom_FfiBoundingBox_Contains_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_geom_FfiBoundingBox_Contains_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, in_world_point, in_bbox_to_world_transform);
}

::std::vector<::carla_rust::geom::FfiLocation> *cxxbridge1$carla_rust_geom_FfiBoundingBox_GetLocalVertices_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiBoundingBox const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::vector<::carla_rust::geom::FfiLocation>> (*carla_rust_geom_FfiBoundingBox_GetLocalVertices_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiBoundingBox const &) = ::carla_rust_geom_FfiBoundingBox_GetLocalVertices_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_geom_FfiBoundingBox_GetLocalVertices_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::std::vector<::carla_rust::geom::FfiLocation> *cxxbridge1$carla_rust_geom_FfiBoundingBox_GetWorldVertices_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiBoundingBox const &autocxx_gen_this, ::carla_rust::geom::FfiTransform const &in_bbox_to_world_tr) noexcept {
  ::std::unique_ptr<::std::vector<::carla_rust::geom::FfiLocation>> (*carla_rust_geom_FfiBoundingBox_GetWorldVertices_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiBoundingBox const &, ::carla_rust::geom::FfiTransform const &) = ::carla_rust_geom_FfiBoundingBox_GetWorldVertices_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_geom_FfiBoundingBox_GetWorldVertices_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, in_bbox_to_world_tr).release();
}

::carla::geom::BoundingBox const *cxxbridge1$carla_rust_geom_FfiBoundingBox_as_native_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiBoundingBox const &autocxx_gen_this) noexcept {
  ::carla::geom::BoundingBox const &(*carla_rust_geom_FfiBoundingBox_as_native_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiBoundingBox const &) = ::carla_rust_geom_FfiBoundingBox_as_native_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_geom_FfiBoundingBox_as_native_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_geom_FfiBoundingBox_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiBoundingBox *autocxx_gen_this, ::carla::geom::BoundingBox *base) noexcept {
  void (*carla_rust_geom_FfiBoundingBox_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiBoundingBox *, ::carla::geom::BoundingBox *) = ::carla_rust_geom_FfiBoundingBox_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_geom_FfiBoundingBox_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

void cxxbridge1$carla_rust_geom_FfiBoundingBox_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiBoundingBox *autocxx_gen_this, ::carla::geom::BoundingBox const &base) noexcept {
  void (*carla_rust_geom_FfiBoundingBox_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiBoundingBox *, ::carla::geom::BoundingBox const &) = ::carla_rust_geom_FfiBoundingBox_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_geom_FfiBoundingBox_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

::carla_rust::rpc::FfiVehiclePhysicsControl *cxxbridge1$FfiVehiclePhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::rpc::FfiVehiclePhysicsControl *(*FfiVehiclePhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiVehiclePhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiVehiclePhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiVehiclePhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehiclePhysicsControl *arg0) noexcept {
  void (*FfiVehiclePhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehiclePhysicsControl *) = ::FfiVehiclePhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiVehiclePhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::rpc::FfiEpisodeSettings *cxxbridge1$FfiEpisodeSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::rpc::FfiEpisodeSettings *(*FfiEpisodeSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiEpisodeSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiEpisodeSettings_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiEpisodeSettings_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEpisodeSettings *arg0) noexcept {
  void (*FfiEpisodeSettings_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEpisodeSettings *) = ::FfiEpisodeSettings_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiEpisodeSettings_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::rpc::FfiLabelledPoint *cxxbridge1$FfiLabelledPoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::rpc::FfiLabelledPoint *(*FfiLabelledPoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiLabelledPoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiLabelledPoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiLabelledPoint_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiLabelledPoint *arg0) noexcept {
  void (*FfiLabelledPoint_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiLabelledPoint *) = ::FfiLabelledPoint_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLabelledPoint_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::rpc::FfiVehicleLightStateElementRef *cxxbridge1$FfiVehicleLightStateElementRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::rpc::FfiVehicleLightStateElementRef *(*FfiVehicleLightStateElementRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiVehicleLightStateElementRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiVehicleLightStateElementRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiVehicleLightStateElementRef_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehicleLightStateElementRef *arg0) noexcept {
  void (*FfiVehicleLightStateElementRef_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehicleLightStateElementRef *) = ::FfiVehicleLightStateElementRef_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiVehicleLightStateElementRef_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::rpc::FfiVehicleLightStateList *cxxbridge1$FfiVehicleLightStateList_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::rpc::FfiVehicleLightStateList *(*FfiVehicleLightStateList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiVehicleLightStateList_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiVehicleLightStateList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiVehicleLightStateList_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehicleLightStateList *arg0) noexcept {
  void (*FfiVehicleLightStateList_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehicleLightStateList *) = ::FfiVehicleLightStateList_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiVehicleLightStateList_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::rpc::FfiEnvironmentObjectRef *cxxbridge1$FfiEnvironmentObjectRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::rpc::FfiEnvironmentObjectRef *(*FfiEnvironmentObjectRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiEnvironmentObjectRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiEnvironmentObjectRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiEnvironmentObjectRef_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEnvironmentObjectRef *arg0) noexcept {
  void (*FfiEnvironmentObjectRef_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEnvironmentObjectRef *) = ::FfiEnvironmentObjectRef_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiEnvironmentObjectRef_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::rpc::FfiRpcColor *cxxbridge1$FfiRpcColor_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::rpc::FfiRpcColor *(*FfiRpcColor_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiRpcColor_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiRpcColor_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiRpcColor_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiRpcColor *arg0) noexcept {
  void (*FfiRpcColor_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiRpcColor *) = ::FfiRpcColor_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiRpcColor_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::rpc::FfiRpcLightState *cxxbridge1$FfiRpcLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::rpc::FfiRpcLightState *(*FfiRpcLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiRpcLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiRpcLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiRpcLightState_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiRpcLightState *arg0) noexcept {
  void (*FfiRpcLightState_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiRpcLightState *) = ::FfiRpcLightState_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiRpcLightState_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}
} // extern "C"

namespace carla_rust {
namespace rpc {
extern "C" {
::std::vector<::carla::geom::Vector2D> const *carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$torque_curve(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  ::std::vector<::carla::geom::Vector2D> const &(::carla_rust::rpc::FfiVehiclePhysicsControl::*torque_curve$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::torque_curve;
  return &(self.*torque_curve$)();
}

float carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$max_rpm(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  float (::carla_rust::rpc::FfiVehiclePhysicsControl::*max_rpm$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::max_rpm;
  return (self.*max_rpm$)();
}

float carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$moi(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  float (::carla_rust::rpc::FfiVehiclePhysicsControl::*moi$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::moi;
  return (self.*moi$)();
}

float carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$damping_rate_full_throttle(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  float (::carla_rust::rpc::FfiVehiclePhysicsControl::*damping_rate_full_throttle$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::damping_rate_full_throttle;
  return (self.*damping_rate_full_throttle$)();
}

float carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$damping_rate_zero_throttle_clutch_engaged(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  float (::carla_rust::rpc::FfiVehiclePhysicsControl::*damping_rate_zero_throttle_clutch_engaged$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::damping_rate_zero_throttle_clutch_engaged;
  return (self.*damping_rate_zero_throttle_clutch_engaged$)();
}

float carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$damping_rate_zero_throttle_clutch_disengaged(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  float (::carla_rust::rpc::FfiVehiclePhysicsControl::*damping_rate_zero_throttle_clutch_disengaged$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::damping_rate_zero_throttle_clutch_disengaged;
  return (self.*damping_rate_zero_throttle_clutch_disengaged$)();
}

bool carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$use_gear_autobox(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  bool (::carla_rust::rpc::FfiVehiclePhysicsControl::*use_gear_autobox$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::use_gear_autobox;
  return (self.*use_gear_autobox$)();
}

float carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$gear_switch_time(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  float (::carla_rust::rpc::FfiVehiclePhysicsControl::*gear_switch_time$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::gear_switch_time;
  return (self.*gear_switch_time$)();
}

float carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$clutch_strength(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  float (::carla_rust::rpc::FfiVehiclePhysicsControl::*clutch_strength$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::clutch_strength;
  return (self.*clutch_strength$)();
}

float carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$final_ratio(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  float (::carla_rust::rpc::FfiVehiclePhysicsControl::*final_ratio$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::final_ratio;
  return (self.*final_ratio$)();
}

::std::vector<::carla::rpc::GearPhysicsControl> const *carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$forward_gears(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  ::std::vector<::carla::rpc::GearPhysicsControl> const &(::carla_rust::rpc::FfiVehiclePhysicsControl::*forward_gears$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::forward_gears;
  return &(self.*forward_gears$)();
}

float carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$mass(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  float (::carla_rust::rpc::FfiVehiclePhysicsControl::*mass$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::mass;
  return (self.*mass$)();
}

float carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$drag_coefficient(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  float (::carla_rust::rpc::FfiVehiclePhysicsControl::*drag_coefficient$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::drag_coefficient;
  return (self.*drag_coefficient$)();
}

::carla_rust::geom::FfiLocation const *carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$center_of_mass(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  ::carla_rust::geom::FfiLocation const &(::carla_rust::rpc::FfiVehiclePhysicsControl::*center_of_mass$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::center_of_mass;
  return &(self.*center_of_mass$)();
}

::std::vector<::carla::geom::Vector2D> const *carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$steering_curve(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  ::std::vector<::carla::geom::Vector2D> const &(::carla_rust::rpc::FfiVehiclePhysicsControl::*steering_curve$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::steering_curve;
  return &(self.*steering_curve$)();
}

::std::vector<::carla::rpc::WheelPhysicsControl> const *carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$wheels(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  ::std::vector<::carla::rpc::WheelPhysicsControl> const &(::carla_rust::rpc::FfiVehiclePhysicsControl::*wheels$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::wheels;
  return &(self.*wheels$)();
}

bool carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$use_sweep_wheel_collision(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  bool (::carla_rust::rpc::FfiVehiclePhysicsControl::*use_sweep_wheel_collision$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::use_sweep_wheel_collision;
  return (self.*use_sweep_wheel_collision$)();
}

::carla::rpc::VehiclePhysicsControl const *carla_rust$rpc$cxxbridge1$FfiVehiclePhysicsControl$inner(::carla_rust::rpc::FfiVehiclePhysicsControl const &self) noexcept {
  ::carla::rpc::VehiclePhysicsControl const &(::carla_rust::rpc::FfiVehiclePhysicsControl::*inner$)() const = &::carla_rust::rpc::FfiVehiclePhysicsControl::inner;
  return &(self.*inner$)();
}
} // extern "C"
} // namespace rpc
} // namespace carla_rust

extern "C" {
void cxxbridge1$carla_rust_rpc_FfiVehiclePhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehiclePhysicsControl *autocxx_gen_this) noexcept {
  void (*carla_rust_rpc_FfiVehiclePhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehiclePhysicsControl *) = ::carla_rust_rpc_FfiVehiclePhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiVehiclePhysicsControl_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_rpc_FfiVehiclePhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehiclePhysicsControl *autocxx_gen_this, ::std::vector<::carla::geom::Vector2D> const &in_torque_curve, float in_max_rpm, float in_moi, float in_damping_rate_full_throttle, float in_damping_rate_zero_throttle_clutch_engaged, float in_damping_rate_zero_throttle_clutch_disengaged, bool in_use_gear_autobox, float in_gear_switch_time, float in_clutch_strength, float in_final_ratio, ::std::vector<::carla::rpc::GearPhysicsControl> &in_forward_gears, float in_mass, float in_drag_coefficient, ::carla_rust::geom::FfiLocation &in_center_of_mass, ::std::vector<::carla::geom::Vector2D> const &in_steering_curve, ::std::vector<::carla::rpc::WheelPhysicsControl> &in_wheels, bool in_use_sweep_wheel_collision) noexcept {
  void (*carla_rust_rpc_FfiVehiclePhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehiclePhysicsControl *, ::std::vector<::carla::geom::Vector2D> const &, float, float, float, float, float, bool, float, float, float, ::std::vector<::carla::rpc::GearPhysicsControl> &, float, float, ::carla_rust::geom::FfiLocation &, ::std::vector<::carla::geom::Vector2D> const &, ::std::vector<::carla::rpc::WheelPhysicsControl> &, bool) = ::carla_rust_rpc_FfiVehiclePhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiVehiclePhysicsControl_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, in_torque_curve, in_max_rpm, in_moi, in_damping_rate_full_throttle, in_damping_rate_zero_throttle_clutch_engaged, in_damping_rate_zero_throttle_clutch_disengaged, in_use_gear_autobox, in_gear_switch_time, in_clutch_strength, in_final_ratio, in_forward_gears, in_mass, in_drag_coefficient, in_center_of_mass, in_steering_curve, in_wheels, in_use_sweep_wheel_collision);
}

void cxxbridge1$carla_rust_rpc_FfiVehiclePhysicsControl_new2_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehiclePhysicsControl *autocxx_gen_this, ::carla::rpc::VehiclePhysicsControl *base) noexcept {
  void (*carla_rust_rpc_FfiVehiclePhysicsControl_new2_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehiclePhysicsControl *, ::carla::rpc::VehiclePhysicsControl *) = ::carla_rust_rpc_FfiVehiclePhysicsControl_new2_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiVehiclePhysicsControl_new2_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

::carla::rpc::EpisodeSettings const *cxxbridge1$carla_rust_rpc_FfiEpisodeSettings_inner_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEpisodeSettings const &autocxx_gen_this) noexcept {
  ::carla::rpc::EpisodeSettings const &(*carla_rust_rpc_FfiEpisodeSettings_inner_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEpisodeSettings const &) = ::carla_rust_rpc_FfiEpisodeSettings_inner_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_rpc_FfiEpisodeSettings_inner_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}
} // extern "C"

namespace carla_rust {
namespace rpc {
extern "C" {
bool carla_rust$rpc$cxxbridge1$FfiEpisodeSettings$synchronous_mode(::carla_rust::rpc::FfiEpisodeSettings const &self) noexcept {
  bool (::carla_rust::rpc::FfiEpisodeSettings::*synchronous_mode$)() const = &::carla_rust::rpc::FfiEpisodeSettings::synchronous_mode;
  return (self.*synchronous_mode$)();
}

bool carla_rust$rpc$cxxbridge1$FfiEpisodeSettings$no_rendering_mode(::carla_rust::rpc::FfiEpisodeSettings const &self) noexcept {
  bool (::carla_rust::rpc::FfiEpisodeSettings::*no_rendering_mode$)() const = &::carla_rust::rpc::FfiEpisodeSettings::no_rendering_mode;
  return (self.*no_rendering_mode$)();
}

double carla_rust$rpc$cxxbridge1$FfiEpisodeSettings$fixed_delta_seconds(::carla_rust::rpc::FfiEpisodeSettings const &self) noexcept {
  double (::carla_rust::rpc::FfiEpisodeSettings::*fixed_delta_seconds$)() const = &::carla_rust::rpc::FfiEpisodeSettings::fixed_delta_seconds;
  return (self.*fixed_delta_seconds$)();
}

bool carla_rust$rpc$cxxbridge1$FfiEpisodeSettings$substepping(::carla_rust::rpc::FfiEpisodeSettings const &self) noexcept {
  bool (::carla_rust::rpc::FfiEpisodeSettings::*substepping$)() const = &::carla_rust::rpc::FfiEpisodeSettings::substepping;
  return (self.*substepping$)();
}

double carla_rust$rpc$cxxbridge1$FfiEpisodeSettings$max_substep_delta_time(::carla_rust::rpc::FfiEpisodeSettings const &self) noexcept {
  double (::carla_rust::rpc::FfiEpisodeSettings::*max_substep_delta_time$)() const = &::carla_rust::rpc::FfiEpisodeSettings::max_substep_delta_time;
  return (self.*max_substep_delta_time$)();
}

void carla_rust$rpc$cxxbridge1$FfiEpisodeSettings$max_substeps(::carla_rust::rpc::FfiEpisodeSettings const &self, ::c_int *return$) noexcept {
  ::c_int (::carla_rust::rpc::FfiEpisodeSettings::*max_substeps$)() const = &::carla_rust::rpc::FfiEpisodeSettings::max_substeps;
  new (return$) ::c_int((self.*max_substeps$)());
}

float carla_rust$rpc$cxxbridge1$FfiEpisodeSettings$max_culling_distance(::carla_rust::rpc::FfiEpisodeSettings const &self) noexcept {
  float (::carla_rust::rpc::FfiEpisodeSettings::*max_culling_distance$)() const = &::carla_rust::rpc::FfiEpisodeSettings::max_culling_distance;
  return (self.*max_culling_distance$)();
}

bool carla_rust$rpc$cxxbridge1$FfiEpisodeSettings$deterministic_ragdolls(::carla_rust::rpc::FfiEpisodeSettings const &self) noexcept {
  bool (::carla_rust::rpc::FfiEpisodeSettings::*deterministic_ragdolls$)() const = &::carla_rust::rpc::FfiEpisodeSettings::deterministic_ragdolls;
  return (self.*deterministic_ragdolls$)();
}

float carla_rust$rpc$cxxbridge1$FfiEpisodeSettings$tile_stream_distance(::carla_rust::rpc::FfiEpisodeSettings const &self) noexcept {
  float (::carla_rust::rpc::FfiEpisodeSettings::*tile_stream_distance$)() const = &::carla_rust::rpc::FfiEpisodeSettings::tile_stream_distance;
  return (self.*tile_stream_distance$)();
}

float carla_rust$rpc$cxxbridge1$FfiEpisodeSettings$actor_active_distance(::carla_rust::rpc::FfiEpisodeSettings const &self) noexcept {
  float (::carla_rust::rpc::FfiEpisodeSettings::*actor_active_distance$)() const = &::carla_rust::rpc::FfiEpisodeSettings::actor_active_distance;
  return (self.*actor_active_distance$)();
}
} // extern "C"
} // namespace rpc
} // namespace carla_rust

extern "C" {
void cxxbridge1$carla_rust_rpc_FfiEpisodeSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEpisodeSettings *autocxx_gen_this) noexcept {
  void (*carla_rust_rpc_FfiEpisodeSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEpisodeSettings *) = ::carla_rust_rpc_FfiEpisodeSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiEpisodeSettings_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_rpc_FfiEpisodeSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEpisodeSettings *autocxx_gen_this, ::carla::rpc::EpisodeSettings *base) noexcept {
  void (*carla_rust_rpc_FfiEpisodeSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEpisodeSettings *, ::carla::rpc::EpisodeSettings *) = ::carla_rust_rpc_FfiEpisodeSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiEpisodeSettings_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

void cxxbridge1$carla_rust_rpc_FfiEpisodeSettings_new2_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEpisodeSettings *autocxx_gen_this, bool synchronous_mode, bool no_rendering_mode, double fixed_delta_seconds, bool substepping, double max_substep_delta_time, ::c_int *max_substeps, float max_culling_distance, bool deterministic_ragdolls, float tile_stream_distance, float actor_active_distance) noexcept {
  void (*carla_rust_rpc_FfiEpisodeSettings_new2_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEpisodeSettings *, bool, bool, double, bool, double, ::c_int, float, bool, float, float) = ::carla_rust_rpc_FfiEpisodeSettings_new2_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiEpisodeSettings_new2_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, synchronous_mode, no_rendering_mode, fixed_delta_seconds, substepping, max_substep_delta_time, ::std::move(*max_substeps), max_culling_distance, deterministic_ragdolls, tile_stream_distance, actor_active_distance);
}

void cxxbridge1$carla_rust_rpc_FfiLabelledPoint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiLabelledPoint *autocxx_gen_this, ::carla::rpc::LabelledPoint *orig) noexcept {
  void (*carla_rust_rpc_FfiLabelledPoint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiLabelledPoint *, ::carla::rpc::LabelledPoint *) = ::carla_rust_rpc_FfiLabelledPoint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiLabelledPoint_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, orig);
}
} // extern "C"

namespace carla_rust {
namespace rpc {
extern "C" {
::std::uint32_t carla_rust$rpc$cxxbridge1$FfiVehicleLightStateElementRef$id(::carla_rust::rpc::FfiVehicleLightStateElementRef const &self) noexcept {
  ::std::uint32_t (::carla_rust::rpc::FfiVehicleLightStateElementRef::*id$)() const = &::carla_rust::rpc::FfiVehicleLightStateElementRef::id;
  return (self.*id$)();
}

void carla_rust$rpc$cxxbridge1$FfiVehicleLightStateElementRef$light_state(::carla_rust::rpc::FfiVehicleLightStateElementRef const &self, ::carla::rpc::VehicleLightState::LightState *return$) noexcept {
  ::carla::rpc::VehicleLightState::LightState (::carla_rust::rpc::FfiVehicleLightStateElementRef::*light_state$)() const = &::carla_rust::rpc::FfiVehicleLightStateElementRef::light_state;
  new (return$) ::carla::rpc::VehicleLightState::LightState((self.*light_state$)());
}
} // extern "C"
} // namespace rpc
} // namespace carla_rust

extern "C" {
void cxxbridge1$carla_rust_rpc_FfiVehicleLightStateElementRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehicleLightStateElementRef *autocxx_gen_this, ::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete const &elem) noexcept {
  void (*carla_rust_rpc_FfiVehicleLightStateElementRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehicleLightStateElementRef *, ::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete const &) = ::carla_rust_rpc_FfiVehicleLightStateElementRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiVehicleLightStateElementRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, elem);
}
} // extern "C"

namespace carla_rust {
namespace rpc {
extern "C" {
::std::size_t carla_rust$rpc$cxxbridge1$FfiVehicleLightStateList$len(::carla_rust::rpc::FfiVehicleLightStateList const &self) noexcept {
  ::std::size_t (::carla_rust::rpc::FfiVehicleLightStateList::*len$)() const = &::carla_rust::rpc::FfiVehicleLightStateList::len;
  return (self.*len$)();
}

::carla_rust::rpc::FfiVehicleLightStateElementRef *carla_rust$rpc$cxxbridge1$FfiVehicleLightStateList$get(::carla_rust::rpc::FfiVehicleLightStateList const &self, ::std::size_t index) noexcept {
  ::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> (::carla_rust::rpc::FfiVehicleLightStateList::*get$)(::std::size_t) const = &::carla_rust::rpc::FfiVehicleLightStateList::get;
  return (self.*get$)(index).release();
}
} // extern "C"
} // namespace rpc
} // namespace carla_rust

extern "C" {
void cxxbridge1$carla_rust_rpc_FfiVehicleLightStateList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehicleLightStateList *autocxx_gen_this, ::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *vec) noexcept {
  void (*carla_rust_rpc_FfiVehicleLightStateList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehicleLightStateList *, ::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *) = ::carla_rust_rpc_FfiVehicleLightStateList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiVehicleLightStateList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, vec);
}
} // extern "C"

namespace carla_rust {
namespace rpc {
extern "C" {
::carla_rust::geom::FfiTransform const *carla_rust$rpc$cxxbridge1$FfiEnvironmentObjectRef$transform(::carla_rust::rpc::FfiEnvironmentObjectRef const &self) noexcept {
  ::carla_rust::geom::FfiTransform const &(::carla_rust::rpc::FfiEnvironmentObjectRef::*transform$)() const = &::carla_rust::rpc::FfiEnvironmentObjectRef::transform;
  return &(self.*transform$)();
}

::carla_rust::geom::FfiBoundingBox const *carla_rust$rpc$cxxbridge1$FfiEnvironmentObjectRef$bounding_box(::carla_rust::rpc::FfiEnvironmentObjectRef const &self) noexcept {
  ::carla_rust::geom::FfiBoundingBox const &(::carla_rust::rpc::FfiEnvironmentObjectRef::*bounding_box$)() const = &::carla_rust::rpc::FfiEnvironmentObjectRef::bounding_box;
  return &(self.*bounding_box$)();
}
} // extern "C"
} // namespace rpc
} // namespace carla_rust

extern "C" {
::std::uint64_t cxxbridge1$carla_rust_rpc_FfiEnvironmentObjectRef_id_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEnvironmentObjectRef const &autocxx_gen_this) noexcept {
  ::std::uint64_t (*carla_rust_rpc_FfiEnvironmentObjectRef_id_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEnvironmentObjectRef const &) = ::carla_rust_rpc_FfiEnvironmentObjectRef_id_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_rpc_FfiEnvironmentObjectRef_id_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::string const *cxxbridge1$carla_rust_rpc_FfiEnvironmentObjectRef_name_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEnvironmentObjectRef const &autocxx_gen_this) noexcept {
  ::std::string const &(*carla_rust_rpc_FfiEnvironmentObjectRef_name_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEnvironmentObjectRef const &) = ::carla_rust_rpc_FfiEnvironmentObjectRef_name_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_rpc_FfiEnvironmentObjectRef_name_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_rpc_FfiEnvironmentObjectRef_type_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEnvironmentObjectRef const &autocxx_gen_this, ::carla::rpc::CityObjectLabel *return$) noexcept {
  ::carla::rpc::CityObjectLabel (*carla_rust_rpc_FfiEnvironmentObjectRef_type_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEnvironmentObjectRef const &) = ::carla_rust_rpc_FfiEnvironmentObjectRef_type_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::rpc::CityObjectLabel(carla_rust_rpc_FfiEnvironmentObjectRef_type_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_rpc_FfiEnvironmentObjectRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEnvironmentObjectRef *autocxx_gen_this, ::carla::rpc::EnvironmentObject const &orig) noexcept {
  void (*carla_rust_rpc_FfiEnvironmentObjectRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEnvironmentObjectRef *, ::carla::rpc::EnvironmentObject const &) = ::carla_rust_rpc_FfiEnvironmentObjectRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiEnvironmentObjectRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, orig);
}

::carla_rust::sensor::data::FfiColor *cxxbridge1$FfiColor_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::sensor::data::FfiColor *(*FfiColor_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiColor_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiColor_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiColor_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiColor *arg0) noexcept {
  void (*FfiColor_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiColor *) = ::FfiColor_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiColor_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::sensor::data::FfiCollisionEvent *cxxbridge1$FfiCollisionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::sensor::data::FfiCollisionEvent *(*FfiCollisionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiCollisionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiCollisionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiCollisionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiCollisionEvent *arg0) noexcept {
  void (*FfiCollisionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiCollisionEvent *) = ::FfiCollisionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiCollisionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::sensor::data::FfiImage *cxxbridge1$FfiImage_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::sensor::data::FfiImage *(*FfiImage_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiImage_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiImage_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiImage_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiImage *arg0) noexcept {
  void (*FfiImage_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiImage *) = ::FfiImage_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiImage_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::sensor::data::FfiLaneInvasionEvent *cxxbridge1$FfiLaneInvasionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::sensor::data::FfiLaneInvasionEvent *(*FfiLaneInvasionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiLaneInvasionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiLaneInvasionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiLaneInvasionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLaneInvasionEvent *arg0) noexcept {
  void (*FfiLaneInvasionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLaneInvasionEvent *) = ::FfiLaneInvasionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLaneInvasionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::sensor::data::FfiLidarDetection *cxxbridge1$FfiLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::sensor::data::FfiLidarDetection *(*FfiLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarDetection *arg0) noexcept {
  void (*FfiLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarDetection *) = ::FfiLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::sensor::data::FfiObstacleDetectionEvent *cxxbridge1$FfiObstacleDetectionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::sensor::data::FfiObstacleDetectionEvent *(*FfiObstacleDetectionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiObstacleDetectionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiObstacleDetectionEvent_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiObstacleDetectionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiObstacleDetectionEvent *arg0) noexcept {
  void (*FfiObstacleDetectionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiObstacleDetectionEvent *) = ::FfiObstacleDetectionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiObstacleDetectionEvent_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::sensor::data::FfiSemanticLidarDetection *cxxbridge1$FfiSemanticLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::sensor::data::FfiSemanticLidarDetection *(*FfiSemanticLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiSemanticLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiSemanticLidarDetection_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiSemanticLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarDetection *arg0) noexcept {
  void (*FfiSemanticLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarDetection *) = ::FfiSemanticLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiSemanticLidarDetection_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::sensor::data::FfiLidarMeasurement *cxxbridge1$FfiLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::sensor::data::FfiLidarMeasurement *(*FfiLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarMeasurement *arg0) noexcept {
  void (*FfiLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarMeasurement *) = ::FfiLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::sensor::data::FfiSemanticLidarMeasurement *cxxbridge1$FfiSemanticLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::sensor::data::FfiSemanticLidarMeasurement *(*FfiSemanticLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiSemanticLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiSemanticLidarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiSemanticLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarMeasurement *arg0) noexcept {
  void (*FfiSemanticLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarMeasurement *) = ::FfiSemanticLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiSemanticLidarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::sensor::data::FfiRadarMeasurement *cxxbridge1$FfiRadarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::sensor::data::FfiRadarMeasurement *(*FfiRadarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiRadarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiRadarMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiRadarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiRadarMeasurement *arg0) noexcept {
  void (*FfiRadarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiRadarMeasurement *) = ::FfiRadarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiRadarMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::sensor::data::FfiGnssMeasurement *cxxbridge1$FfiGnssMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::sensor::data::FfiGnssMeasurement *(*FfiGnssMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiGnssMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiGnssMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiGnssMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiGnssMeasurement *arg0) noexcept {
  void (*FfiGnssMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiGnssMeasurement *) = ::FfiGnssMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiGnssMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::sensor::data::FfiImuMeasurement *cxxbridge1$FfiImuMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::sensor::data::FfiImuMeasurement *(*FfiImuMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiImuMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiImuMeasurement_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiImuMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiImuMeasurement *arg0) noexcept {
  void (*FfiImuMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiImuMeasurement *) = ::FfiImuMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiImuMeasurement_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_rust_sensor_data_FfiCollisionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiCollisionEvent const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_sensor_data_FfiCollisionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiCollisionEvent const &) = ::carla_rust_sensor_data_FfiCollisionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_sensor_data_FfiCollisionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_sensor_data_FfiCollisionEvent_GetOtherActor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiCollisionEvent const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_sensor_data_FfiCollisionEvent_GetOtherActor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiCollisionEvent const &) = ::carla_rust_sensor_data_FfiCollisionEvent_GetOtherActor_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_sensor_data_FfiCollisionEvent_GetOtherActor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

::carla::geom::Vector3D const *cxxbridge1$carla_rust_sensor_data_FfiCollisionEvent_GetNormalImpulse_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiCollisionEvent const &autocxx_gen_this) noexcept {
  ::carla::geom::Vector3D const &(*carla_rust_sensor_data_FfiCollisionEvent_GetNormalImpulse_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiCollisionEvent const &) = ::carla_rust_sensor_data_FfiCollisionEvent_GetNormalImpulse_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_sensor_data_FfiCollisionEvent_GetNormalImpulse_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::size_t cxxbridge1$carla_rust_sensor_data_FfiImage_GetWidth_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiImage const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_sensor_data_FfiImage_GetWidth_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiImage const &) = ::carla_rust_sensor_data_FfiImage_GetWidth_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiImage_GetWidth_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::size_t cxxbridge1$carla_rust_sensor_data_FfiImage_GetHeight_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiImage const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_sensor_data_FfiImage_GetHeight_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiImage const &) = ::carla_rust_sensor_data_FfiImage_GetHeight_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiImage_GetHeight_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}
} // extern "C"

namespace carla_rust {
namespace sensor {
namespace data {
extern "C" {
float carla_rust$sensor$data$cxxbridge1$FfiImage$GetFOVAngle(::carla_rust::sensor::data::FfiImage const &self) noexcept {
  float (::carla_rust::sensor::data::FfiImage::*GetFOVAngle$)() const = &::carla_rust::sensor::data::FfiImage::GetFOVAngle;
  return (self.*GetFOVAngle$)();
}
} // extern "C"
} // namespace data
} // namespace sensor
} // namespace carla_rust

extern "C" {
::std::size_t cxxbridge1$carla_rust_sensor_data_FfiImage_size_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiImage const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_sensor_data_FfiImage_size_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiImage const &) = ::carla_rust_sensor_data_FfiImage_size_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiImage_size_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla_rust::sensor::data::FfiColor const *cxxbridge1$carla_rust_sensor_data_FfiImage_data_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiImage const &autocxx_gen_this) noexcept {
  ::carla_rust::sensor::data::FfiColor const *(*carla_rust_sensor_data_FfiImage_data_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiImage const &) = ::carla_rust_sensor_data_FfiImage_data_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiImage_data_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla_rust::sensor::data::FfiColor const *cxxbridge1$carla_rust_sensor_data_FfiImage_at_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiImage const &autocxx_gen_this, ::std::size_t pos) noexcept {
  ::carla_rust::sensor::data::FfiColor const &(*carla_rust_sensor_data_FfiImage_at_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiImage const &, ::std::size_t) = ::carla_rust_sensor_data_FfiImage_at_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_sensor_data_FfiImage_at_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, pos);
}

void cxxbridge1$carla_rust_sensor_data_FfiLaneInvasionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLaneInvasionEvent const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_sensor_data_FfiLaneInvasionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLaneInvasionEvent const &) = ::carla_rust_sensor_data_FfiLaneInvasionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_sensor_data_FfiLaneInvasionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

::std::vector<::carla_rust::road::element::FfiLaneMarking> const *cxxbridge1$carla_rust_sensor_data_FfiLaneInvasionEvent_GetCrossedLaneMarkings_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLaneInvasionEvent const &autocxx_gen_this) noexcept {
  ::std::vector<::carla_rust::road::element::FfiLaneMarking> const &(*carla_rust_sensor_data_FfiLaneInvasionEvent_GetCrossedLaneMarkings_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLaneInvasionEvent const &) = ::carla_rust_sensor_data_FfiLaneInvasionEvent_GetCrossedLaneMarkings_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_sensor_data_FfiLaneInvasionEvent_GetCrossedLaneMarkings_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla::sensor::data::LidarDetection *cxxbridge1$carla_rust_sensor_data_FfiLidarDetection_as_builtin_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarDetection &autocxx_gen_this) noexcept {
  ::carla::sensor::data::LidarDetection &(*carla_rust_sensor_data_FfiLidarDetection_as_builtin_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarDetection &) = ::carla_rust_sensor_data_FfiLidarDetection_as_builtin_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_sensor_data_FfiLidarDetection_as_builtin_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_sensor_data_FfiLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarDetection *autocxx_gen_this, ::carla::sensor::data::LidarDetection *base) noexcept {
  void (*carla_rust_sensor_data_FfiLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarDetection *, ::carla::sensor::data::LidarDetection *) = ::carla_rust_sensor_data_FfiLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_sensor_data_FfiLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

void cxxbridge1$carla_rust_sensor_data_FfiObstacleDetectionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiObstacleDetectionEvent const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_sensor_data_FfiObstacleDetectionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiObstacleDetectionEvent const &) = ::carla_rust_sensor_data_FfiObstacleDetectionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_sensor_data_FfiObstacleDetectionEvent_GetActor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_sensor_data_FfiObstacleDetectionEvent_GetOtherActor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiObstacleDetectionEvent const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_sensor_data_FfiObstacleDetectionEvent_GetOtherActor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiObstacleDetectionEvent const &) = ::carla_rust_sensor_data_FfiObstacleDetectionEvent_GetOtherActor_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_sensor_data_FfiObstacleDetectionEvent_GetOtherActor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

float cxxbridge1$carla_rust_sensor_data_FfiObstacleDetectionEvent_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiObstacleDetectionEvent const &autocxx_gen_this) noexcept {
  float (*carla_rust_sensor_data_FfiObstacleDetectionEvent_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiObstacleDetectionEvent const &) = ::carla_rust_sensor_data_FfiObstacleDetectionEvent_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiObstacleDetectionEvent_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla::sensor::data::SemanticLidarDetection *cxxbridge1$carla_rust_sensor_data_FfiSemanticLidarDetection_as_builtin_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarDetection &autocxx_gen_this) noexcept {
  ::carla::sensor::data::SemanticLidarDetection &(*carla_rust_sensor_data_FfiSemanticLidarDetection_as_builtin_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarDetection &) = ::carla_rust_sensor_data_FfiSemanticLidarDetection_as_builtin_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_sensor_data_FfiSemanticLidarDetection_as_builtin_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_sensor_data_FfiSemanticLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarDetection *autocxx_gen_this, ::carla::sensor::data::SemanticLidarDetection *base) noexcept {
  void (*carla_rust_sensor_data_FfiSemanticLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarDetection *, ::carla::sensor::data::SemanticLidarDetection *) = ::carla_rust_sensor_data_FfiSemanticLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_sensor_data_FfiSemanticLidarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

float cxxbridge1$carla_rust_sensor_data_FfiLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarMeasurement const &autocxx_gen_this) noexcept {
  float (*carla_rust_sensor_data_FfiLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarMeasurement const &) = ::carla_rust_sensor_data_FfiLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::uint32_t cxxbridge1$carla_rust_sensor_data_FfiLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarMeasurement const &autocxx_gen_this) noexcept {
  ::std::uint32_t (*carla_rust_sensor_data_FfiLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarMeasurement const &) = ::carla_rust_sensor_data_FfiLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::uint32_t cxxbridge1$carla_rust_sensor_data_FfiLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarMeasurement const &autocxx_gen_this, ::std::size_t channel) noexcept {
  ::std::uint32_t (*carla_rust_sensor_data_FfiLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarMeasurement const &, ::std::size_t) = ::carla_rust_sensor_data_FfiLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, channel);
}

::std::size_t cxxbridge1$carla_rust_sensor_data_FfiLidarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarMeasurement const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_sensor_data_FfiLidarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarMeasurement const &) = ::carla_rust_sensor_data_FfiLidarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiLidarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla_rust::sensor::data::FfiLidarDetection const *cxxbridge1$carla_rust_sensor_data_FfiLidarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarMeasurement const &autocxx_gen_this) noexcept {
  ::carla_rust::sensor::data::FfiLidarDetection const *(*carla_rust_sensor_data_FfiLidarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarMeasurement const &) = ::carla_rust_sensor_data_FfiLidarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiLidarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla_rust::sensor::data::FfiLidarDetection const *cxxbridge1$carla_rust_sensor_data_FfiLidarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarMeasurement const &autocxx_gen_this, ::std::size_t pos) noexcept {
  ::carla_rust::sensor::data::FfiLidarDetection const &(*carla_rust_sensor_data_FfiLidarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarMeasurement const &, ::std::size_t) = ::carla_rust_sensor_data_FfiLidarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_sensor_data_FfiLidarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, pos);
}

float cxxbridge1$carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarMeasurement const &autocxx_gen_this) noexcept {
  float (*carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarMeasurement const &) = ::carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetHorizontalAngle_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::uint32_t cxxbridge1$carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarMeasurement const &autocxx_gen_this) noexcept {
  ::std::uint32_t (*carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarMeasurement const &) = ::carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetChannelCount_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::uint32_t cxxbridge1$carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarMeasurement const &autocxx_gen_this, ::std::size_t channel) noexcept {
  ::std::uint32_t (*carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarMeasurement const &, ::std::size_t) = ::carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiSemanticLidarMeasurement_GetPointCount_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, channel);
}

::std::size_t cxxbridge1$carla_rust_sensor_data_FfiSemanticLidarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarMeasurement const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_sensor_data_FfiSemanticLidarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarMeasurement const &) = ::carla_rust_sensor_data_FfiSemanticLidarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiSemanticLidarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla_rust::sensor::data::FfiSemanticLidarDetection const *cxxbridge1$carla_rust_sensor_data_FfiSemanticLidarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarMeasurement const &autocxx_gen_this) noexcept {
  ::carla_rust::sensor::data::FfiSemanticLidarDetection const *(*carla_rust_sensor_data_FfiSemanticLidarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarMeasurement const &) = ::carla_rust_sensor_data_FfiSemanticLidarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiSemanticLidarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla_rust::sensor::data::FfiSemanticLidarDetection const *cxxbridge1$carla_rust_sensor_data_FfiSemanticLidarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarMeasurement const &autocxx_gen_this, ::std::size_t pos) noexcept {
  ::carla_rust::sensor::data::FfiSemanticLidarDetection const &(*carla_rust_sensor_data_FfiSemanticLidarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarMeasurement const &, ::std::size_t) = ::carla_rust_sensor_data_FfiSemanticLidarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_sensor_data_FfiSemanticLidarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, pos);
}

::std::size_t cxxbridge1$carla_rust_sensor_data_FfiRadarMeasurement_GetDetectionAmount_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiRadarMeasurement const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_sensor_data_FfiRadarMeasurement_GetDetectionAmount_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiRadarMeasurement const &) = ::carla_rust_sensor_data_FfiRadarMeasurement_GetDetectionAmount_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiRadarMeasurement_GetDetectionAmount_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::size_t cxxbridge1$carla_rust_sensor_data_FfiRadarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiRadarMeasurement const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_sensor_data_FfiRadarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiRadarMeasurement const &) = ::carla_rust_sensor_data_FfiRadarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiRadarMeasurement_size_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla::sensor::data::RadarDetection const *cxxbridge1$carla_rust_sensor_data_FfiRadarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiRadarMeasurement const &autocxx_gen_this) noexcept {
  ::carla::sensor::data::RadarDetection const *(*carla_rust_sensor_data_FfiRadarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiRadarMeasurement const &) = ::carla_rust_sensor_data_FfiRadarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiRadarMeasurement_data_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla::sensor::data::RadarDetection const *cxxbridge1$carla_rust_sensor_data_FfiRadarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiRadarMeasurement const &autocxx_gen_this, ::std::size_t pos) noexcept {
  ::carla::sensor::data::RadarDetection const &(*carla_rust_sensor_data_FfiRadarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiRadarMeasurement const &, ::std::size_t) = ::carla_rust_sensor_data_FfiRadarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_sensor_data_FfiRadarMeasurement_at_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, pos);
}

void cxxbridge1$carla_rust_sensor_data_FfiGnssMeasurement_GetGeoLocation_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiGnssMeasurement const &autocxx_gen_this, ::carla::geom::GeoLocation *return$) noexcept {
  ::carla::geom::GeoLocation (*carla_rust_sensor_data_FfiGnssMeasurement_GetGeoLocation_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiGnssMeasurement const &) = ::carla_rust_sensor_data_FfiGnssMeasurement_GetGeoLocation_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::GeoLocation(carla_rust_sensor_data_FfiGnssMeasurement_GetGeoLocation_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

double cxxbridge1$carla_rust_sensor_data_FfiGnssMeasurement_GetLongitude_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiGnssMeasurement const &autocxx_gen_this) noexcept {
  double (*carla_rust_sensor_data_FfiGnssMeasurement_GetLongitude_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiGnssMeasurement const &) = ::carla_rust_sensor_data_FfiGnssMeasurement_GetLongitude_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiGnssMeasurement_GetLongitude_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_rust_sensor_data_FfiGnssMeasurement_GetLatitude_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiGnssMeasurement const &autocxx_gen_this) noexcept {
  double (*carla_rust_sensor_data_FfiGnssMeasurement_GetLatitude_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiGnssMeasurement const &) = ::carla_rust_sensor_data_FfiGnssMeasurement_GetLatitude_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiGnssMeasurement_GetLatitude_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_rust_sensor_data_FfiGnssMeasurement_GetAltitude_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiGnssMeasurement const &autocxx_gen_this) noexcept {
  double (*carla_rust_sensor_data_FfiGnssMeasurement_GetAltitude_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiGnssMeasurement const &) = ::carla_rust_sensor_data_FfiGnssMeasurement_GetAltitude_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiGnssMeasurement_GetAltitude_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_sensor_data_FfiImuMeasurement_GetAccelerometer_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiImuMeasurement const &autocxx_gen_this, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (*carla_rust_sensor_data_FfiImuMeasurement_GetAccelerometer_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiImuMeasurement const &) = ::carla_rust_sensor_data_FfiImuMeasurement_GetAccelerometer_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector3D(carla_rust_sensor_data_FfiImuMeasurement_GetAccelerometer_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_sensor_data_FfiImuMeasurement_GetGyroscope_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiImuMeasurement const &autocxx_gen_this, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (*carla_rust_sensor_data_FfiImuMeasurement_GetGyroscope_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiImuMeasurement const &) = ::carla_rust_sensor_data_FfiImuMeasurement_GetGyroscope_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector3D(carla_rust_sensor_data_FfiImuMeasurement_GetGyroscope_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

float cxxbridge1$carla_rust_sensor_data_FfiImuMeasurement_GetCompass_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiImuMeasurement const &autocxx_gen_this) noexcept {
  float (*carla_rust_sensor_data_FfiImuMeasurement_GetCompass_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiImuMeasurement const &) = ::carla_rust_sensor_data_FfiImuMeasurement_GetCompass_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_data_FfiImuMeasurement_GetCompass_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla_rust::sensor::FfiSensorData *cxxbridge1$FfiSensorData_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::sensor::FfiSensorData *(*FfiSensorData_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiSensorData_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiSensorData_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiSensorData_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::FfiSensorData *arg0) noexcept {
  void (*FfiSensorData_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::FfiSensorData *) = ::FfiSensorData_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiSensorData_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::std::size_t cxxbridge1$carla_rust_sensor_FfiSensorData_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::FfiSensorData const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_sensor_FfiSensorData_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::FfiSensorData const &) = ::carla_rust_sensor_FfiSensorData_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_FfiSensorData_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_rust_sensor_FfiSensorData_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::FfiSensorData const &autocxx_gen_this) noexcept {
  double (*carla_rust_sensor_FfiSensorData_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::FfiSensorData const &) = ::carla_rust_sensor_FfiSensorData_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_sensor_FfiSensorData_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_sensor_FfiSensorData_GetSensorTransform_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::FfiSensorData const &autocxx_gen_this, ::carla_rust::geom::FfiTransform *return$) noexcept {
  ::carla_rust::geom::FfiTransform (*carla_rust_sensor_FfiSensorData_GetSensorTransform_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::FfiSensorData const &) = ::carla_rust_sensor_FfiSensorData_GetSensorTransform_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla_rust::geom::FfiTransform(carla_rust_sensor_FfiSensorData_GetSensorTransform_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}
} // extern "C"

namespace carla_rust {
namespace sensor {
extern "C" {
void carla_rust$sensor$cxxbridge1$FfiSensorData$to_image(::carla_rust::sensor::FfiSensorData const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiImage> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::sensor::data::FfiImage> (::carla_rust::sensor::FfiSensorData::*to_image$)() const = &::carla_rust::sensor::FfiSensorData::to_image;
  new (return$) ::std::shared_ptr<::carla_rust::sensor::data::FfiImage>((self.*to_image$)());
}

void carla_rust$sensor$cxxbridge1$FfiSensorData$to_gnss_measurement(::carla_rust::sensor::FfiSensorData const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> (::carla_rust::sensor::FfiSensorData::*to_gnss_measurement$)() const = &::carla_rust::sensor::FfiSensorData::to_gnss_measurement;
  new (return$) ::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>((self.*to_gnss_measurement$)());
}

void carla_rust$sensor$cxxbridge1$FfiSensorData$to_imu_measurement(::carla_rust::sensor::FfiSensorData const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement> (::carla_rust::sensor::FfiSensorData::*to_imu_measurement$)() const = &::carla_rust::sensor::FfiSensorData::to_imu_measurement;
  new (return$) ::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement>((self.*to_imu_measurement$)());
}

void carla_rust$sensor$cxxbridge1$FfiSensorData$to_collision_event(::carla_rust::sensor::FfiSensorData const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent> (::carla_rust::sensor::FfiSensorData::*to_collision_event$)() const = &::carla_rust::sensor::FfiSensorData::to_collision_event;
  new (return$) ::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent>((self.*to_collision_event$)());
}

void carla_rust$sensor$cxxbridge1$FfiSensorData$to_obstacle_detection_event(::carla_rust::sensor::FfiSensorData const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> (::carla_rust::sensor::FfiSensorData::*to_obstacle_detection_event$)() const = &::carla_rust::sensor::FfiSensorData::to_obstacle_detection_event;
  new (return$) ::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>((self.*to_obstacle_detection_event$)());
}

void carla_rust$sensor$cxxbridge1$FfiSensorData$to_lane_invasion_event(::carla_rust::sensor::FfiSensorData const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> (::carla_rust::sensor::FfiSensorData::*to_lane_invasion_event$)() const = &::carla_rust::sensor::FfiSensorData::to_lane_invasion_event;
  new (return$) ::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>((self.*to_lane_invasion_event$)());
}

void carla_rust$sensor$cxxbridge1$FfiSensorData$to_lidar_measurement(::carla_rust::sensor::FfiSensorData const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> (::carla_rust::sensor::FfiSensorData::*to_lidar_measurement$)() const = &::carla_rust::sensor::FfiSensorData::to_lidar_measurement;
  new (return$) ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>((self.*to_lidar_measurement$)());
}

void carla_rust$sensor$cxxbridge1$FfiSensorData$to_semantic_lidar_measurement(::carla_rust::sensor::FfiSensorData const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> (::carla_rust::sensor::FfiSensorData::*to_semantic_lidar_measurement$)() const = &::carla_rust::sensor::FfiSensorData::to_semantic_lidar_measurement;
  new (return$) ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>((self.*to_semantic_lidar_measurement$)());
}

void carla_rust$sensor$cxxbridge1$FfiSensorData$to_radar_measurement(::carla_rust::sensor::FfiSensorData const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> (::carla_rust::sensor::FfiSensorData::*to_radar_measurement$)() const = &::carla_rust::sensor::FfiSensorData::to_radar_measurement;
  new (return$) ::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>((self.*to_radar_measurement$)());
}
} // extern "C"
} // namespace sensor
} // namespace carla_rust

extern "C" {
::carla_rust::client::FfiActorAttributeValue *cxxbridge1$FfiActorAttributeValue_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiActorAttributeValue *(*FfiActorAttributeValue_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiActorAttributeValue_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiActorAttributeValue_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiActorAttributeValue_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorAttributeValue *arg0) noexcept {
  void (*FfiActorAttributeValue_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorAttributeValue *) = ::FfiActorAttributeValue_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiActorAttributeValue_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiActorAttributeValueList *cxxbridge1$FfiActorAttributeValueList_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiActorAttributeValueList *(*FfiActorAttributeValueList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiActorAttributeValueList_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiActorAttributeValueList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiActorAttributeValueList_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorAttributeValueList *arg0) noexcept {
  void (*FfiActorAttributeValueList_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorAttributeValueList *) = ::FfiActorAttributeValueList_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiActorAttributeValueList_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiActor *cxxbridge1$FfiActor_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiActor *(*FfiActor_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiActor_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiActor_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiActor_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor *arg0) noexcept {
  void (*FfiActor_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor *) = ::FfiActor_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiActor_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::ListenCallback *cxxbridge1$ListenCallback_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::ListenCallback *(*ListenCallback_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::ListenCallback_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return ListenCallback_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$ListenCallback_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::ListenCallback *arg0) noexcept {
  void (*ListenCallback_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::ListenCallback *) = ::ListenCallback_free_autocxx_wrapper_0xd539d5a17acbdd25;
  ListenCallback_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiWaypointList *cxxbridge1$FfiWaypointList_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiWaypointList *(*FfiWaypointList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiWaypointList_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiWaypointList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiWaypointList_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypointList *arg0) noexcept {
  void (*FfiWaypointList_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypointList *) = ::FfiWaypointList_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiWaypointList_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiWaypointPair *cxxbridge1$FfiWaypointPair_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiWaypointPair *(*FfiWaypointPair_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiWaypointPair_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiWaypointPair_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiWaypointPair_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypointPair *arg0) noexcept {
  void (*FfiWaypointPair_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypointPair *) = ::FfiWaypointPair_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiWaypointPair_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiJunction *cxxbridge1$FfiJunction_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiJunction *(*FfiJunction_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiJunction_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiJunction_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiJunction_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiJunction *arg0) noexcept {
  void (*FfiJunction_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiJunction *) = ::FfiJunction_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiJunction_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiLandmarkList *cxxbridge1$FfiLandmarkList_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiLandmarkList *(*FfiLandmarkList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiLandmarkList_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiLandmarkList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiLandmarkList_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmarkList *arg0) noexcept {
  void (*FfiLandmarkList_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmarkList *) = ::FfiLandmarkList_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLandmarkList_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiWaypoint *cxxbridge1$FfiWaypoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiWaypoint *(*FfiWaypoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiWaypoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiWaypoint_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiWaypoint_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint *arg0) noexcept {
  void (*FfiWaypoint_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint *) = ::FfiWaypoint_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiWaypoint_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiLandmark *cxxbridge1$FfiLandmark_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiLandmark *(*FfiLandmark_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiLandmark_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiLandmark_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiLandmark_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark *arg0) noexcept {
  void (*FfiLandmark_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark *) = ::FfiLandmark_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLandmark_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiTransformList *cxxbridge1$FfiTransformList_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiTransformList *(*FfiTransformList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiTransformList_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiTransformList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiTransformList_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTransformList *arg0) noexcept {
  void (*FfiTransformList_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTransformList *) = ::FfiTransformList_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiTransformList_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiMap *cxxbridge1$FfiMap_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiMap *(*FfiMap_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiMap_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiMap_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiMap_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap *arg0) noexcept {
  void (*FfiMap_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap *) = ::FfiMap_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiMap_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiTrafficSign *cxxbridge1$FfiTrafficSign_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiTrafficSign *(*FfiTrafficSign_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiTrafficSign_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiTrafficSign_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiTrafficSign_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficSign *arg0) noexcept {
  void (*FfiTrafficSign_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficSign *) = ::FfiTrafficSign_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiTrafficSign_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiVehicle *cxxbridge1$FfiVehicle_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiVehicle *(*FfiVehicle_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiVehicle_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiVehicle_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiVehicle_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle *arg0) noexcept {
  void (*FfiVehicle_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle *) = ::FfiVehicle_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiVehicle_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiSensor *cxxbridge1$FfiSensor_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiSensor *(*FfiSensor_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiSensor_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiSensor_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiSensor_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiSensor *arg0) noexcept {
  void (*FfiSensor_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiSensor *) = ::FfiSensor_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiSensor_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiBlueprintLibrary *cxxbridge1$FfiBlueprintLibrary_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiBlueprintLibrary *(*FfiBlueprintLibrary_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiBlueprintLibrary_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiBlueprintLibrary_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiBlueprintLibrary_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiBlueprintLibrary *arg0) noexcept {
  void (*FfiBlueprintLibrary_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiBlueprintLibrary *) = ::FfiBlueprintLibrary_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiBlueprintLibrary_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiActorList *cxxbridge1$FfiActorList_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiActorList *(*FfiActorList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiActorList_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiActorList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiActorList_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorList *arg0) noexcept {
  void (*FfiActorList_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorList *) = ::FfiActorList_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiActorList_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiBoundingBoxList *cxxbridge1$FfiBoundingBoxList_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiBoundingBoxList *(*FfiBoundingBoxList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiBoundingBoxList_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiBoundingBoxList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiBoundingBoxList_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiBoundingBoxList *arg0) noexcept {
  void (*FfiBoundingBoxList_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiBoundingBoxList *) = ::FfiBoundingBoxList_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiBoundingBoxList_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiLabelledPointList *cxxbridge1$FfiLabelledPointList_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiLabelledPointList *(*FfiLabelledPointList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiLabelledPointList_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiLabelledPointList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiLabelledPointList_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLabelledPointList *arg0) noexcept {
  void (*FfiLabelledPointList_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLabelledPointList *) = ::FfiLabelledPointList_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLabelledPointList_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiEnvironmentObjectList *cxxbridge1$FfiEnvironmentObjectList_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiEnvironmentObjectList *(*FfiEnvironmentObjectList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiEnvironmentObjectList_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiEnvironmentObjectList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiEnvironmentObjectList_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiEnvironmentObjectList *arg0) noexcept {
  void (*FfiEnvironmentObjectList_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiEnvironmentObjectList *) = ::FfiEnvironmentObjectList_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiEnvironmentObjectList_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiActorVec *cxxbridge1$FfiActorVec_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiActorVec *(*FfiActorVec_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiActorVec_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiActorVec_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiActorVec_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorVec *arg0) noexcept {
  void (*FfiActorVec_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorVec *) = ::FfiActorVec_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiActorVec_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiWorldSnapshot *cxxbridge1$FfiWorldSnapshot_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiWorldSnapshot *(*FfiWorldSnapshot_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiWorldSnapshot_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiWorldSnapshot_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiWorldSnapshot_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorldSnapshot *arg0) noexcept {
  void (*FfiWorldSnapshot_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorldSnapshot *) = ::FfiWorldSnapshot_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiWorldSnapshot_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiClientLightState *cxxbridge1$FfiClientLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiClientLightState *(*FfiClientLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiClientLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiClientLightState_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiClientLightState_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClientLightState *arg0) noexcept {
  void (*FfiClientLightState_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClientLightState *) = ::FfiClientLightState_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiClientLightState_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiLightRef *cxxbridge1$FfiLightRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiLightRef *(*FfiLightRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiLightRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiLightRef_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiLightRef_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef *arg0) noexcept {
  void (*FfiLightRef_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef *) = ::FfiLightRef_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLightRef_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiLightList *cxxbridge1$FfiLightList_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiLightList *(*FfiLightList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiLightList_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiLightList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiLightList_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightList *arg0) noexcept {
  void (*FfiLightList_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightList *) = ::FfiLightList_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLightList_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiLightManager *cxxbridge1$FfiLightManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiLightManager *(*FfiLightManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiLightManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiLightManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiLightManager_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager *arg0) noexcept {
  void (*FfiLightManager_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager *) = ::FfiLightManager_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLightManager_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiWorld *cxxbridge1$FfiWorld_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiWorld *(*FfiWorld_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiWorld_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiWorld_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiWorld_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld *arg0) noexcept {
  void (*FfiWorld_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld *) = ::FfiWorld_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiWorld_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiClient *cxxbridge1$FfiClient_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiClient *(*FfiClient_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiClient_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiClient_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiClient_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient *arg0) noexcept {
  void (*FfiClient_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient *) = ::FfiClient_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiClient_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiTrafficLightList *cxxbridge1$FfiTrafficLightList_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiTrafficLightList *(*FfiTrafficLightList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiTrafficLightList_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiTrafficLightList_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiTrafficLightList_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLightList *arg0) noexcept {
  void (*FfiTrafficLightList_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLightList *) = ::FfiTrafficLightList_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiTrafficLightList_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::client::FfiTrafficLight *cxxbridge1$FfiTrafficLight_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::client::FfiTrafficLight *(*FfiTrafficLight_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiTrafficLight_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiTrafficLight_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiTrafficLight_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight *arg0) noexcept {
  void (*FfiTrafficLight_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight *) = ::FfiTrafficLight_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiTrafficLight_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::std::string const *cxxbridge1$carla_rust_client_FfiActorAttributeValue_GetId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorAttributeValue const &autocxx_gen_this) noexcept {
  ::std::string const &(*carla_rust_client_FfiActorAttributeValue_GetId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorAttributeValue const &) = ::carla_rust_client_FfiActorAttributeValue_GetId_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_client_FfiActorAttributeValue_GetId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiActorAttributeValue_GetType_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorAttributeValue const &autocxx_gen_this, ::carla::rpc::ActorAttributeType *return$) noexcept {
  ::carla::rpc::ActorAttributeType (*carla_rust_client_FfiActorAttributeValue_GetType_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorAttributeValue const &) = ::carla_rust_client_FfiActorAttributeValue_GetType_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::rpc::ActorAttributeType(carla_rust_client_FfiActorAttributeValue_GetType_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

::std::string const *cxxbridge1$carla_rust_client_FfiActorAttributeValue_GetValue_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorAttributeValue const &autocxx_gen_this) noexcept {
  ::std::string const &(*carla_rust_client_FfiActorAttributeValue_GetValue_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorAttributeValue const &) = ::carla_rust_client_FfiActorAttributeValue_GetValue_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_client_FfiActorAttributeValue_GetValue_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
bool carla_rust$client$cxxbridge1$FfiActorAttributeValue$to_bool(::carla_rust::client::FfiActorAttributeValue const &self) noexcept {
  bool (::carla_rust::client::FfiActorAttributeValue::*to_bool$)() const = &::carla_rust::client::FfiActorAttributeValue::to_bool;
  return (self.*to_bool$)();
}

void carla_rust$client$cxxbridge1$FfiActorAttributeValue$to_int(::carla_rust::client::FfiActorAttributeValue const &self, ::c_int *return$) noexcept {
  ::c_int (::carla_rust::client::FfiActorAttributeValue::*to_int$)() const = &::carla_rust::client::FfiActorAttributeValue::to_int;
  new (return$) ::c_int((self.*to_int$)());
}

float carla_rust$client$cxxbridge1$FfiActorAttributeValue$to_float(::carla_rust::client::FfiActorAttributeValue const &self) noexcept {
  float (::carla_rust::client::FfiActorAttributeValue::*to_float$)() const = &::carla_rust::client::FfiActorAttributeValue::to_float;
  return (self.*to_float$)();
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
::std::string *cxxbridge1$to_string_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorAttributeValue const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*to_string_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorAttributeValue const &) = ::to_string_autocxx_wrapper_0xd539d5a17acbdd25;
  return to_string_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
void carla_rust$client$cxxbridge1$FfiActorAttributeValue$to_color(::carla_rust::client::FfiActorAttributeValue const &self, ::carla_rust::sensor::data::FfiColor *return$) noexcept {
  ::carla_rust::sensor::data::FfiColor (::carla_rust::client::FfiActorAttributeValue::*to_color$)() const = &::carla_rust::client::FfiActorAttributeValue::to_color;
  new (return$) ::carla_rust::sensor::data::FfiColor((self.*to_color$)());
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
::std::size_t cxxbridge1$carla_rust_client_FfiActorAttributeValueList_len_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorAttributeValueList const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiActorAttributeValueList_len_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorAttributeValueList const &) = ::carla_rust_client_FfiActorAttributeValueList_len_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiActorAttributeValueList_len_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla_rust::client::FfiActorAttributeValue const *cxxbridge1$carla_rust_client_FfiActorAttributeValueList_data_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorAttributeValueList const &autocxx_gen_this) noexcept {
  ::carla_rust::client::FfiActorAttributeValue const *(*carla_rust_client_FfiActorAttributeValueList_data_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorAttributeValueList const &) = ::carla_rust_client_FfiActorAttributeValueList_data_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiActorAttributeValueList_data_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiActor_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla_rust::geom::FfiLocation *return$) noexcept {
  ::carla_rust::geom::FfiLocation (*carla_rust_client_FfiActor_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla_rust::geom::FfiLocation(carla_rust_client_FfiActor_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiActor_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla_rust::geom::FfiTransform *return$) noexcept {
  ::carla_rust::geom::FfiTransform (*carla_rust_client_FfiActor_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla_rust::geom::FfiTransform(carla_rust_client_FfiActor_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

::std::uint32_t cxxbridge1$carla_rust_client_FfiActor_GetId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this) noexcept {
  ::std::uint32_t (*carla_rust_client_FfiActor_GetId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_GetId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiActor_GetId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::string const *cxxbridge1$carla_rust_client_FfiActor_GetTypeId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this) noexcept {
  ::std::string const &(*carla_rust_client_FfiActor_GetTypeId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_GetTypeId_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_client_FfiActor_GetTypeId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::string const *cxxbridge1$carla_rust_client_FfiActor_GetDisplayId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this) noexcept {
  ::std::string const &(*carla_rust_client_FfiActor_GetDisplayId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_GetDisplayId_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_client_FfiActor_GetDisplayId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::uint32_t cxxbridge1$carla_rust_client_FfiActor_GetParentId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this) noexcept {
  ::std::uint32_t (*carla_rust_client_FfiActor_GetParentId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_GetParentId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiActor_GetParentId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::vector<::std::uint8_t> const *cxxbridge1$carla_rust_client_FfiActor_GetSemanticTags_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this) noexcept {
  ::std::vector<::std::uint8_t> const &(*carla_rust_client_FfiActor_GetSemanticTags_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_GetSemanticTags_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_client_FfiActor_GetSemanticTags_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiActor_GetParent_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_client_FfiActor_GetParent_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_GetParent_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_client_FfiActor_GetParent_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

::carla_rust::client::FfiWorld *cxxbridge1$carla_rust_client_FfiActor_GetWorld_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::carla_rust::client::FfiWorld> (*carla_rust_client_FfiActor_GetWorld_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_GetWorld_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiActor_GetWorld_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

void cxxbridge1$carla_rust_client_FfiActor_GetAttributes_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla_rust::client::FfiActorAttributeValueList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiActor_GetAttributes_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &, ::carla_rust::client::FfiActorAttributeValueList *) = ::carla_rust_client_FfiActor_GetAttributes_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActor_GetAttributes_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiActor_GetVelocity_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (*carla_rust_client_FfiActor_GetVelocity_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_GetVelocity_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector3D(carla_rust_client_FfiActor_GetVelocity_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiActor_GetAngularVelocity_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (*carla_rust_client_FfiActor_GetAngularVelocity_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_GetAngularVelocity_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector3D(carla_rust_client_FfiActor_GetAngularVelocity_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiActor_GetAcceleration_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla::geom::Vector3D *return$) noexcept {
  ::carla::geom::Vector3D (*carla_rust_client_FfiActor_GetAcceleration_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_GetAcceleration_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::geom::Vector3D(carla_rust_client_FfiActor_GetAcceleration_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiActor_SetLocation_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla_rust::geom::FfiLocation const &location) noexcept {
  void (*carla_rust_client_FfiActor_SetLocation_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &, ::carla_rust::geom::FfiLocation const &) = ::carla_rust_client_FfiActor_SetLocation_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActor_SetLocation_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, location);
}

void cxxbridge1$carla_rust_client_FfiActor_SetTransform_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla_rust::geom::FfiTransform const &transform) noexcept {
  void (*carla_rust_client_FfiActor_SetTransform_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &, ::carla_rust::geom::FfiTransform const &) = ::carla_rust_client_FfiActor_SetTransform_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActor_SetTransform_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, transform);
}

void cxxbridge1$carla_rust_client_FfiActor_SetTargetVelocity_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla::geom::Vector3D const &vector) noexcept {
  void (*carla_rust_client_FfiActor_SetTargetVelocity_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &, ::carla::geom::Vector3D const &) = ::carla_rust_client_FfiActor_SetTargetVelocity_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActor_SetTargetVelocity_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, vector);
}

void cxxbridge1$carla_rust_client_FfiActor_SetTargetAngularVelocity_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla::geom::Vector3D const &vector) noexcept {
  void (*carla_rust_client_FfiActor_SetTargetAngularVelocity_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &, ::carla::geom::Vector3D const &) = ::carla_rust_client_FfiActor_SetTargetAngularVelocity_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActor_SetTargetAngularVelocity_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, vector);
}

void cxxbridge1$carla_rust_client_FfiActor_EnableConstantVelocity_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla::geom::Vector3D const &vector) noexcept {
  void (*carla_rust_client_FfiActor_EnableConstantVelocity_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &, ::carla::geom::Vector3D const &) = ::carla_rust_client_FfiActor_EnableConstantVelocity_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActor_EnableConstantVelocity_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, vector);
}

void cxxbridge1$carla_rust_client_FfiActor_DisableConstantVelocity_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this) noexcept {
  void (*carla_rust_client_FfiActor_DisableConstantVelocity_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_DisableConstantVelocity_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActor_DisableConstantVelocity_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiActor_AddImpulse1_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla::geom::Vector3D const &vector) noexcept {
  void (*carla_rust_client_FfiActor_AddImpulse1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &, ::carla::geom::Vector3D const &) = ::carla_rust_client_FfiActor_AddImpulse1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActor_AddImpulse1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, vector);
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
void carla_rust$client$cxxbridge1$FfiActor$AddImpulse2(::carla_rust::client::FfiActor const &self, ::carla::geom::Vector3D const &impulse, ::carla::geom::Vector3D const &location) noexcept {
  void (::carla_rust::client::FfiActor::*AddImpulse2$)(::carla::geom::Vector3D const &, ::carla::geom::Vector3D const &) const = &::carla_rust::client::FfiActor::AddImpulse2;
  (self.*AddImpulse2$)(impulse, location);
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
void cxxbridge1$carla_rust_client_FfiActor_AddForce1_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla::geom::Vector3D const &force) noexcept {
  void (*carla_rust_client_FfiActor_AddForce1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &, ::carla::geom::Vector3D const &) = ::carla_rust_client_FfiActor_AddForce1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActor_AddForce1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, force);
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
void carla_rust$client$cxxbridge1$FfiActor$AddForce2(::carla_rust::client::FfiActor const &self, ::carla::geom::Vector3D const &force, ::carla::geom::Vector3D const &location) noexcept {
  void (::carla_rust::client::FfiActor::*AddForce2$)(::carla::geom::Vector3D const &, ::carla::geom::Vector3D const &) const = &::carla_rust::client::FfiActor::AddForce2;
  (self.*AddForce2$)(force, location);
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
void cxxbridge1$carla_rust_client_FfiActor_AddAngularImpulse_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla::geom::Vector3D const &vector) noexcept {
  void (*carla_rust_client_FfiActor_AddAngularImpulse_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &, ::carla::geom::Vector3D const &) = ::carla_rust_client_FfiActor_AddAngularImpulse_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActor_AddAngularImpulse_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, vector);
}

void cxxbridge1$carla_rust_client_FfiActor_AddTorque_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, ::carla::geom::Vector3D const &vector) noexcept {
  void (*carla_rust_client_FfiActor_AddTorque_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &, ::carla::geom::Vector3D const &) = ::carla_rust_client_FfiActor_AddTorque_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActor_AddTorque_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, vector);
}

void cxxbridge1$carla_rust_client_FfiActor_SetSimulatePhysics_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, bool enabled) noexcept {
  void (*carla_rust_client_FfiActor_SetSimulatePhysics_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &, bool) = ::carla_rust_client_FfiActor_SetSimulatePhysics_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActor_SetSimulatePhysics_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, enabled);
}

void cxxbridge1$carla_rust_client_FfiActor_SetEnableGravity_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this, bool enabled) noexcept {
  void (*carla_rust_client_FfiActor_SetEnableGravity_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &, bool) = ::carla_rust_client_FfiActor_SetEnableGravity_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActor_SetEnableGravity_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, enabled);
}

bool cxxbridge1$carla_rust_client_FfiActor_IsAlive_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this) noexcept {
  bool (*carla_rust_client_FfiActor_IsAlive_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_IsAlive_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiActor_IsAlive_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

bool cxxbridge1$carla_rust_client_FfiActor_IsDormant_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this) noexcept {
  bool (*carla_rust_client_FfiActor_IsDormant_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_IsDormant_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiActor_IsDormant_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

bool cxxbridge1$carla_rust_client_FfiActor_IsActive_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor const &autocxx_gen_this) noexcept {
  bool (*carla_rust_client_FfiActor_IsActive_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor const &) = ::carla_rust_client_FfiActor_IsActive_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiActor_IsActive_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
void carla_rust$client$cxxbridge1$FfiActor$to_vehicle(::carla_rust::client::FfiActor const &self, ::std::shared_ptr<::carla_rust::client::FfiVehicle> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiVehicle> (::carla_rust::client::FfiActor::*to_vehicle$)() const = &::carla_rust::client::FfiActor::to_vehicle;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiVehicle>((self.*to_vehicle$)());
}

void carla_rust$client$cxxbridge1$FfiActor$to_sensor(::carla_rust::client::FfiActor const &self, ::std::shared_ptr<::carla_rust::client::FfiSensor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiSensor> (::carla_rust::client::FfiActor::*to_sensor$)() const = &::carla_rust::client::FfiActor::to_sensor;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiSensor>((self.*to_sensor$)());
}

void carla_rust$client$cxxbridge1$FfiActor$to_traffic_sign(::carla_rust::client::FfiActor const &self, ::std::shared_ptr<::carla_rust::client::FfiTrafficSign> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiTrafficSign> (::carla_rust::client::FfiActor::*to_traffic_sign$)() const = &::carla_rust::client::FfiActor::to_traffic_sign;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiTrafficSign>((self.*to_traffic_sign$)());
}

void carla_rust$client$cxxbridge1$FfiActor$to_traffic_light(::carla_rust::client::FfiActor const &self, ::std::shared_ptr<::carla_rust::client::FfiTrafficLight> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiTrafficLight> (::carla_rust::client::FfiActor::*to_traffic_light$)() const = &::carla_rust::client::FfiActor::to_traffic_light;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiTrafficLight>((self.*to_traffic_light$)());
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
void cxxbridge1$carla_rust_client_ListenCallback_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::ListenCallback *autocxx_gen_this, ::c_void *caller, ::c_void *fn_, ::c_void *delete_fn) noexcept {
  void (*carla_rust_client_ListenCallback_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::ListenCallback *, ::c_void *, ::c_void *, ::c_void *) = ::carla_rust_client_ListenCallback_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_ListenCallback_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, caller, fn_, delete_fn);
}

void cxxbridge1$carla_rust_client_ListenCallback_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::ListenCallback *autocxx_gen_this, ::carla_rust::client::ListenCallback *arg1) noexcept {
  void (*carla_rust_client_ListenCallback_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::ListenCallback *, ::carla_rust::client::ListenCallback *) = ::carla_rust_client_ListenCallback_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_ListenCallback_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, arg1);
}

void cxxbridge1$ListenCallback_destructor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::ListenCallback *autocxx_gen_this) noexcept {
  void (*ListenCallback_destructor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::ListenCallback *) = ::ListenCallback_destructor_autocxx_wrapper_0xd539d5a17acbdd25;
  ListenCallback_destructor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::size_t cxxbridge1$carla_rust_client_FfiWaypointList_len_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypointList const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiWaypointList_len_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypointList const &) = ::carla_rust_client_FfiWaypointList_len_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWaypointList_len_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiWaypointList_get_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypointList const &autocxx_gen_this, ::std::size_t index, ::std::shared_ptr<::carla_rust::client::FfiWaypoint> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiWaypoint> (*carla_rust_client_FfiWaypointList_get_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypointList const &, ::std::size_t) = ::carla_rust_client_FfiWaypointList_get_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiWaypoint>(carla_rust_client_FfiWaypointList_get_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, index));
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
void carla_rust$client$cxxbridge1$FfiWaypointPair$first(::carla_rust::client::FfiWaypointPair const &self, ::std::shared_ptr<::carla_rust::client::FfiWaypoint> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiWaypoint> (::carla_rust::client::FfiWaypointPair::*first$)() const = &::carla_rust::client::FfiWaypointPair::first;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiWaypoint>((self.*first$)());
}

void carla_rust$client$cxxbridge1$FfiWaypointPair$second(::carla_rust::client::FfiWaypointPair const &self, ::std::shared_ptr<::carla_rust::client::FfiWaypoint> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiWaypoint> (::carla_rust::client::FfiWaypointPair::*second$)() const = &::carla_rust::client::FfiWaypointPair::second;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiWaypoint>((self.*second$)());
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
::std::int32_t cxxbridge1$carla_rust_client_FfiJunction_GetId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiJunction const &autocxx_gen_this) noexcept {
  ::std::int32_t (*carla_rust_client_FfiJunction_GetId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiJunction const &) = ::carla_rust_client_FfiJunction_GetId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiJunction_GetId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::vector<::carla_rust::client::FfiWaypointPair> *cxxbridge1$carla_rust_client_FfiJunction_GetWaypoints_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiJunction const &autocxx_gen_this, ::carla::road::Lane::LaneType *type_) noexcept {
  ::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointPair>> (*carla_rust_client_FfiJunction_GetWaypoints_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiJunction const &, ::carla::road::Lane::LaneType) = ::carla_rust_client_FfiJunction_GetWaypoints_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiJunction_GetWaypoints_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*type_)).release();
}

void cxxbridge1$carla_rust_client_FfiJunction_GetBoundingBox_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiJunction const &autocxx_gen_this, ::carla_rust::geom::FfiBoundingBox *return$) noexcept {
  ::carla_rust::geom::FfiBoundingBox (*carla_rust_client_FfiJunction_GetBoundingBox_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiJunction const &) = ::carla_rust_client_FfiJunction_GetBoundingBox_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla_rust::geom::FfiBoundingBox(carla_rust_client_FfiJunction_GetBoundingBox_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

::std::size_t cxxbridge1$carla_rust_client_FfiLandmarkList_len_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmarkList const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiLandmarkList_len_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmarkList const &) = ::carla_rust_client_FfiLandmarkList_len_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmarkList_len_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiLandmarkList_get_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmarkList const &autocxx_gen_this, ::std::size_t index, ::std::shared_ptr<::carla_rust::client::FfiLandmark> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiLandmark> (*carla_rust_client_FfiLandmarkList_get_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmarkList const &, ::std::size_t) = ::carla_rust_client_FfiLandmarkList_get_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiLandmark>(carla_rust_client_FfiLandmarkList_get_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, index));
}

::std::uint64_t cxxbridge1$carla_rust_client_FfiWaypoint_GetId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this) noexcept {
  ::std::uint64_t (*carla_rust_client_FfiWaypoint_GetId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWaypoint_GetId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::uint32_t cxxbridge1$carla_rust_client_FfiWaypoint_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this) noexcept {
  ::std::uint32_t (*carla_rust_client_FfiWaypoint_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWaypoint_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::uint32_t cxxbridge1$carla_rust_client_FfiWaypoint_GetSectionId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this) noexcept {
  ::std::uint32_t (*carla_rust_client_FfiWaypoint_GetSectionId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetSectionId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWaypoint_GetSectionId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::int32_t cxxbridge1$carla_rust_client_FfiWaypoint_GetLaneId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this) noexcept {
  ::std::int32_t (*carla_rust_client_FfiWaypoint_GetLaneId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetLaneId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWaypoint_GetLaneId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_rust_client_FfiWaypoint_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this) noexcept {
  double (*carla_rust_client_FfiWaypoint_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWaypoint_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiWaypoint_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this, ::carla_rust::geom::FfiTransform *return$) noexcept {
  ::carla_rust::geom::FfiTransform (*carla_rust_client_FfiWaypoint_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla_rust::geom::FfiTransform(carla_rust_client_FfiWaypoint_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

::std::int32_t cxxbridge1$carla_rust_client_FfiWaypoint_GetJunctionId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this) noexcept {
  ::std::int32_t (*carla_rust_client_FfiWaypoint_GetJunctionId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetJunctionId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWaypoint_GetJunctionId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

bool cxxbridge1$carla_rust_client_FfiWaypoint_IsJunction_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this) noexcept {
  bool (*carla_rust_client_FfiWaypoint_IsJunction_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_IsJunction_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWaypoint_IsJunction_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiWaypoint_GetJunction_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiJunction> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiJunction> (*carla_rust_client_FfiWaypoint_GetJunction_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetJunction_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiJunction>(carla_rust_client_FfiWaypoint_GetJunction_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

double cxxbridge1$carla_rust_client_FfiWaypoint_GetLaneWidth_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this) noexcept {
  double (*carla_rust_client_FfiWaypoint_GetLaneWidth_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetLaneWidth_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWaypoint_GetLaneWidth_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiWaypoint_GetType_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this, ::carla::road::Lane::LaneType *return$) noexcept {
  ::carla::road::Lane::LaneType (*carla_rust_client_FfiWaypoint_GetType_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetType_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::road::Lane::LaneType(carla_rust_client_FfiWaypoint_GetType_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiWaypoint_GetNext_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this, double distance, ::carla_rust::client::FfiWaypointList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiWaypoint_GetNext_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &, double, ::carla_rust::client::FfiWaypointList *) = ::carla_rust_client_FfiWaypoint_GetNext_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWaypoint_GetNext_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, distance, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiWaypoint_GetPrevious_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this, double distance, ::carla_rust::client::FfiWaypointList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiWaypoint_GetPrevious_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &, double, ::carla_rust::client::FfiWaypointList *) = ::carla_rust_client_FfiWaypoint_GetPrevious_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWaypoint_GetPrevious_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, distance, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiWaypoint_GetNextUntilLaneEnd_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this, double distance, ::carla_rust::client::FfiWaypointList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiWaypoint_GetNextUntilLaneEnd_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &, double, ::carla_rust::client::FfiWaypointList *) = ::carla_rust_client_FfiWaypoint_GetNextUntilLaneEnd_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWaypoint_GetNextUntilLaneEnd_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, distance, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiWaypoint_GetPreviousUntilLaneStart_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this, double distance, ::carla_rust::client::FfiWaypointList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiWaypoint_GetPreviousUntilLaneStart_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &, double, ::carla_rust::client::FfiWaypointList *) = ::carla_rust_client_FfiWaypoint_GetPreviousUntilLaneStart_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWaypoint_GetPreviousUntilLaneStart_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, distance, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiWaypoint_GetRight_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiWaypoint> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiWaypoint> (*carla_rust_client_FfiWaypoint_GetRight_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetRight_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiWaypoint>(carla_rust_client_FfiWaypoint_GetRight_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiWaypoint_GetLeft_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiWaypoint> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiWaypoint> (*carla_rust_client_FfiWaypoint_GetLeft_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetLeft_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiWaypoint>(carla_rust_client_FfiWaypoint_GetLeft_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

::carla_rust::road::element::FfiLaneMarking *cxxbridge1$carla_rust_client_FfiWaypoint_GetRightLaneMarking_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::carla_rust::road::element::FfiLaneMarking> (*carla_rust_client_FfiWaypoint_GetRightLaneMarking_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetRightLaneMarking_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWaypoint_GetRightLaneMarking_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::carla_rust::road::element::FfiLaneMarking *cxxbridge1$carla_rust_client_FfiWaypoint_GetLeftLaneMarking_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::carla_rust::road::element::FfiLaneMarking> (*carla_rust_client_FfiWaypoint_GetLeftLaneMarking_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetLeftLaneMarking_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWaypoint_GetLeftLaneMarking_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

void cxxbridge1$carla_rust_client_FfiWaypoint_GetLaneChange_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this, ::carla::road::element::LaneMarking::LaneChange *return$) noexcept {
  ::carla::road::element::LaneMarking::LaneChange (*carla_rust_client_FfiWaypoint_GetLaneChange_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiWaypoint_GetLaneChange_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::road::element::LaneMarking::LaneChange(carla_rust_client_FfiWaypoint_GetLaneChange_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiWaypoint_GetAllLandmarksInDistance_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this, double distance, bool stop_at_junction, ::carla_rust::client::FfiLandmarkList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiWaypoint_GetAllLandmarksInDistance_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &, double, bool, ::carla_rust::client::FfiLandmarkList *) = ::carla_rust_client_FfiWaypoint_GetAllLandmarksInDistance_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWaypoint_GetAllLandmarksInDistance_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, distance, stop_at_junction, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiWaypoint_GetLandmarksOfTypeInDistance_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint const &autocxx_gen_this, double distance, ::std::string *filter_type, bool stop_at_junction, ::carla_rust::client::FfiLandmarkList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiWaypoint_GetLandmarksOfTypeInDistance_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint const &, double, ::std::unique_ptr<::std::string>, bool, ::carla_rust::client::FfiLandmarkList *) = ::carla_rust_client_FfiWaypoint_GetLandmarksOfTypeInDistance_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWaypoint_GetLandmarksOfTypeInDistance_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, distance, ::std::unique_ptr<::std::string>(filter_type), stop_at_junction, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiLandmark_GetWaypoint_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiWaypoint> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiWaypoint> (*carla_rust_client_FfiLandmark_GetWaypoint_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetWaypoint_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiWaypoint>(carla_rust_client_FfiLandmark_GetWaypoint_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

::carla_rust::geom::FfiTransform const *cxxbridge1$carla_rust_client_FfiLandmark_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  ::carla_rust::geom::FfiTransform const &(*carla_rust_client_FfiLandmark_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_client_FfiLandmark_GetTransform_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::uint32_t cxxbridge1$carla_rust_client_FfiLandmark_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  ::std::uint32_t (*carla_rust_client_FfiLandmark_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetRoadId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_rust_client_FfiLandmark_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  double (*carla_rust_client_FfiLandmark_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetDistance_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_rust_client_FfiLandmark_GetS_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  double (*carla_rust_client_FfiLandmark_GetS_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetS_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetS_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_rust_client_FfiLandmark_GetT_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  double (*carla_rust_client_FfiLandmark_GetT_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetT_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetT_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::string *cxxbridge1$carla_rust_client_FfiLandmark_GetId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_rust_client_FfiLandmark_GetId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::std::string *cxxbridge1$carla_rust_client_FfiLandmark_GetName_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_rust_client_FfiLandmark_GetName_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetName_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetName_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

bool cxxbridge1$carla_rust_client_FfiLandmark_IsDynamic_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  bool (*carla_rust_client_FfiLandmark_IsDynamic_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_IsDynamic_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_IsDynamic_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiLandmark_GetOrientation_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this, ::carla::road::SignalOrientation *return$) noexcept {
  ::carla::road::SignalOrientation (*carla_rust_client_FfiLandmark_GetOrientation_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetOrientation_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::road::SignalOrientation(carla_rust_client_FfiLandmark_GetOrientation_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

double cxxbridge1$carla_rust_client_FfiLandmark_GetZOffset_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  double (*carla_rust_client_FfiLandmark_GetZOffset_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetZOffset_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetZOffset_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::string *cxxbridge1$carla_rust_client_FfiLandmark_GetCountry_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_rust_client_FfiLandmark_GetCountry_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetCountry_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetCountry_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::std::string *cxxbridge1$carla_rust_client_FfiLandmark_GetType_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_rust_client_FfiLandmark_GetType_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetType_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetType_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::std::string *cxxbridge1$carla_rust_client_FfiLandmark_GetSubType_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_rust_client_FfiLandmark_GetSubType_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetSubType_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetSubType_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

double cxxbridge1$carla_rust_client_FfiLandmark_GetValue_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  double (*carla_rust_client_FfiLandmark_GetValue_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetValue_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetValue_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::string *cxxbridge1$carla_rust_client_FfiLandmark_GetUnit_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_rust_client_FfiLandmark_GetUnit_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetUnit_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetUnit_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

double cxxbridge1$carla_rust_client_FfiLandmark_GetHeight_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  double (*carla_rust_client_FfiLandmark_GetHeight_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetHeight_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetHeight_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_rust_client_FfiLandmark_GetWidth_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  double (*carla_rust_client_FfiLandmark_GetWidth_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetWidth_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetWidth_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::string *cxxbridge1$carla_rust_client_FfiLandmark_GetText_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_rust_client_FfiLandmark_GetText_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetText_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetText_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

double cxxbridge1$carla_rust_client_FfiLandmark_GethOffset_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  double (*carla_rust_client_FfiLandmark_GethOffset_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GethOffset_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GethOffset_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_rust_client_FfiLandmark_GetPitch_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  double (*carla_rust_client_FfiLandmark_GetPitch_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetPitch_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetPitch_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

double cxxbridge1$carla_rust_client_FfiLandmark_GetRoll_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark const &autocxx_gen_this) noexcept {
  double (*carla_rust_client_FfiLandmark_GetRoll_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiLandmark_GetRoll_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLandmark_GetRoll_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::size_t cxxbridge1$carla_rust_client_FfiTransformList_len_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTransformList const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiTransformList_len_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTransformList const &) = ::carla_rust_client_FfiTransformList_len_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiTransformList_len_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla_rust::geom::FfiTransform const *cxxbridge1$carla_rust_client_FfiTransformList_data_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTransformList const &autocxx_gen_this) noexcept {
  ::carla_rust::geom::FfiTransform const *(*carla_rust_client_FfiTransformList_data_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTransformList const &) = ::carla_rust_client_FfiTransformList_data_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiTransformList_data_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::string const *cxxbridge1$carla_rust_client_FfiMap_GetName_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap const &autocxx_gen_this) noexcept {
  ::std::string const &(*carla_rust_client_FfiMap_GetName_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap const &) = ::carla_rust_client_FfiMap_GetName_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_client_FfiMap_GetName_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::string const *cxxbridge1$carla_rust_client_FfiMap_GetOpenDrive_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap const &autocxx_gen_this) noexcept {
  ::std::string const &(*carla_rust_client_FfiMap_GetOpenDrive_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap const &) = ::carla_rust_client_FfiMap_GetOpenDrive_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_client_FfiMap_GetOpenDrive_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiMap_GetRecommendedSpawnPoints_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap const &autocxx_gen_this, ::carla_rust::client::FfiTransformList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiMap_GetRecommendedSpawnPoints_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap const &, ::carla_rust::client::FfiTransformList *) = ::carla_rust_client_FfiMap_GetRecommendedSpawnPoints_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiMap_GetRecommendedSpawnPoints_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiMap_GetWaypoint_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap const &autocxx_gen_this, ::carla_rust::geom::FfiLocation const &location, bool project_to_road, ::std::int32_t lane_type, ::std::shared_ptr<::carla_rust::client::FfiWaypoint> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiWaypoint> (*carla_rust_client_FfiMap_GetWaypoint_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap const &, ::carla_rust::geom::FfiLocation const &, bool, ::std::int32_t) = ::carla_rust_client_FfiMap_GetWaypoint_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiWaypoint>(carla_rust_client_FfiMap_GetWaypoint_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, location, project_to_road, lane_type));
}

void cxxbridge1$carla_rust_client_FfiMap_GetWaypointXODR_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap const &autocxx_gen_this, ::std::uint32_t road_id, ::std::int32_t lane_id, float s, ::std::shared_ptr<::carla_rust::client::FfiWaypoint> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiWaypoint> (*carla_rust_client_FfiMap_GetWaypointXODR_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap const &, ::std::uint32_t, ::std::int32_t, float) = ::carla_rust_client_FfiMap_GetWaypointXODR_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiWaypoint>(carla_rust_client_FfiMap_GetWaypointXODR_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, road_id, lane_id, s));
}

::carla_rust::client::FfiWaypointList *cxxbridge1$carla_rust_client_FfiMap_GenerateWaypoints_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap const &autocxx_gen_this, double distance) noexcept {
  ::std::unique_ptr<::carla_rust::client::FfiWaypointList> (*carla_rust_client_FfiMap_GenerateWaypoints_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap const &, double) = ::carla_rust_client_FfiMap_GenerateWaypoints_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiMap_GenerateWaypoints_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, distance).release();
}

void cxxbridge1$carla_rust_client_FfiMap_GetJunction_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap const &autocxx_gen_this, ::carla_rust::client::FfiWaypoint const &waypoint, ::std::shared_ptr<::carla_rust::client::FfiJunction> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiJunction> (*carla_rust_client_FfiMap_GetJunction_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap const &, ::carla_rust::client::FfiWaypoint const &) = ::carla_rust_client_FfiMap_GetJunction_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiJunction>(carla_rust_client_FfiMap_GetJunction_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, waypoint));
}

void cxxbridge1$carla_rust_client_FfiMap_GetAllLandmarks_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap const &autocxx_gen_this, ::carla_rust::client::FfiLandmarkList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiMap_GetAllLandmarks_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap const &, ::carla_rust::client::FfiLandmarkList *) = ::carla_rust_client_FfiMap_GetAllLandmarks_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiMap_GetAllLandmarks_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiMap_GetLandmarksFromId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap const &autocxx_gen_this, ::std::string *id, ::carla_rust::client::FfiLandmarkList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiMap_GetLandmarksFromId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap const &, ::std::unique_ptr<::std::string>, ::carla_rust::client::FfiLandmarkList *) = ::carla_rust_client_FfiMap_GetLandmarksFromId_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiMap_GetLandmarksFromId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::unique_ptr<::std::string>(id), placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiMap_GetAllLandmarksOfType_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap const &autocxx_gen_this, ::std::string *type_, ::carla_rust::client::FfiLandmarkList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiMap_GetAllLandmarksOfType_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap const &, ::std::unique_ptr<::std::string>, ::carla_rust::client::FfiLandmarkList *) = ::carla_rust_client_FfiMap_GetAllLandmarksOfType_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiMap_GetAllLandmarksOfType_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::unique_ptr<::std::string>(type_), placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiMap_GetLandmarkGroup_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap const &autocxx_gen_this, ::carla_rust::client::FfiLandmark const &landmark, ::carla_rust::client::FfiLandmarkList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiMap_GetLandmarkGroup_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap const &, ::carla_rust::client::FfiLandmark const &, ::carla_rust::client::FfiLandmarkList *) = ::carla_rust_client_FfiMap_GetLandmarkGroup_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiMap_GetLandmarkGroup_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, landmark, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiMap_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap *autocxx_gen_this, ::carla_rust::client::FfiMap *from) noexcept {
  void (*carla_rust_client_FfiMap_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap *, ::carla_rust::client::FfiMap *) = ::carla_rust_client_FfiMap_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiMap_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, from);
}

::carla_rust::geom::FfiBoundingBox const *cxxbridge1$carla_rust_client_FfiTrafficSign_GetTriggerVolume_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficSign const &autocxx_gen_this) noexcept {
  ::carla_rust::geom::FfiBoundingBox const &(*carla_rust_client_FfiTrafficSign_GetTriggerVolume_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficSign const &) = ::carla_rust_client_FfiTrafficSign_GetTriggerVolume_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_client_FfiTrafficSign_GetTriggerVolume_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::string *cxxbridge1$carla_rust_client_FfiTrafficSign_GetSignId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficSign const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_rust_client_FfiTrafficSign_GetSignId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficSign const &) = ::carla_rust_client_FfiTrafficSign_GetSignId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiTrafficSign_GetSignId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
void carla_rust$client$cxxbridge1$FfiTrafficSign$to_actor(::carla_rust::client::FfiTrafficSign const &self, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (::carla_rust::client::FfiTrafficSign::*to_actor$)() const = &::carla_rust::client::FfiTrafficSign::to_actor;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>((self.*to_actor$)());
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
void cxxbridge1$carla_rust_client_FfiVehicle_SetAutopilot_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, bool enabled, ::std::uint16_t tm_port) noexcept {
  void (*carla_rust_client_FfiVehicle_SetAutopilot_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, bool, ::std::uint16_t) = ::carla_rust_client_FfiVehicle_SetAutopilot_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_SetAutopilot_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, enabled, tm_port);
}

void cxxbridge1$carla_rust_client_FfiVehicle_ShowDebugTelemetry_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, bool enabled) noexcept {
  void (*carla_rust_client_FfiVehicle_ShowDebugTelemetry_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, bool) = ::carla_rust_client_FfiVehicle_ShowDebugTelemetry_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_ShowDebugTelemetry_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, enabled);
}

void cxxbridge1$carla_rust_client_FfiVehicle_ApplyControl_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla::rpc::VehicleControl const &control) noexcept {
  void (*carla_rust_client_FfiVehicle_ApplyControl_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, ::carla::rpc::VehicleControl const &) = ::carla_rust_client_FfiVehicle_ApplyControl_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_ApplyControl_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, control);
}

void cxxbridge1$carla_rust_client_FfiVehicle_ApplyAckermannControl_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla::rpc::VehicleAckermannControl const &control) noexcept {
  void (*carla_rust_client_FfiVehicle_ApplyAckermannControl_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, ::carla::rpc::VehicleAckermannControl const &) = ::carla_rust_client_FfiVehicle_ApplyAckermannControl_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_ApplyAckermannControl_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, control);
}

void cxxbridge1$carla_rust_client_FfiVehicle_ApplyPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla_rust::rpc::FfiVehiclePhysicsControl const &physics_control) noexcept {
  void (*carla_rust_client_FfiVehicle_ApplyPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, ::carla_rust::rpc::FfiVehiclePhysicsControl const &) = ::carla_rust_client_FfiVehicle_ApplyPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_ApplyPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, physics_control);
}

void cxxbridge1$carla_rust_client_FfiVehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla::rpc::AckermannControllerSettings *return$) noexcept {
  ::carla::rpc::AckermannControllerSettings (*carla_rust_client_FfiVehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &) = ::carla_rust_client_FfiVehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::rpc::AckermannControllerSettings(carla_rust_client_FfiVehicle_GetAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiVehicle_ApplyAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla::rpc::AckermannControllerSettings const &settings) noexcept {
  void (*carla_rust_client_FfiVehicle_ApplyAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, ::carla::rpc::AckermannControllerSettings const &) = ::carla_rust_client_FfiVehicle_ApplyAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_ApplyAckermannControllerSettings_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, settings);
}

void cxxbridge1$carla_rust_client_FfiVehicle_OpenDoor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla::rpc::VehicleDoor *door_idx) noexcept {
  void (*carla_rust_client_FfiVehicle_OpenDoor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, ::carla::rpc::VehicleDoor) = ::carla_rust_client_FfiVehicle_OpenDoor_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_OpenDoor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*door_idx));
}

void cxxbridge1$carla_rust_client_FfiVehicle_CloseDoor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla::rpc::VehicleDoor *door_idx) noexcept {
  void (*carla_rust_client_FfiVehicle_CloseDoor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, ::carla::rpc::VehicleDoor) = ::carla_rust_client_FfiVehicle_CloseDoor_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_CloseDoor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*door_idx));
}

void cxxbridge1$carla_rust_client_FfiVehicle_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla::rpc::VehicleLightState::LightState const &light_state) noexcept {
  void (*carla_rust_client_FfiVehicle_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, ::carla::rpc::VehicleLightState::LightState const &) = ::carla_rust_client_FfiVehicle_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, light_state);
}

void cxxbridge1$carla_rust_client_FfiVehicle_SetWheelSteerDirection_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla::rpc::VehicleWheelLocation *wheel_location, float angle_in_deg) noexcept {
  void (*carla_rust_client_FfiVehicle_SetWheelSteerDirection_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, ::carla::rpc::VehicleWheelLocation, float) = ::carla_rust_client_FfiVehicle_SetWheelSteerDirection_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_SetWheelSteerDirection_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*wheel_location), angle_in_deg);
}

float cxxbridge1$carla_rust_client_FfiVehicle_GetWheelSteerAngle_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla::rpc::VehicleWheelLocation *wheel_location) noexcept {
  float (*carla_rust_client_FfiVehicle_GetWheelSteerAngle_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, ::carla::rpc::VehicleWheelLocation) = ::carla_rust_client_FfiVehicle_GetWheelSteerAngle_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiVehicle_GetWheelSteerAngle_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*wheel_location));
}

void cxxbridge1$carla_rust_client_FfiVehicle_GetControl_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla::rpc::VehicleControl *return$) noexcept {
  ::carla::rpc::VehicleControl (*carla_rust_client_FfiVehicle_GetControl_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &) = ::carla_rust_client_FfiVehicle_GetControl_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::rpc::VehicleControl(carla_rust_client_FfiVehicle_GetControl_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiVehicle_GetPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla_rust::rpc::FfiVehiclePhysicsControl *placement_return_type) noexcept {
  void (*carla_rust_client_FfiVehicle_GetPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, ::carla_rust::rpc::FfiVehiclePhysicsControl *) = ::carla_rust_client_FfiVehicle_GetPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_GetPhysicsControl_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiVehicle_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla::rpc::VehicleLightState::LightState *return$) noexcept {
  ::carla::rpc::VehicleLightState::LightState (*carla_rust_client_FfiVehicle_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &) = ::carla_rust_client_FfiVehicle_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::rpc::VehicleLightState::LightState(carla_rust_client_FfiVehicle_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

float cxxbridge1$carla_rust_client_FfiVehicle_GetSpeedLimit_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this) noexcept {
  float (*carla_rust_client_FfiVehicle_GetSpeedLimit_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &) = ::carla_rust_client_FfiVehicle_GetSpeedLimit_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiVehicle_GetSpeedLimit_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiVehicle_GetTrafficLightState_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::carla::rpc::TrafficLightState *return$) noexcept {
  ::carla::rpc::TrafficLightState (*carla_rust_client_FfiVehicle_GetTrafficLightState_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &) = ::carla_rust_client_FfiVehicle_GetTrafficLightState_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::rpc::TrafficLightState(carla_rust_client_FfiVehicle_GetTrafficLightState_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

bool cxxbridge1$carla_rust_client_FfiVehicle_IsAtTrafficLight_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this) noexcept {
  bool (*carla_rust_client_FfiVehicle_IsAtTrafficLight_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &) = ::carla_rust_client_FfiVehicle_IsAtTrafficLight_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiVehicle_IsAtTrafficLight_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiVehicle_EnableCarSim_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::std::string *simfile_path) noexcept {
  void (*carla_rust_client_FfiVehicle_EnableCarSim_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, ::std::unique_ptr<::std::string>) = ::carla_rust_client_FfiVehicle_EnableCarSim_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_EnableCarSim_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::unique_ptr<::std::string>(simfile_path));
}

void cxxbridge1$carla_rust_client_FfiVehicle_UseCarSimRoad_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, bool enabled) noexcept {
  void (*carla_rust_client_FfiVehicle_UseCarSimRoad_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, bool) = ::carla_rust_client_FfiVehicle_UseCarSimRoad_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_UseCarSimRoad_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, enabled);
}

void cxxbridge1$carla_rust_client_FfiVehicle_EnableChronoPhysics_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::std::uint64_t MaxSubsteps, float MaxSubstepDeltaTime, ::std::string *VehicleJSON, ::std::string *PowertrainJSON, ::std::string *TireJSON, ::std::string *BaseJSONPath) noexcept {
  void (*carla_rust_client_FfiVehicle_EnableChronoPhysics_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &, ::std::uint64_t, float, ::std::unique_ptr<::std::string>, ::std::unique_ptr<::std::string>, ::std::unique_ptr<::std::string>, ::std::unique_ptr<::std::string>) = ::carla_rust_client_FfiVehicle_EnableChronoPhysics_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiVehicle_EnableChronoPhysics_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, MaxSubsteps, MaxSubstepDeltaTime, ::std::unique_ptr<::std::string>(VehicleJSON), ::std::unique_ptr<::std::string>(PowertrainJSON), ::std::unique_ptr<::std::string>(TireJSON), ::std::unique_ptr<::std::string>(BaseJSONPath));
}

void cxxbridge1$carla_rust_client_FfiVehicle_to_actor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_client_FfiVehicle_to_actor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle const &) = ::carla_rust_client_FfiVehicle_to_actor_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_client_FfiVehicle_to_actor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiSensor_Listen_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiSensor const &autocxx_gen_this, ::c_void *caller, ::c_void *fn_, ::c_void *delete_fn) noexcept {
  void (*carla_rust_client_FfiSensor_Listen_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiSensor const &, ::c_void *, ::c_void *, ::c_void *) = ::carla_rust_client_FfiSensor_Listen_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiSensor_Listen_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, caller, fn_, delete_fn);
}

void cxxbridge1$carla_rust_client_FfiSensor_Stop_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiSensor const &autocxx_gen_this) noexcept {
  void (*carla_rust_client_FfiSensor_Stop_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiSensor const &) = ::carla_rust_client_FfiSensor_Stop_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiSensor_Stop_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

bool cxxbridge1$carla_rust_client_FfiSensor_IsListening_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiSensor const &autocxx_gen_this) noexcept {
  bool (*carla_rust_client_FfiSensor_IsListening_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiSensor const &) = ::carla_rust_client_FfiSensor_IsListening_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiSensor_IsListening_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiSensor_to_actor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiSensor const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_client_FfiSensor_to_actor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiSensor const &) = ::carla_rust_client_FfiSensor_to_actor_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_client_FfiSensor_to_actor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
void carla_rust$client$cxxbridge1$FfiBlueprintLibrary$filter(::carla_rust::client::FfiBlueprintLibrary const &self, ::std::string const &pattern, ::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary> (::carla_rust::client::FfiBlueprintLibrary::*filter$)(::std::string const &) const = &::carla_rust::client::FfiBlueprintLibrary::filter;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary>((self.*filter$)(pattern));
}

::carla::client::ActorBlueprint const *carla_rust$client$cxxbridge1$FfiBlueprintLibrary$find(::carla_rust::client::FfiBlueprintLibrary const &self, ::std::string const &key) noexcept {
  ::carla::client::ActorBlueprint const *(::carla_rust::client::FfiBlueprintLibrary::*find$)(::std::string const &) const = &::carla_rust::client::FfiBlueprintLibrary::find;
  return (self.*find$)(key);
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
::carla::client::ActorBlueprint const *cxxbridge1$carla_rust_client_FfiBlueprintLibrary_at_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiBlueprintLibrary const &autocxx_gen_this, ::std::size_t pos) noexcept {
  ::carla::client::ActorBlueprint const *(*carla_rust_client_FfiBlueprintLibrary_at_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiBlueprintLibrary const &, ::std::size_t) = ::carla_rust_client_FfiBlueprintLibrary_at_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiBlueprintLibrary_at_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, pos);
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
bool carla_rust$client$cxxbridge1$FfiBlueprintLibrary$is_empty(::carla_rust::client::FfiBlueprintLibrary const &self) noexcept {
  bool (::carla_rust::client::FfiBlueprintLibrary::*is_empty$)() const = &::carla_rust::client::FfiBlueprintLibrary::is_empty;
  return (self.*is_empty$)();
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
::std::size_t cxxbridge1$carla_rust_client_FfiBlueprintLibrary_size_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiBlueprintLibrary const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiBlueprintLibrary_size_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiBlueprintLibrary const &) = ::carla_rust_client_FfiBlueprintLibrary_size_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiBlueprintLibrary_size_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiActorList_Find_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorList const &autocxx_gen_this, ::std::uint32_t actor_id, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_client_FfiActorList_Find_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorList const &, ::std::uint32_t) = ::carla_rust_client_FfiActorList_Find_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_client_FfiActorList_Find_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor_id));
}

void cxxbridge1$carla_rust_client_FfiActorList_Filter_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorList const &autocxx_gen_this, ::std::string const &wildcard_pattern, ::std::shared_ptr<::carla_rust::client::FfiActorList> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActorList> (*carla_rust_client_FfiActorList_Filter_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorList const &, ::std::string const &) = ::carla_rust_client_FfiActorList_Filter_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActorList>(carla_rust_client_FfiActorList_Filter_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, wildcard_pattern));
}

void cxxbridge1$carla_rust_client_FfiActorList_at_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorList const &autocxx_gen_this, ::std::size_t pos, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_client_FfiActorList_at_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorList const &, ::std::size_t) = ::carla_rust_client_FfiActorList_at_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_client_FfiActorList_at_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, pos));
}

bool cxxbridge1$carla_rust_client_FfiActorList_empty_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorList const &autocxx_gen_this) noexcept {
  bool (*carla_rust_client_FfiActorList_empty_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorList const &) = ::carla_rust_client_FfiActorList_empty_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiActorList_empty_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::size_t cxxbridge1$carla_rust_client_FfiActorList_size_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorList const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiActorList_size_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorList const &) = ::carla_rust_client_FfiActorList_size_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiActorList_size_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::size_t cxxbridge1$carla_rust_client_FfiBoundingBoxList_len_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiBoundingBoxList const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiBoundingBoxList_len_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiBoundingBoxList const &) = ::carla_rust_client_FfiBoundingBoxList_len_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiBoundingBoxList_len_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla_rust::geom::FfiBoundingBox const *cxxbridge1$carla_rust_client_FfiBoundingBoxList_data_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiBoundingBoxList const &autocxx_gen_this) noexcept {
  ::carla_rust::geom::FfiBoundingBox const *(*carla_rust_client_FfiBoundingBoxList_data_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiBoundingBoxList const &) = ::carla_rust_client_FfiBoundingBoxList_data_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiBoundingBoxList_data_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiBoundingBoxList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiBoundingBoxList *autocxx_gen_this, ::std::vector<::carla::geom::BoundingBox> *vec) noexcept {
  void (*carla_rust_client_FfiBoundingBoxList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiBoundingBoxList *, ::std::vector<::carla::geom::BoundingBox> *) = ::carla_rust_client_FfiBoundingBoxList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiBoundingBoxList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, vec);
}

::std::size_t cxxbridge1$carla_rust_client_FfiLabelledPointList_len_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLabelledPointList const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiLabelledPointList_len_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLabelledPointList const &) = ::carla_rust_client_FfiLabelledPointList_len_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLabelledPointList_len_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla_rust::rpc::FfiLabelledPoint const *cxxbridge1$carla_rust_client_FfiLabelledPointList_data_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLabelledPointList const &autocxx_gen_this) noexcept {
  ::carla_rust::rpc::FfiLabelledPoint const *(*carla_rust_client_FfiLabelledPointList_data_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLabelledPointList const &) = ::carla_rust_client_FfiLabelledPointList_data_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLabelledPointList_data_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiLabelledPointList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLabelledPointList *autocxx_gen_this, ::std::vector<::carla::rpc::LabelledPoint> *vec) noexcept {
  void (*carla_rust_client_FfiLabelledPointList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLabelledPointList *, ::std::vector<::carla::rpc::LabelledPoint> *) = ::carla_rust_client_FfiLabelledPointList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLabelledPointList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, vec);
}

::std::size_t cxxbridge1$carla_rust_client_FfiEnvironmentObjectList_len_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiEnvironmentObjectList const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiEnvironmentObjectList_len_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiEnvironmentObjectList const &) = ::carla_rust_client_FfiEnvironmentObjectList_len_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiEnvironmentObjectList_len_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiEnvironmentObjectList_get_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiEnvironmentObjectList const &autocxx_gen_this, ::std::size_t index, ::carla_rust::rpc::FfiEnvironmentObjectRef *placement_return_type) noexcept {
  void (*carla_rust_client_FfiEnvironmentObjectList_get_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiEnvironmentObjectList const &, ::std::size_t, ::carla_rust::rpc::FfiEnvironmentObjectRef *) = ::carla_rust_client_FfiEnvironmentObjectList_get_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiEnvironmentObjectList_get_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, index, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiEnvironmentObjectList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiEnvironmentObjectList *autocxx_gen_this, ::std::vector<::carla::rpc::EnvironmentObject> *vec) noexcept {
  void (*carla_rust_client_FfiEnvironmentObjectList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiEnvironmentObjectList *, ::std::vector<::carla::rpc::EnvironmentObject> *) = ::carla_rust_client_FfiEnvironmentObjectList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiEnvironmentObjectList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, vec);
}

::std::size_t cxxbridge1$carla_rust_client_FfiActorVec_len_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorVec const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiActorVec_len_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorVec const &) = ::carla_rust_client_FfiActorVec_len_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiActorVec_len_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiActorVec_get_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorVec const &autocxx_gen_this, ::std::size_t index, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_client_FfiActorVec_get_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorVec const &, ::std::size_t) = ::carla_rust_client_FfiActorVec_get_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_client_FfiActorVec_get_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, index));
}

::std::uint64_t cxxbridge1$carla_rust_client_FfiWorldSnapshot_GetId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorldSnapshot const &autocxx_gen_this) noexcept {
  ::std::uint64_t (*carla_rust_client_FfiWorldSnapshot_GetId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorldSnapshot const &) = ::carla_rust_client_FfiWorldSnapshot_GetId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorldSnapshot_GetId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::size_t cxxbridge1$carla_rust_client_FfiWorldSnapshot_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorldSnapshot const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiWorldSnapshot_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorldSnapshot const &) = ::carla_rust_client_FfiWorldSnapshot_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorldSnapshot_GetFrame_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla::client::Timestamp const *cxxbridge1$carla_rust_client_FfiWorldSnapshot_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorldSnapshot const &autocxx_gen_this) noexcept {
  ::carla::client::Timestamp const &(*carla_rust_client_FfiWorldSnapshot_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorldSnapshot const &) = ::carla_rust_client_FfiWorldSnapshot_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_client_FfiWorldSnapshot_GetTimestamp_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

bool cxxbridge1$carla_rust_client_FfiWorldSnapshot_Contains_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorldSnapshot const &autocxx_gen_this, ::std::uint32_t actor_id) noexcept {
  bool (*carla_rust_client_FfiWorldSnapshot_Contains_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorldSnapshot const &, ::std::uint32_t) = ::carla_rust_client_FfiWorldSnapshot_Contains_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorldSnapshot_Contains_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor_id);
}

::std::size_t cxxbridge1$carla_rust_client_FfiWorldSnapshot_size_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorldSnapshot const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiWorldSnapshot_size_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorldSnapshot const &) = ::carla_rust_client_FfiWorldSnapshot_size_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorldSnapshot_size_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiWorldSnapshot_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorldSnapshot *autocxx_gen_this, ::carla::client::WorldSnapshot *base) noexcept {
  void (*carla_rust_client_FfiWorldSnapshot_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorldSnapshot *, ::carla::client::WorldSnapshot *) = ::carla_rust_client_FfiWorldSnapshot_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorldSnapshot_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

void cxxbridge1$carla_rust_client_FfiLightRef_GetColor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef const &autocxx_gen_this, ::carla_rust::sensor::data::FfiColor *return$) noexcept {
  ::carla_rust::sensor::data::FfiColor (*carla_rust_client_FfiLightRef_GetColor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef const &) = ::carla_rust_client_FfiLightRef_GetColor_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla_rust::sensor::data::FfiColor(carla_rust_client_FfiLightRef_GetColor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

::std::uint32_t cxxbridge1$carla_rust_client_FfiLightRef_GetId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef const &autocxx_gen_this) noexcept {
  ::std::uint32_t (*carla_rust_client_FfiLightRef_GetId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef const &) = ::carla_rust_client_FfiLightRef_GetId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLightRef_GetId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

float cxxbridge1$carla_rust_client_FfiLightRef_GetIntensity_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef const &autocxx_gen_this) noexcept {
  float (*carla_rust_client_FfiLightRef_GetIntensity_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef const &) = ::carla_rust_client_FfiLightRef_GetIntensity_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLightRef_GetIntensity_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiLightRef_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef const &autocxx_gen_this, ::carla_rust::geom::FfiLocation *return$) noexcept {
  ::carla_rust::geom::FfiLocation (*carla_rust_client_FfiLightRef_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef const &) = ::carla_rust_client_FfiLightRef_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla_rust::geom::FfiLocation(carla_rust_client_FfiLightRef_GetLocation_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiLightRef_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef const &autocxx_gen_this, ::carla_rust::rpc::FfiRpcLightGroup *return$) noexcept {
  ::carla_rust::rpc::FfiRpcLightGroup (*carla_rust_client_FfiLightRef_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef const &) = ::carla_rust_client_FfiLightRef_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla_rust::rpc::FfiRpcLightGroup(carla_rust_client_FfiLightRef_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiLightRef_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef const &autocxx_gen_this, ::carla_rust::client::FfiClientLightState *return$) noexcept {
  ::carla_rust::client::FfiClientLightState (*carla_rust_client_FfiLightRef_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef const &) = ::carla_rust_client_FfiLightRef_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla_rust::client::FfiClientLightState(carla_rust_client_FfiLightRef_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

bool cxxbridge1$carla_rust_client_FfiLightRef_IsOn_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef const &autocxx_gen_this) noexcept {
  bool (*carla_rust_client_FfiLightRef_IsOn_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef const &) = ::carla_rust_client_FfiLightRef_IsOn_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLightRef_IsOn_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

bool cxxbridge1$carla_rust_client_FfiLightRef_IsOff_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef const &autocxx_gen_this) noexcept {
  bool (*carla_rust_client_FfiLightRef_IsOff_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef const &) = ::carla_rust_client_FfiLightRef_IsOff_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLightRef_IsOff_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiLightRef_SetColor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef &autocxx_gen_this, ::carla_rust::sensor::data::FfiColor *color) noexcept {
  void (*carla_rust_client_FfiLightRef_SetColor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef &, ::carla_rust::sensor::data::FfiColor) = ::carla_rust_client_FfiLightRef_SetColor_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightRef_SetColor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*color));
}

void cxxbridge1$carla_rust_client_FfiLightRef_SetIntensity_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef &autocxx_gen_this, float intensity) noexcept {
  void (*carla_rust_client_FfiLightRef_SetIntensity_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef &, float) = ::carla_rust_client_FfiLightRef_SetIntensity_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightRef_SetIntensity_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, intensity);
}

void cxxbridge1$carla_rust_client_FfiLightRef_SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef &autocxx_gen_this, ::carla_rust::rpc::FfiRpcLightGroup *group) noexcept {
  void (*carla_rust_client_FfiLightRef_SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef &, ::carla_rust::rpc::FfiRpcLightGroup) = ::carla_rust_client_FfiLightRef_SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightRef_SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*group));
}

void cxxbridge1$carla_rust_client_FfiLightRef_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef &autocxx_gen_this, ::carla_rust::client::FfiClientLightState const &state) noexcept {
  void (*carla_rust_client_FfiLightRef_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef &, ::carla_rust::client::FfiClientLightState const &) = ::carla_rust_client_FfiLightRef_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightRef_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, state);
}

void cxxbridge1$carla_rust_client_FfiLightRef_TurnOn_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef &autocxx_gen_this) noexcept {
  void (*carla_rust_client_FfiLightRef_TurnOn_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef &) = ::carla_rust_client_FfiLightRef_TurnOn_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightRef_TurnOn_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiLightRef_TurnOff_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef &autocxx_gen_this) noexcept {
  void (*carla_rust_client_FfiLightRef_TurnOff_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef &) = ::carla_rust_client_FfiLightRef_TurnOff_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightRef_TurnOff_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiLightRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef *autocxx_gen_this, ::carla::client::Light &base) noexcept {
  void (*carla_rust_client_FfiLightRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef *, ::carla::client::Light &) = ::carla_rust_client_FfiLightRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightRef_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

::std::size_t cxxbridge1$carla_rust_client_FfiLightList_size_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightList const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiLightList_size_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightList const &) = ::carla_rust_client_FfiLightList_size_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLightList_size_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiLightList_at_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightList &autocxx_gen_this, ::std::size_t index, ::carla_rust::client::FfiLightRef *placement_return_type) noexcept {
  void (*carla_rust_client_FfiLightList_at_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightList &, ::std::size_t, ::carla_rust::client::FfiLightRef *) = ::carla_rust_client_FfiLightList_at_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightList_at_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, index, placement_return_type);
}

::std::vector<::carla::client::Light> *cxxbridge1$carla_rust_client_FfiLightList_inner_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightList &autocxx_gen_this) noexcept {
  ::std::vector<::carla::client::Light> &(*carla_rust_client_FfiLightList_inner_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightList &) = ::carla_rust_client_FfiLightList_inner_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_client_FfiLightList_inner_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiLightList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightList *autocxx_gen_this, ::std::vector<::carla::client::Light> *base) noexcept {
  void (*carla_rust_client_FfiLightList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightList *, ::std::vector<::carla::client::Light> *) = ::carla_rust_client_FfiLightList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightList_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

void cxxbridge1$carla_rust_client_FfiLightManager_GetAllLights_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::carla_rust::rpc::FfiRpcLightGroup *type_, ::carla_rust::client::FfiLightList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiLightManager_GetAllLights_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::carla_rust::rpc::FfiRpcLightGroup, ::carla_rust::client::FfiLightList *) = ::carla_rust_client_FfiLightManager_GetAllLights_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightManager_GetAllLights_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*type_), placement_return_type);
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
void carla_rust$client$cxxbridge1$FfiLightManager$TurnOnList(::carla_rust::client::FfiLightManager const &self, ::carla_rust::client::FfiLightList &lights) noexcept {
  void (::carla_rust::client::FfiLightManager::*TurnOnList$)(::carla_rust::client::FfiLightList &) const = &::carla_rust::client::FfiLightManager::TurnOnList;
  (self.*TurnOnList$)(lights);
}

void carla_rust$client$cxxbridge1$FfiLightManager$TurnOffList(::carla_rust::client::FfiLightManager const &self, ::carla_rust::client::FfiLightList &lights) noexcept {
  void (::carla_rust::client::FfiLightManager::*TurnOffList$)(::carla_rust::client::FfiLightList &) const = &::carla_rust::client::FfiLightManager::TurnOffList;
  (self.*TurnOffList$)(lights);
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
void cxxbridge1$carla_rust_client_FfiLightManager_GetTurnedOnLights_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::carla_rust::rpc::FfiRpcLightGroup *type_, ::carla_rust::client::FfiLightList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiLightManager_GetTurnedOnLights_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::carla_rust::rpc::FfiRpcLightGroup, ::carla_rust::client::FfiLightList *) = ::carla_rust_client_FfiLightManager_GetTurnedOnLights_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightManager_GetTurnedOnLights_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*type_), placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiLightManager_GetTurnedOffLights_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::carla_rust::rpc::FfiRpcLightGroup *type_, ::carla_rust::client::FfiLightList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiLightManager_GetTurnedOffLights_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::carla_rust::rpc::FfiRpcLightGroup, ::carla_rust::client::FfiLightList *) = ::carla_rust_client_FfiLightManager_GetTurnedOffLights_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightManager_GetTurnedOffLights_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*type_), placement_return_type);
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
void carla_rust$client$cxxbridge1$FfiLightManager$SetColorList1(::carla_rust::client::FfiLightManager const &self, ::carla_rust::client::FfiLightList &lights, ::carla_rust::sensor::data::FfiColor *color) noexcept {
  void (::carla_rust::client::FfiLightManager::*SetColorList1$)(::carla_rust::client::FfiLightList &, ::carla_rust::sensor::data::FfiColor) const = &::carla_rust::client::FfiLightManager::SetColorList1;
  (self.*SetColorList1$)(lights, ::std::move(*color));
}

void carla_rust$client$cxxbridge1$FfiLightManager$SetIntensityList1(::carla_rust::client::FfiLightManager const &self, ::carla_rust::client::FfiLightList &lights, float intensity) noexcept {
  void (::carla_rust::client::FfiLightManager::*SetIntensityList1$)(::carla_rust::client::FfiLightList &, float) const = &::carla_rust::client::FfiLightManager::SetIntensityList1;
  (self.*SetIntensityList1$)(lights, intensity);
}

void carla_rust$client$cxxbridge1$FfiLightManager$SetIntensityList2(::carla_rust::client::FfiLightManager const &self, ::carla_rust::client::FfiLightList &lights, ::std::vector<float> &intensities) noexcept {
  void (::carla_rust::client::FfiLightManager::*SetIntensityList2$)(::carla_rust::client::FfiLightList &, ::std::vector<float> &) const = &::carla_rust::client::FfiLightManager::SetIntensityList2;
  (self.*SetIntensityList2$)(lights, intensities);
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
::std::vector<float> *cxxbridge1$GetIntensityList_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::carla_rust::client::FfiLightList &lights) noexcept {
  ::std::unique_ptr<::std::vector<float>> (*GetIntensityList_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::carla_rust::client::FfiLightList &) = ::GetIntensityList_autocxx_wrapper_0xd539d5a17acbdd25;
  return GetIntensityList_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, lights).release();
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
void carla_rust$client$cxxbridge1$FfiLightManager$SetLightGroupList1(::carla_rust::client::FfiLightManager const &self, ::carla_rust::client::FfiLightList &lights, ::carla_rust::rpc::FfiRpcLightGroup *group) noexcept {
  void (::carla_rust::client::FfiLightManager::*SetLightGroupList1$)(::carla_rust::client::FfiLightList &, ::carla_rust::rpc::FfiRpcLightGroup) const = &::carla_rust::client::FfiLightManager::SetLightGroupList1;
  (self.*SetLightGroupList1$)(lights, ::std::move(*group));
}

void carla_rust$client$cxxbridge1$FfiLightManager$SetLightGroupList2(::carla_rust::client::FfiLightManager const &self, ::carla_rust::client::FfiLightList &lights, ::std::vector<::carla_rust::rpc::FfiRpcLightGroup> &groups) noexcept {
  void (::carla_rust::client::FfiLightManager::*SetLightGroupList2$)(::carla_rust::client::FfiLightList &, ::std::vector<::carla_rust::rpc::FfiRpcLightGroup> &) const = &::carla_rust::client::FfiLightManager::SetLightGroupList2;
  (self.*SetLightGroupList2$)(lights, groups);
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
::std::vector<::carla_rust::rpc::FfiRpcLightGroup> *cxxbridge1$GetLightGroupList_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::carla_rust::client::FfiLightList &lights) noexcept {
  ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightGroup>> (*GetLightGroupList_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::carla_rust::client::FfiLightList &) = ::GetLightGroupList_autocxx_wrapper_0xd539d5a17acbdd25;
  return GetLightGroupList_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, lights).release();
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
void carla_rust$client$cxxbridge1$FfiLightManager$SetLightStateList1(::carla_rust::client::FfiLightManager const &self, ::carla_rust::client::FfiLightList &lights, ::carla_rust::client::FfiClientLightState *state) noexcept {
  void (::carla_rust::client::FfiLightManager::*SetLightStateList1$)(::carla_rust::client::FfiLightList &, ::carla_rust::client::FfiClientLightState) const = &::carla_rust::client::FfiLightManager::SetLightStateList1;
  (self.*SetLightStateList1$)(lights, ::std::move(*state));
}

void carla_rust$client$cxxbridge1$FfiLightManager$SetLightStateList2(::carla_rust::client::FfiLightManager &self, ::carla_rust::client::FfiLightList &lights, ::std::vector<::carla_rust::client::FfiClientLightState> &states) noexcept {
  void (::carla_rust::client::FfiLightManager::*SetLightStateList2$)(::carla_rust::client::FfiLightList &, ::std::vector<::carla_rust::client::FfiClientLightState> &) = &::carla_rust::client::FfiLightManager::SetLightStateList2;
  (self.*SetLightStateList2$)(lights, states);
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
::std::vector<::carla_rust::client::FfiClientLightState> *cxxbridge1$GetLightStateList_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::carla_rust::client::FfiLightList &lights) noexcept {
  ::std::unique_ptr<::std::vector<::carla_rust::client::FfiClientLightState>> (*GetLightStateList_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::carla_rust::client::FfiLightList &) = ::GetLightStateList_autocxx_wrapper_0xd539d5a17acbdd25;
  return GetLightStateList_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, lights).release();
}

void cxxbridge1$carla_rust_client_FfiLightManager_GetColor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::std::uint32_t id, ::carla_rust::sensor::data::FfiColor *return$) noexcept {
  ::carla_rust::sensor::data::FfiColor (*carla_rust_client_FfiLightManager_GetColor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::std::uint32_t) = ::carla_rust_client_FfiLightManager_GetColor_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla_rust::sensor::data::FfiColor(carla_rust_client_FfiLightManager_GetColor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, id));
}

float cxxbridge1$carla_rust_client_FfiLightManager_GetIntensity_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::std::uint32_t id) noexcept {
  float (*carla_rust_client_FfiLightManager_GetIntensity_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::std::uint32_t) = ::carla_rust_client_FfiLightManager_GetIntensity_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLightManager_GetIntensity_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, id);
}

void cxxbridge1$carla_rust_client_FfiLightManager_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::std::uint32_t id, ::carla_rust::client::FfiClientLightState *return$) noexcept {
  ::carla_rust::client::FfiClientLightState (*carla_rust_client_FfiLightManager_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::std::uint32_t) = ::carla_rust_client_FfiLightManager_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla_rust::client::FfiClientLightState(carla_rust_client_FfiLightManager_GetLightState_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, id));
}

void cxxbridge1$carla_rust_client_FfiLightManager_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::std::uint32_t id, ::carla_rust::rpc::FfiRpcLightGroup *return$) noexcept {
  ::carla_rust::rpc::FfiRpcLightGroup (*carla_rust_client_FfiLightManager_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::std::uint32_t) = ::carla_rust_client_FfiLightManager_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla_rust::rpc::FfiRpcLightGroup(carla_rust_client_FfiLightManager_GetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, id));
}

bool cxxbridge1$carla_rust_client_FfiLightManager_IsActive_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::std::uint32_t id) noexcept {
  bool (*carla_rust_client_FfiLightManager_IsActive_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::std::uint32_t) = ::carla_rust_client_FfiLightManager_IsActive_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiLightManager_IsActive_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, id);
}

void cxxbridge1$carla_rust_client_FfiLightManager_SetActive_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::std::uint32_t id, bool active) noexcept {
  void (*carla_rust_client_FfiLightManager_SetActive_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::std::uint32_t, bool) = ::carla_rust_client_FfiLightManager_SetActive_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightManager_SetActive_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, id, active);
}

void cxxbridge1$carla_rust_client_FfiLightManager_SetColor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::std::uint32_t id, ::carla_rust::sensor::data::FfiColor *color) noexcept {
  void (*carla_rust_client_FfiLightManager_SetColor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::std::uint32_t, ::carla_rust::sensor::data::FfiColor) = ::carla_rust_client_FfiLightManager_SetColor_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightManager_SetColor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, id, ::std::move(*color));
}

void cxxbridge1$carla_rust_client_FfiLightManager_SetIntensity_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::std::uint32_t id, float intensity) noexcept {
  void (*carla_rust_client_FfiLightManager_SetIntensity_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::std::uint32_t, float) = ::carla_rust_client_FfiLightManager_SetIntensity_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightManager_SetIntensity_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, id, intensity);
}

void cxxbridge1$carla_rust_client_FfiLightManager_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::std::uint32_t id, ::carla_rust::client::FfiClientLightState const &new_state) noexcept {
  void (*carla_rust_client_FfiLightManager_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::std::uint32_t, ::carla_rust::client::FfiClientLightState const &) = ::carla_rust_client_FfiLightManager_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightManager_SetLightState_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, id, new_state);
}

void cxxbridge1$carla_rust_client_FfiLightManager_SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager const &autocxx_gen_this, ::std::uint32_t id, ::carla_rust::rpc::FfiRpcLightGroup *group) noexcept {
  void (*carla_rust_client_FfiLightManager_SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager const &, ::std::uint32_t, ::carla_rust::rpc::FfiRpcLightGroup) = ::carla_rust_client_FfiLightManager_SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightManager_SetLightGroup_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, id, ::std::move(*group));
}

::std::uint64_t cxxbridge1$carla_rust_client_FfiWorld_GetId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this) noexcept {
  ::std::uint64_t (*carla_rust_client_FfiWorld_GetId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &) = ::carla_rust_client_FfiWorld_GetId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorld_GetId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiWorld_GetMap_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiMap> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiMap> (*carla_rust_client_FfiWorld_GetMap_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &) = ::carla_rust_client_FfiWorld_GetMap_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiMap>(carla_rust_client_FfiWorld_GetMap_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiWorld_LoadLevelLayer_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::uint16_t map_layers) noexcept {
  void (*carla_rust_client_FfiWorld_LoadLevelLayer_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::std::uint16_t) = ::carla_rust_client_FfiWorld_LoadLevelLayer_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_LoadLevelLayer_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, map_layers);
}

void cxxbridge1$carla_rust_client_FfiWorld_UnloadLevelLayer_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::uint16_t map_layers) noexcept {
  void (*carla_rust_client_FfiWorld_UnloadLevelLayer_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::std::uint16_t) = ::carla_rust_client_FfiWorld_UnloadLevelLayer_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_UnloadLevelLayer_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, map_layers);
}

void cxxbridge1$carla_rust_client_FfiWorld_GetBlueprintLibrary_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary> (*carla_rust_client_FfiWorld_GetBlueprintLibrary_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &) = ::carla_rust_client_FfiWorld_GetBlueprintLibrary_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary>(carla_rust_client_FfiWorld_GetBlueprintLibrary_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiWorld_GetVehiclesLightStates_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::carla_rust::rpc::FfiVehicleLightStateList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiWorld_GetVehiclesLightStates_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::carla_rust::rpc::FfiVehicleLightStateList *) = ::carla_rust_client_FfiWorld_GetVehiclesLightStates_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_GetVehiclesLightStates_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

::carla_rust::geom::FfiLocation *cxxbridge1$carla_rust_client_FfiWorld_GetRandomLocationFromNavigation_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::carla_rust::geom::FfiLocation> (*carla_rust_client_FfiWorld_GetRandomLocationFromNavigation_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &) = ::carla_rust_client_FfiWorld_GetRandomLocationFromNavigation_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorld_GetRandomLocationFromNavigation_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

void cxxbridge1$carla_rust_client_FfiWorld_GetSpectator_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_client_FfiWorld_GetSpectator_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &) = ::carla_rust_client_FfiWorld_GetSpectator_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_client_FfiWorld_GetSpectator_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiWorld_TrySpawnActor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld &autocxx_gen_this, ::carla::client::ActorBlueprint const &blueprint, ::carla_rust::geom::FfiTransform const &transform, ::carla_rust::client::FfiActor *parent, ::carla::rpc::AttachmentType *attachment_type, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_client_FfiWorld_TrySpawnActor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld &, ::carla::client::ActorBlueprint const &, ::carla_rust::geom::FfiTransform const &, ::carla_rust::client::FfiActor *, ::carla::rpc::AttachmentType) = ::carla_rust_client_FfiWorld_TrySpawnActor_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_client_FfiWorld_TrySpawnActor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, blueprint, transform, parent, ::std::move(*attachment_type)));
}

::carla_rust::client::FfiWorldSnapshot *cxxbridge1$carla_rust_client_FfiWorld_WaitForTick_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::size_t millis) noexcept {
  ::std::unique_ptr<::carla_rust::client::FfiWorldSnapshot> (*carla_rust_client_FfiWorld_WaitForTick_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::std::size_t) = ::carla_rust_client_FfiWorld_WaitForTick_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorld_WaitForTick_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, millis).release();
}

::std::uint64_t cxxbridge1$carla_rust_client_FfiWorld_Tick_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld &autocxx_gen_this, ::std::size_t millis) noexcept {
  ::std::uint64_t (*carla_rust_client_FfiWorld_Tick_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld &, ::std::size_t) = ::carla_rust_client_FfiWorld_Tick_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorld_Tick_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, millis);
}

void cxxbridge1$carla_rust_client_FfiWorld_SetPedestriansCrossFactor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld &autocxx_gen_this, float percentage) noexcept {
  void (*carla_rust_client_FfiWorld_SetPedestriansCrossFactor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld &, float) = ::carla_rust_client_FfiWorld_SetPedestriansCrossFactor_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_SetPedestriansCrossFactor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, percentage);
}

void cxxbridge1$carla_rust_client_FfiWorld_SetPedestriansSeed_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld &autocxx_gen_this, ::c_uint *seed) noexcept {
  void (*carla_rust_client_FfiWorld_SetPedestriansSeed_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld &, ::c_uint) = ::carla_rust_client_FfiWorld_SetPedestriansSeed_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_SetPedestriansSeed_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*seed));
}

void cxxbridge1$carla_rust_client_FfiWorld_GetTrafficSign_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::carla_rust::client::FfiLandmark const &landmark, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_client_FfiWorld_GetTrafficSign_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiWorld_GetTrafficSign_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_client_FfiWorld_GetTrafficSign_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, landmark));
}

void cxxbridge1$carla_rust_client_FfiWorld_GetTrafficLight_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::carla_rust::client::FfiLandmark const &landmark, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_client_FfiWorld_GetTrafficLight_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::carla_rust::client::FfiLandmark const &) = ::carla_rust_client_FfiWorld_GetTrafficLight_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_client_FfiWorld_GetTrafficLight_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, landmark));
}

void cxxbridge1$carla_rust_client_FfiWorld_GetTrafficLightFromOpenDRIVE_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::string const &sign_id, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_client_FfiWorld_GetTrafficLightFromOpenDRIVE_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::std::string const &) = ::carla_rust_client_FfiWorld_GetTrafficLightFromOpenDRIVE_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_client_FfiWorld_GetTrafficLightFromOpenDRIVE_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, sign_id));
}

void cxxbridge1$carla_rust_client_FfiWorld_ResetAllTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld &autocxx_gen_this) noexcept {
  void (*carla_rust_client_FfiWorld_ResetAllTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld &) = ::carla_rust_client_FfiWorld_ResetAllTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_ResetAllTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiWorld_GetLightManager_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiLightManager> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiLightManager> (*carla_rust_client_FfiWorld_GetLightManager_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &) = ::carla_rust_client_FfiWorld_GetLightManager_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiLightManager>(carla_rust_client_FfiWorld_GetLightManager_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiWorld_FreezeAllTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld &autocxx_gen_this, bool frozen) noexcept {
  void (*carla_rust_client_FfiWorld_FreezeAllTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld &, bool) = ::carla_rust_client_FfiWorld_FreezeAllTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_FreezeAllTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, frozen);
}

::carla_rust::client::FfiBoundingBoxList *cxxbridge1$carla_rust_client_FfiWorld_GetLevelBBs_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::uint8_t queried_tag) noexcept {
  ::std::unique_ptr<::carla_rust::client::FfiBoundingBoxList> (*carla_rust_client_FfiWorld_GetLevelBBs_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::std::uint8_t) = ::carla_rust_client_FfiWorld_GetLevelBBs_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorld_GetLevelBBs_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, queried_tag).release();
}

void cxxbridge1$carla_rust_client_FfiWorld_GetTrafficLightsFromWaypoint_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::carla_rust::client::FfiWaypoint const &waypoint, double distance, ::carla_rust::client::FfiActorVec *placement_return_type) noexcept {
  void (*carla_rust_client_FfiWorld_GetTrafficLightsFromWaypoint_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::carla_rust::client::FfiWaypoint const &, double, ::carla_rust::client::FfiActorVec *) = ::carla_rust_client_FfiWorld_GetTrafficLightsFromWaypoint_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_GetTrafficLightsFromWaypoint_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, waypoint, distance, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiWorld_GetTrafficLightsInJunction_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::int32_t junc_id, ::carla_rust::client::FfiActorVec *placement_return_type) noexcept {
  void (*carla_rust_client_FfiWorld_GetTrafficLightsInJunction_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::std::int32_t, ::carla_rust::client::FfiActorVec *) = ::carla_rust_client_FfiWorld_GetTrafficLightsInJunction_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_GetTrafficLightsInJunction_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, junc_id, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiWorld_GetSettings_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::carla_rust::rpc::FfiEpisodeSettings *placement_return_type) noexcept {
  void (*carla_rust_client_FfiWorld_GetSettings_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::carla_rust::rpc::FfiEpisodeSettings *) = ::carla_rust_client_FfiWorld_GetSettings_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_GetSettings_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

::std::uint64_t cxxbridge1$carla_rust_client_FfiWorld_ApplySettings_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld &autocxx_gen_this, ::carla_rust::rpc::FfiEpisodeSettings const &settings, ::std::size_t timeout_millis) noexcept {
  ::std::uint64_t (*carla_rust_client_FfiWorld_ApplySettings_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld &, ::carla_rust::rpc::FfiEpisodeSettings const &, ::std::size_t) = ::carla_rust_client_FfiWorld_ApplySettings_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorld_ApplySettings_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, settings, timeout_millis);
}

::carla_rust::client::FfiWorldSnapshot *cxxbridge1$carla_rust_client_FfiWorld_GetSnapshot_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::carla_rust::client::FfiWorldSnapshot> (*carla_rust_client_FfiWorld_GetSnapshot_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &) = ::carla_rust_client_FfiWorld_GetSnapshot_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorld_GetSnapshot_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::std::vector<::std::string> *cxxbridge1$carla_rust_client_FfiWorld_GetNamesOfAllObjects_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::vector<::std::string>> (*carla_rust_client_FfiWorld_GetNamesOfAllObjects_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &) = ::carla_rust_client_FfiWorld_GetNamesOfAllObjects_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorld_GetNamesOfAllObjects_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

void cxxbridge1$carla_rust_client_FfiWorld_GetActor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::uint32_t id, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_client_FfiWorld_GetActor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::std::uint32_t) = ::carla_rust_client_FfiWorld_GetActor_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_client_FfiWorld_GetActor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, id));
}

void cxxbridge1$carla_rust_client_FfiWorld_GetActors_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiActorList> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActorList> (*carla_rust_client_FfiWorld_GetActors_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &) = ::carla_rust_client_FfiWorld_GetActors_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActorList>(carla_rust_client_FfiWorld_GetActors_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}
} // extern "C"

namespace carla_rust {
namespace client {
extern "C" {
void carla_rust$client$cxxbridge1$FfiWorld$GetActorsByIds(::carla_rust::client::FfiWorld const &self, ::std::vector<::std::uint32_t> const &actor_ids, ::std::shared_ptr<::carla_rust::client::FfiActorList> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActorList> (::carla_rust::client::FfiWorld::*GetActorsByIds$)(::std::vector<::std::uint32_t> const &) const = &::carla_rust::client::FfiWorld::GetActorsByIds;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActorList>((self.*GetActorsByIds$)(actor_ids));
}
} // extern "C"
} // namespace client
} // namespace carla_rust

extern "C" {
void cxxbridge1$carla_rust_client_FfiWorld_GetWeather_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::carla::rpc::WeatherParameters *return$) noexcept {
  ::carla::rpc::WeatherParameters (*carla_rust_client_FfiWorld_GetWeather_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &) = ::carla_rust_client_FfiWorld_GetWeather_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::rpc::WeatherParameters(carla_rust_client_FfiWorld_GetWeather_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiWorld_SetWeather_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld &autocxx_gen_this, ::carla::rpc::WeatherParameters const &weather) noexcept {
  void (*carla_rust_client_FfiWorld_SetWeather_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld &, ::carla::rpc::WeatherParameters const &) = ::carla_rust_client_FfiWorld_SetWeather_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_SetWeather_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, weather);
}

void cxxbridge1$carla_rust_client_FfiWorld_GetEnvironmentObjects_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::uint8_t queried_tag, ::carla_rust::client::FfiEnvironmentObjectList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiWorld_GetEnvironmentObjects_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::std::uint8_t, ::carla_rust::client::FfiEnvironmentObjectList *) = ::carla_rust_client_FfiWorld_GetEnvironmentObjects_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_GetEnvironmentObjects_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, queried_tag, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiWorld_EnableEnvironmentObjects_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::std::uint64_t const *ids_ptr, ::std::size_t ids_len, bool enable) noexcept {
  void (*carla_rust_client_FfiWorld_EnableEnvironmentObjects_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::std::uint64_t const *, ::std::size_t, bool) = ::carla_rust_client_FfiWorld_EnableEnvironmentObjects_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_EnableEnvironmentObjects_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ids_ptr, ids_len, enable);
}

::carla_rust::rpc::FfiLabelledPoint *cxxbridge1$carla_rust_client_FfiWorld_ProjectPoint_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::carla_rust::geom::FfiLocation *location, ::carla::geom::Vector3D *direction, float search_distance) noexcept {
  ::std::unique_ptr<::carla_rust::rpc::FfiLabelledPoint> (*carla_rust_client_FfiWorld_ProjectPoint_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::carla_rust::geom::FfiLocation, ::carla::geom::Vector3D, float) = ::carla_rust_client_FfiWorld_ProjectPoint_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorld_ProjectPoint_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*location), ::std::move(*direction), search_distance).release();
}

::carla_rust::rpc::FfiLabelledPoint *cxxbridge1$carla_rust_client_FfiWorld_GroundProjection_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::carla_rust::geom::FfiLocation *location, float search_distance) noexcept {
  ::std::unique_ptr<::carla_rust::rpc::FfiLabelledPoint> (*carla_rust_client_FfiWorld_GroundProjection_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::carla_rust::geom::FfiLocation, float) = ::carla_rust_client_FfiWorld_GroundProjection_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiWorld_GroundProjection_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*location), search_distance).release();
}

void cxxbridge1$carla_rust_client_FfiWorld_CastRay_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::carla_rust::geom::FfiLocation *start_location, ::carla_rust::geom::FfiLocation *end_location, ::carla_rust::client::FfiLabelledPointList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiWorld_CastRay_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::carla_rust::geom::FfiLocation, ::carla_rust::geom::FfiLocation, ::carla_rust::client::FfiLabelledPointList *) = ::carla_rust_client_FfiWorld_CastRay_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_CastRay_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*start_location), ::std::move(*end_location), placement_return_type);
}

void cxxbridge1$clone_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld const &autocxx_gen_this, ::carla_rust::client::FfiWorld *placement_return_type) noexcept {
  void (*clone_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld const &, ::carla_rust::client::FfiWorld *) = ::clone_autocxx_wrapper_0xd539d5a17acbdd25;
  clone_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiWorld_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld *autocxx_gen_this, ::carla::client::World *base) noexcept {
  void (*carla_rust_client_FfiWorld_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld *, ::carla::client::World *) = ::carla_rust_client_FfiWorld_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

void cxxbridge1$carla_rust_client_FfiWorld_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld *autocxx_gen_this, ::carla_rust::client::FfiWorld const &arg1) noexcept {
  void (*carla_rust_client_FfiWorld_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld *, ::carla_rust::client::FfiWorld const &) = ::carla_rust_client_FfiWorld_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, arg1);
}

void cxxbridge1$carla_rust_client_FfiWorld_new2_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld *autocxx_gen_this, ::carla_rust::client::FfiWorld *arg1) noexcept {
  void (*carla_rust_client_FfiWorld_new2_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld *, ::carla_rust::client::FfiWorld *) = ::carla_rust_client_FfiWorld_new2_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorld_new2_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, arg1);
}

::std::size_t cxxbridge1$carla_rust_client_FfiClient_GetTimeout_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiClient_GetTimeout_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient &) = ::carla_rust_client_FfiClient_GetTimeout_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiClient_GetTimeout_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiClient_SetTimeout_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient &autocxx_gen_this, ::std::size_t millis) noexcept {
  void (*carla_rust_client_FfiClient_SetTimeout_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient &, ::std::size_t) = ::carla_rust_client_FfiClient_SetTimeout_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiClient_SetTimeout_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, millis);
}

::std::string *cxxbridge1$carla_rust_client_FfiClient_GetClientVersion_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_rust_client_FfiClient_GetClientVersion_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient const &) = ::carla_rust_client_FfiClient_GetClientVersion_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiClient_GetClientVersion_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::std::string *cxxbridge1$carla_rust_client_FfiClient_GetServerVersion_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_rust_client_FfiClient_GetServerVersion_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient const &) = ::carla_rust_client_FfiClient_GetServerVersion_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiClient_GetServerVersion_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

::std::vector<::std::string> *cxxbridge1$carla_rust_client_FfiClient_GetAvailableMaps_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::vector<::std::string>> (*carla_rust_client_FfiClient_GetAvailableMaps_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient const &) = ::carla_rust_client_FfiClient_GetAvailableMaps_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiClient_GetAvailableMaps_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

void cxxbridge1$carla_rust_client_FfiClient_ReloadWorld_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient const &autocxx_gen_this, bool reset_settings, ::carla_rust::client::FfiWorld *placement_return_type) noexcept {
  void (*carla_rust_client_FfiClient_ReloadWorld_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient const &, bool, ::carla_rust::client::FfiWorld *) = ::carla_rust_client_FfiClient_ReloadWorld_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiClient_ReloadWorld_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, reset_settings, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiClient_LoadWorld_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient const &autocxx_gen_this, ::std::string *map_name, bool reset_settings, ::carla_rust::client::FfiWorld *placement_return_type) noexcept {
  void (*carla_rust_client_FfiClient_LoadWorld_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient const &, ::std::unique_ptr<::std::string>, bool, ::carla_rust::client::FfiWorld *) = ::carla_rust_client_FfiClient_LoadWorld_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiClient_LoadWorld_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::unique_ptr<::std::string>(map_name), reset_settings, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiClient_GenerateOpenDriveWorld_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient const &autocxx_gen_this, ::std::string *opendrive, ::carla::rpc::OpendriveGenerationParameters const &params, bool reset_settings, ::carla_rust::client::FfiWorld *placement_return_type) noexcept {
  void (*carla_rust_client_FfiClient_GenerateOpenDriveWorld_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient const &, ::std::unique_ptr<::std::string>, ::carla::rpc::OpendriveGenerationParameters const &, bool, ::carla_rust::client::FfiWorld *) = ::carla_rust_client_FfiClient_GenerateOpenDriveWorld_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiClient_GenerateOpenDriveWorld_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::unique_ptr<::std::string>(opendrive), params, reset_settings, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiClient_GetWorld_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient const &autocxx_gen_this, ::carla_rust::client::FfiWorld *placement_return_type) noexcept {
  void (*carla_rust_client_FfiClient_GetWorld_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient const &, ::carla_rust::client::FfiWorld *) = ::carla_rust_client_FfiClient_GetWorld_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiClient_GetWorld_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiClient_GetInstanceTM_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient const &autocxx_gen_this, ::std::uint16_t port, ::carla_rust::traffic_manager::FfiTrafficManager *placement_return_type) noexcept {
  void (*carla_rust_client_FfiClient_GetInstanceTM_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient const &, ::std::uint16_t, ::carla_rust::traffic_manager::FfiTrafficManager *) = ::carla_rust_client_FfiClient_GetInstanceTM_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiClient_GetInstanceTM_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, port, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiClient_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient *autocxx_gen_this, ::std::string const &host, ::std::uint16_t port, ::std::size_t worker_threads) noexcept {
  void (*carla_rust_client_FfiClient_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient *, ::std::string const &, ::std::uint16_t, ::std::size_t) = ::carla_rust_client_FfiClient_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiClient_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, host, port, worker_threads);
}

void cxxbridge1$copy_actor_blueprint_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorBlueprint const &ref_, ::carla::client::ActorBlueprint *placement_return_type) noexcept {
  void (*copy_actor_blueprint_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorBlueprint const &, ::carla::client::ActorBlueprint *) = ::copy_actor_blueprint_autocxx_wrapper_0xd539d5a17acbdd25;
  copy_actor_blueprint_autocxx_wrapper_0xd539d5a17acbdd25$(ref_, placement_return_type);
}

::std::size_t cxxbridge1$carla_rust_client_FfiTrafficLightList_len_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLightList const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_client_FfiTrafficLightList_len_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLightList const &) = ::carla_rust_client_FfiTrafficLightList_len_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiTrafficLightList_len_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiTrafficLightList_get_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLightList const &autocxx_gen_this, ::std::size_t index, ::std::shared_ptr<::carla_rust::client::FfiTrafficLight> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiTrafficLight> (*carla_rust_client_FfiTrafficLightList_get_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLightList const &, ::std::size_t) = ::carla_rust_client_FfiTrafficLightList_get_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiTrafficLight>(carla_rust_client_FfiTrafficLightList_get_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, index));
}

::carla_rust::geom::FfiBoundingBox const *cxxbridge1$carla_rust_client_FfiTrafficLight_GetTriggerVolume_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this) noexcept {
  ::carla_rust::geom::FfiBoundingBox const &(*carla_rust_client_FfiTrafficLight_GetTriggerVolume_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &) = ::carla_rust_client_FfiTrafficLight_GetTriggerVolume_autocxx_wrapper_0xd539d5a17acbdd25;
  return &carla_rust_client_FfiTrafficLight_GetTriggerVolume_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::string *cxxbridge1$carla_rust_client_FfiTrafficLight_GetSignId_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_rust_client_FfiTrafficLight_GetSignId_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &) = ::carla_rust_client_FfiTrafficLight_GetSignId_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiTrafficLight_GetSignId_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

void cxxbridge1$carla_rust_client_FfiTrafficLight_SetState_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this, ::carla::rpc::TrafficLightState *state) noexcept {
  void (*carla_rust_client_FfiTrafficLight_SetState_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &, ::carla::rpc::TrafficLightState) = ::carla_rust_client_FfiTrafficLight_SetState_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiTrafficLight_SetState_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, ::std::move(*state));
}

void cxxbridge1$carla_rust_client_FfiTrafficLight_GetState_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this, ::carla::rpc::TrafficLightState *return$) noexcept {
  ::carla::rpc::TrafficLightState (*carla_rust_client_FfiTrafficLight_GetState_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &) = ::carla_rust_client_FfiTrafficLight_GetState_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::rpc::TrafficLightState(carla_rust_client_FfiTrafficLight_GetState_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

void cxxbridge1$carla_rust_client_FfiTrafficLight_SetGreenTime_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this, float green_time) noexcept {
  void (*carla_rust_client_FfiTrafficLight_SetGreenTime_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &, float) = ::carla_rust_client_FfiTrafficLight_SetGreenTime_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiTrafficLight_SetGreenTime_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, green_time);
}

float cxxbridge1$carla_rust_client_FfiTrafficLight_GetGreenTime_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this) noexcept {
  float (*carla_rust_client_FfiTrafficLight_GetGreenTime_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &) = ::carla_rust_client_FfiTrafficLight_GetGreenTime_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiTrafficLight_GetGreenTime_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiTrafficLight_SetYellowTime_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this, float yellow_time) noexcept {
  void (*carla_rust_client_FfiTrafficLight_SetYellowTime_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &, float) = ::carla_rust_client_FfiTrafficLight_SetYellowTime_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiTrafficLight_SetYellowTime_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, yellow_time);
}

float cxxbridge1$carla_rust_client_FfiTrafficLight_GetYellowTime_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this) noexcept {
  float (*carla_rust_client_FfiTrafficLight_GetYellowTime_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &) = ::carla_rust_client_FfiTrafficLight_GetYellowTime_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiTrafficLight_GetYellowTime_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiTrafficLight_SetRedTime_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this, float red_time) noexcept {
  void (*carla_rust_client_FfiTrafficLight_SetRedTime_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &, float) = ::carla_rust_client_FfiTrafficLight_SetRedTime_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiTrafficLight_SetRedTime_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, red_time);
}

float cxxbridge1$carla_rust_client_FfiTrafficLight_GetRedTime_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this) noexcept {
  float (*carla_rust_client_FfiTrafficLight_GetRedTime_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &) = ::carla_rust_client_FfiTrafficLight_GetRedTime_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiTrafficLight_GetRedTime_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

float cxxbridge1$carla_rust_client_FfiTrafficLight_GetElapsedTime_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this) noexcept {
  float (*carla_rust_client_FfiTrafficLight_GetElapsedTime_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &) = ::carla_rust_client_FfiTrafficLight_GetElapsedTime_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiTrafficLight_GetElapsedTime_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiTrafficLight_Freeze_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this, bool freeze) noexcept {
  void (*carla_rust_client_FfiTrafficLight_Freeze_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &, bool) = ::carla_rust_client_FfiTrafficLight_Freeze_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiTrafficLight_Freeze_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, freeze);
}

bool cxxbridge1$carla_rust_client_FfiTrafficLight_IsFrozen_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this) noexcept {
  bool (*carla_rust_client_FfiTrafficLight_IsFrozen_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &) = ::carla_rust_client_FfiTrafficLight_IsFrozen_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiTrafficLight_IsFrozen_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::std::uint32_t cxxbridge1$carla_rust_client_FfiTrafficLight_GetPoleIndex_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this) noexcept {
  ::std::uint32_t (*carla_rust_client_FfiTrafficLight_GetPoleIndex_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &) = ::carla_rust_client_FfiTrafficLight_GetPoleIndex_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiTrafficLight_GetPoleIndex_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiTrafficLight_GetGroupTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this, ::carla_rust::client::FfiTrafficLightList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiTrafficLight_GetGroupTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &, ::carla_rust::client::FfiTrafficLightList *) = ::carla_rust_client_FfiTrafficLight_GetGroupTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiTrafficLight_GetGroupTrafficLights_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiTrafficLight_ResetGroup_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this) noexcept {
  void (*carla_rust_client_FfiTrafficLight_ResetGroup_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &) = ::carla_rust_client_FfiTrafficLight_ResetGroup_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiTrafficLight_ResetGroup_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiTrafficLight_GetAffectedLaneWaypoints_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this, ::carla_rust::client::FfiWaypointList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiTrafficLight_GetAffectedLaneWaypoints_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &, ::carla_rust::client::FfiWaypointList *) = ::carla_rust_client_FfiTrafficLight_GetAffectedLaneWaypoints_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiTrafficLight_GetAffectedLaneWaypoints_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiTrafficLight_GetLightBoxes_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this, ::carla_rust::client::FfiBoundingBoxList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiTrafficLight_GetLightBoxes_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &, ::carla_rust::client::FfiBoundingBoxList *) = ::carla_rust_client_FfiTrafficLight_GetLightBoxes_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiTrafficLight_GetLightBoxes_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

::std::string *cxxbridge1$carla_rust_client_FfiTrafficLight_GetOpenDRIVEID_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this) noexcept {
  ::std::unique_ptr<::std::string> (*carla_rust_client_FfiTrafficLight_GetOpenDRIVEID_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &) = ::carla_rust_client_FfiTrafficLight_GetOpenDRIVEID_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_client_FfiTrafficLight_GetOpenDRIVEID_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this).release();
}

void cxxbridge1$carla_rust_client_FfiTrafficLight_GetStopWaypoints_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this, ::carla_rust::client::FfiWaypointList *placement_return_type) noexcept {
  void (*carla_rust_client_FfiTrafficLight_GetStopWaypoints_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &, ::carla_rust::client::FfiWaypointList *) = ::carla_rust_client_FfiTrafficLight_GetStopWaypoints_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiTrafficLight_GetStopWaypoints_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

void cxxbridge1$carla_rust_client_FfiTrafficLight_to_actor_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight const &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiActor> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiActor> (*carla_rust_client_FfiTrafficLight_to_actor_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight const &) = ::carla_rust_client_FfiTrafficLight_to_actor_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiActor>(carla_rust_client_FfiTrafficLight_to_actor_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}

::std::vector<::std::uint8_t> *cxxbridge1$new_uint8_t_vector_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::std::unique_ptr<::std::vector<::std::uint8_t>> (*new_uint8_t_vector_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::new_uint8_t_vector_autocxx_wrapper_0xd539d5a17acbdd25;
  return new_uint8_t_vector_autocxx_wrapper_0xd539d5a17acbdd25$().release();
}

::std::vector<::std::uint32_t> *cxxbridge1$new_uint32_t_vector_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::std::unique_ptr<::std::vector<::std::uint32_t>> (*new_uint32_t_vector_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::new_uint32_t_vector_autocxx_wrapper_0xd539d5a17acbdd25;
  return new_uint32_t_vector_autocxx_wrapper_0xd539d5a17acbdd25$().release();
}

::std::vector<::std::uint64_t> *cxxbridge1$new_uint64_t_vector_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::std::unique_ptr<::std::vector<::std::uint64_t>> (*new_uint64_t_vector_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::new_uint64_t_vector_autocxx_wrapper_0xd539d5a17acbdd25;
  return new_uint64_t_vector_autocxx_wrapper_0xd539d5a17acbdd25$().release();
}

::std::vector<::carla::geom::Vector2D> *cxxbridge1$new_vector_2d_vector_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::std::unique_ptr<::std::vector<::carla::geom::Vector2D>> (*new_vector_2d_vector_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::new_vector_2d_vector_autocxx_wrapper_0xd539d5a17acbdd25;
  return new_vector_2d_vector_autocxx_wrapper_0xd539d5a17acbdd25$().release();
}

::std::vector<::carla_rust::geom::FfiLocation> *cxxbridge1$new_ffi_location_vector_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::std::unique_ptr<::std::vector<::carla_rust::geom::FfiLocation>> (*new_ffi_location_vector_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::new_ffi_location_vector_autocxx_wrapper_0xd539d5a17acbdd25;
  return new_ffi_location_vector_autocxx_wrapper_0xd539d5a17acbdd25$().release();
}

::std::vector<::carla::rpc::GearPhysicsControl> *cxxbridge1$new_gear_physics_control_vector_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::std::unique_ptr<::std::vector<::carla::rpc::GearPhysicsControl>> (*new_gear_physics_control_vector_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::new_gear_physics_control_vector_autocxx_wrapper_0xd539d5a17acbdd25;
  return new_gear_physics_control_vector_autocxx_wrapper_0xd539d5a17acbdd25$().release();
}

::std::vector<::carla::rpc::WheelPhysicsControl> *cxxbridge1$new_wheel_physics_control_vector_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::std::unique_ptr<::std::vector<::carla::rpc::WheelPhysicsControl>> (*new_wheel_physics_control_vector_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::new_wheel_physics_control_vector_autocxx_wrapper_0xd539d5a17acbdd25;
  return new_wheel_physics_control_vector_autocxx_wrapper_0xd539d5a17acbdd25$().release();
}

::carla_rust::road::element::FfiLaneMarking *cxxbridge1$FfiLaneMarking_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::road::element::FfiLaneMarking *(*FfiLaneMarking_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiLaneMarking_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiLaneMarking_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiLaneMarking_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::road::element::FfiLaneMarking *arg0) noexcept {
  void (*FfiLaneMarking_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::road::element::FfiLaneMarking *) = ::FfiLaneMarking_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLaneMarking_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_rust_road_element_FfiLaneMarking_type_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::road::element::FfiLaneMarking const &autocxx_gen_this, ::carla::road::element::LaneMarking::Type *return$) noexcept {
  ::carla::road::element::LaneMarking::Type (*carla_rust_road_element_FfiLaneMarking_type_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::road::element::FfiLaneMarking const &) = ::carla_rust_road_element_FfiLaneMarking_type_autocxx_wrapper_0xd539d5a17acbdd25;
  new (return$) ::carla::road::element::LaneMarking::Type(carla_rust_road_element_FfiLaneMarking_type_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this));
}
} // extern "C"

namespace carla_rust {
namespace road {
namespace element {
extern "C" {
void carla_rust$road$element$cxxbridge1$FfiLaneMarking$color(::carla_rust::road::element::FfiLaneMarking const &self, ::carla::road::element::LaneMarking::Color *return$) noexcept {
  ::carla::road::element::LaneMarking::Color (::carla_rust::road::element::FfiLaneMarking::*color$)() const = &::carla_rust::road::element::FfiLaneMarking::color;
  new (return$) ::carla::road::element::LaneMarking::Color((self.*color$)());
}

void carla_rust$road$element$cxxbridge1$FfiLaneMarking$lane_change(::carla_rust::road::element::FfiLaneMarking const &self, ::carla::road::element::LaneMarking::LaneChange *return$) noexcept {
  ::carla::road::element::LaneMarking::LaneChange (::carla_rust::road::element::FfiLaneMarking::*lane_change$)() const = &::carla_rust::road::element::FfiLaneMarking::lane_change;
  new (return$) ::carla::road::element::LaneMarking::LaneChange((self.*lane_change$)());
}
} // extern "C"
} // namespace element
} // namespace road
} // namespace carla_rust

extern "C" {
double cxxbridge1$carla_rust_road_element_FfiLaneMarking_width_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::road::element::FfiLaneMarking const &autocxx_gen_this) noexcept {
  double (*carla_rust_road_element_FfiLaneMarking_width_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::road::element::FfiLaneMarking const &) = ::carla_rust_road_element_FfiLaneMarking_width_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_road_element_FfiLaneMarking_width_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_road_element_FfiLaneMarking_clone_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::road::element::FfiLaneMarking const &autocxx_gen_this, ::carla_rust::road::element::FfiLaneMarking *placement_return_type) noexcept {
  void (*carla_rust_road_element_FfiLaneMarking_clone_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::road::element::FfiLaneMarking const &, ::carla_rust::road::element::FfiLaneMarking *) = ::carla_rust_road_element_FfiLaneMarking_clone_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_road_element_FfiLaneMarking_clone_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, placement_return_type);
}

void cxxbridge1$carla_rust_road_element_FfiLaneMarking_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::road::element::FfiLaneMarking *autocxx_gen_this, ::carla::road::element::LaneMarking *base) noexcept {
  void (*carla_rust_road_element_FfiLaneMarking_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::road::element::FfiLaneMarking *, ::carla::road::element::LaneMarking *) = ::carla_rust_road_element_FfiLaneMarking_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_road_element_FfiLaneMarking_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

void cxxbridge1$carla_rust_road_element_FfiLaneMarking_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::road::element::FfiLaneMarking *autocxx_gen_this, ::carla::road::element::LaneMarking &base) noexcept {
  void (*carla_rust_road_element_FfiLaneMarking_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::road::element::FfiLaneMarking *, ::carla::road::element::LaneMarking &) = ::carla_rust_road_element_FfiLaneMarking_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_road_element_FfiLaneMarking_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

::carla_rust::traffic_manager::FfiAction *cxxbridge1$FfiAction_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::traffic_manager::FfiAction *(*FfiAction_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiAction_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiAction_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiAction_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiAction *arg0) noexcept {
  void (*FfiAction_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiAction *) = ::FfiAction_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiAction_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::traffic_manager::FfiActionBuffer *cxxbridge1$FfiActionBuffer_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::traffic_manager::FfiActionBuffer *(*FfiActionBuffer_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiActionBuffer_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiActionBuffer_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiActionBuffer_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiActionBuffer *arg0) noexcept {
  void (*FfiActionBuffer_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiActionBuffer *) = ::FfiActionBuffer_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiActionBuffer_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla_rust::traffic_manager::FfiTrafficManager *cxxbridge1$FfiTrafficManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla_rust::traffic_manager::FfiTrafficManager *(*FfiTrafficManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::FfiTrafficManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return FfiTrafficManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$FfiTrafficManager_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager *arg0) noexcept {
  void (*FfiTrafficManager_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager *) = ::FfiTrafficManager_free_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiTrafficManager_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}
} // extern "C"

namespace carla_rust {
namespace traffic_manager {
extern "C" {
void carla_rust$traffic_manager$cxxbridge1$FfiAction$road_option(::carla_rust::traffic_manager::FfiAction const &self, ::carla::traffic_manager::RoadOption *return$) noexcept {
  ::carla::traffic_manager::RoadOption (::carla_rust::traffic_manager::FfiAction::*road_option$)() const = &::carla_rust::traffic_manager::FfiAction::road_option;
  new (return$) ::carla::traffic_manager::RoadOption((self.*road_option$)());
}

void carla_rust$traffic_manager$cxxbridge1$FfiAction$waypoint(::carla_rust::traffic_manager::FfiAction const &self, ::std::shared_ptr<::carla_rust::client::FfiWaypoint> *return$) noexcept {
  ::std::shared_ptr<::carla_rust::client::FfiWaypoint> (::carla_rust::traffic_manager::FfiAction::*waypoint$)() const = &::carla_rust::traffic_manager::FfiAction::waypoint;
  new (return$) ::std::shared_ptr<::carla_rust::client::FfiWaypoint>((self.*waypoint$)());
}
} // extern "C"
} // namespace traffic_manager
} // namespace carla_rust

extern "C" {
void cxxbridge1$carla_rust_traffic_manager_FfiAction_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiAction *autocxx_gen_this, ::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete *base) noexcept {
  void (*carla_rust_traffic_manager_FfiAction_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiAction *, ::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete *) = ::carla_rust_traffic_manager_FfiAction_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiAction_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

::std::size_t cxxbridge1$carla_rust_traffic_manager_FfiActionBuffer_size_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiActionBuffer const &autocxx_gen_this) noexcept {
  ::std::size_t (*carla_rust_traffic_manager_FfiActionBuffer_size_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiActionBuffer const &) = ::carla_rust_traffic_manager_FfiActionBuffer_size_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_traffic_manager_FfiActionBuffer_size_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}
} // extern "C"

namespace carla_rust {
namespace traffic_manager {
extern "C" {
::carla_rust::traffic_manager::FfiAction const *carla_rust$traffic_manager$cxxbridge1$FfiActionBuffer$as_ptr(::carla_rust::traffic_manager::FfiActionBuffer const &self) noexcept {
  ::carla_rust::traffic_manager::FfiAction const *(::carla_rust::traffic_manager::FfiActionBuffer::*as_ptr$)() const = &::carla_rust::traffic_manager::FfiActionBuffer::as_ptr;
  return (self.*as_ptr$)();
}
} // extern "C"
} // namespace traffic_manager
} // namespace carla_rust

extern "C" {
void cxxbridge1$carla_rust_traffic_manager_FfiActionBuffer_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiActionBuffer *autocxx_gen_this, ::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *base) noexcept {
  void (*carla_rust_traffic_manager_FfiActionBuffer_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiActionBuffer *, ::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *) = ::carla_rust_traffic_manager_FfiActionBuffer_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiActionBuffer_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

::std::uint16_t cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_Port_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager const &autocxx_gen_this) noexcept {
  ::std::uint16_t (*carla_rust_traffic_manager_FfiTrafficManager_Port_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager const &) = ::carla_rust_traffic_manager_FfiTrafficManager_Port_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_traffic_manager_FfiTrafficManager_Port_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

bool cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_IsValidPort_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager const &autocxx_gen_this) noexcept {
  bool (*carla_rust_traffic_manager_FfiTrafficManager_IsValidPort_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager const &) = ::carla_rust_traffic_manager_FfiTrafficManager_IsValidPort_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_traffic_manager_FfiTrafficManager_IsValidPort_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetOSMMode_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, bool mode_switch) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetOSMMode_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, bool) = ::carla_rust_traffic_manager_FfiTrafficManager_SetOSMMode_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetOSMMode_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, mode_switch);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetCustomPath_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, ::std::vector<::carla_rust::geom::FfiLocation> const &path, bool empty_buffer) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetCustomPath_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, ::std::vector<::carla_rust::geom::FfiLocation> const &, bool) = ::carla_rust_traffic_manager_FfiTrafficManager_SetCustomPath_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetCustomPath_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, path, empty_buffer);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_RemoveUploadPath_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::std::uint32_t const &actor_id, bool remove_path) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_RemoveUploadPath_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::std::uint32_t const &, bool) = ::carla_rust_traffic_manager_FfiTrafficManager_RemoveUploadPath_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_RemoveUploadPath_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor_id, remove_path);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_UpdateUploadPath_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::std::uint32_t const &actor_id, ::std::vector<::carla_rust::geom::FfiLocation> const &path) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_UpdateUploadPath_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::std::uint32_t const &, ::std::vector<::carla_rust::geom::FfiLocation> const &) = ::carla_rust_traffic_manager_FfiTrafficManager_UpdateUploadPath_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_UpdateUploadPath_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor_id, path);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, ::std::vector<::std::uint8_t> *route, bool empty_buffer) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, ::std::vector<::std::uint8_t> *, bool) = ::carla_rust_traffic_manager_FfiTrafficManager_SetImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, route, empty_buffer);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_RemoveImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::std::uint32_t const &actor_id, bool remove_path) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_RemoveImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::std::uint32_t const &, bool) = ::carla_rust_traffic_manager_FfiTrafficManager_RemoveImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_RemoveImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor_id, remove_path);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_UpdateImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::std::uint32_t const &actor_id, ::std::vector<::std::uint8_t> *route) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_UpdateImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::std::uint32_t const &, ::std::vector<::std::uint8_t> *) = ::carla_rust_traffic_manager_FfiTrafficManager_UpdateImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_UpdateImportedRoute_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor_id, route);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetRespawnDormantVehicles_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, bool mode_switch) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetRespawnDormantVehicles_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, bool) = ::carla_rust_traffic_manager_FfiTrafficManager_SetRespawnDormantVehicles_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetRespawnDormantVehicles_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, mode_switch);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetBoundariesRespawnDormantVehicles_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, float lower_bound, float upper_bound) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetBoundariesRespawnDormantVehicles_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, float, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetBoundariesRespawnDormantVehicles_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetBoundariesRespawnDormantVehicles_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, lower_bound, upper_bound);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetMaxBoundaries_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, float lower, float upper) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetMaxBoundaries_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, float, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetMaxBoundaries_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetMaxBoundaries_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, lower, upper);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetHybridPhysicsMode_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, bool mode_switch) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetHybridPhysicsMode_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, bool) = ::carla_rust_traffic_manager_FfiTrafficManager_SetHybridPhysicsMode_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetHybridPhysicsMode_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, mode_switch);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetHybridPhysicsRadius_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, float radius) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetHybridPhysicsRadius_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetHybridPhysicsRadius_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetHybridPhysicsRadius_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, radius);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_RegisterVehicles_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiActor> const *actor_ptr, ::std::size_t size) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_RegisterVehicles_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::std::shared_ptr<::carla_rust::client::FfiActor> const *, ::std::size_t) = ::carla_rust_traffic_manager_FfiTrafficManager_RegisterVehicles_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_RegisterVehicles_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor_ptr, size);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_UnregisterVehicles_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::std::shared_ptr<::carla_rust::client::FfiActor> const *actor_ptr, ::std::size_t size) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_UnregisterVehicles_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::std::shared_ptr<::carla_rust::client::FfiActor> const *, ::std::size_t) = ::carla_rust_traffic_manager_FfiTrafficManager_UnregisterVehicles_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_UnregisterVehicles_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor_ptr, size);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetPercentageSpeedDifference_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, float percentage) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetPercentageSpeedDifference_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetPercentageSpeedDifference_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetPercentageSpeedDifference_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, percentage);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetLaneOffset_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, float offset) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetLaneOffset_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetLaneOffset_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetLaneOffset_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, offset);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetDesiredSpeed_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, float value) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetDesiredSpeed_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetDesiredSpeed_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetDesiredSpeed_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, value);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetGlobalPercentageSpeedDifference_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, float percentage) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetGlobalPercentageSpeedDifference_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetGlobalPercentageSpeedDifference_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetGlobalPercentageSpeedDifference_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, percentage);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetGlobalLaneOffset_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, float offset) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetGlobalLaneOffset_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetGlobalLaneOffset_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetGlobalLaneOffset_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, offset);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetUpdateVehicleLights_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, bool do_update) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetUpdateVehicleLights_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, bool) = ::carla_rust_traffic_manager_FfiTrafficManager_SetUpdateVehicleLights_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetUpdateVehicleLights_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, do_update);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetCollisionDetection_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &reference_actor, ::carla_rust::client::FfiActor const &other_actor, bool detect_collision) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetCollisionDetection_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, ::carla_rust::client::FfiActor const &, bool) = ::carla_rust_traffic_manager_FfiTrafficManager_SetCollisionDetection_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetCollisionDetection_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, reference_actor, other_actor, detect_collision);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetForceLaneChange_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, bool direction) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetForceLaneChange_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, bool) = ::carla_rust_traffic_manager_FfiTrafficManager_SetForceLaneChange_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetForceLaneChange_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, direction);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetAutoLaneChange_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, bool enable) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetAutoLaneChange_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, bool) = ::carla_rust_traffic_manager_FfiTrafficManager_SetAutoLaneChange_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetAutoLaneChange_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, enable);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetDistanceToLeadingVehicle_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, float distance) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetDistanceToLeadingVehicle_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetDistanceToLeadingVehicle_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetDistanceToLeadingVehicle_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, distance);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetPercentageIgnoreWalkers_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, float perc) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetPercentageIgnoreWalkers_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetPercentageIgnoreWalkers_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetPercentageIgnoreWalkers_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, perc);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetPercentageIgnoreVehicles_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, float perc) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetPercentageIgnoreVehicles_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetPercentageIgnoreVehicles_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetPercentageIgnoreVehicles_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, perc);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetPercentageRunningSign_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, float perc) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetPercentageRunningSign_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetPercentageRunningSign_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetPercentageRunningSign_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, perc);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetPercentageRunningLight_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, float perc) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetPercentageRunningLight_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetPercentageRunningLight_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetPercentageRunningLight_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, perc);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetSynchronousMode_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, bool mode) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetSynchronousMode_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, bool) = ::carla_rust_traffic_manager_FfiTrafficManager_SetSynchronousMode_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetSynchronousMode_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, mode);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetSynchronousModeTimeOutInMiliSecond_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, double time) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetSynchronousModeTimeOutInMiliSecond_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, double) = ::carla_rust_traffic_manager_FfiTrafficManager_SetSynchronousModeTimeOutInMiliSecond_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetSynchronousModeTimeOutInMiliSecond_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, time);
}

bool cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SynchronousTick_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this) noexcept {
  bool (*carla_rust_traffic_manager_FfiTrafficManager_SynchronousTick_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &) = ::carla_rust_traffic_manager_FfiTrafficManager_SynchronousTick_autocxx_wrapper_0xd539d5a17acbdd25;
  return carla_rust_traffic_manager_FfiTrafficManager_SynchronousTick_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetGlobalDistanceToLeadingVehicle_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, float distance) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetGlobalDistanceToLeadingVehicle_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetGlobalDistanceToLeadingVehicle_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetGlobalDistanceToLeadingVehicle_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, distance);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetKeepRightPercentage_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, float percentage) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetKeepRightPercentage_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetKeepRightPercentage_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetKeepRightPercentage_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, percentage);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetRandomLeftLaneChangePercentage_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, float percentage) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetRandomLeftLaneChangePercentage_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetRandomLeftLaneChangePercentage_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetRandomLeftLaneChangePercentage_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, percentage);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetRandomRightLaneChangePercentage_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::carla_rust::client::FfiActor const &actor, float percentage) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetRandomRightLaneChangePercentage_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::carla_rust::client::FfiActor const &, float) = ::carla_rust_traffic_manager_FfiTrafficManager_SetRandomRightLaneChangePercentage_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetRandomRightLaneChangePercentage_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor, percentage);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_SetRandomDeviceSeed_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::std::uint64_t seed) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_SetRandomDeviceSeed_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::std::uint64_t) = ::carla_rust_traffic_manager_FfiTrafficManager_SetRandomDeviceSeed_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_SetRandomDeviceSeed_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, seed);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_ShutDown_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_ShutDown_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &) = ::carla_rust_traffic_manager_FfiTrafficManager_ShutDown_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_ShutDown_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_GetNextAction_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::std::uint32_t const &actor_id, ::carla_rust::traffic_manager::FfiAction *placement_return_type) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_GetNextAction_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::std::uint32_t const &, ::carla_rust::traffic_manager::FfiAction *) = ::carla_rust_traffic_manager_FfiTrafficManager_GetNextAction_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_GetNextAction_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor_id, placement_return_type);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_GetActionBuffer_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager &autocxx_gen_this, ::std::uint32_t const &actor_id, ::carla_rust::traffic_manager::FfiActionBuffer *placement_return_type) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_GetActionBuffer_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager &, ::std::uint32_t const &, ::carla_rust::traffic_manager::FfiActionBuffer *) = ::carla_rust_traffic_manager_FfiTrafficManager_GetActionBuffer_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_GetActionBuffer_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, actor_id, placement_return_type);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager *autocxx_gen_this, ::carla::traffic_manager::TrafficManager *base) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager *, ::carla::traffic_manager::TrafficManager *) = ::carla_rust_traffic_manager_FfiTrafficManager_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, base);
}

void cxxbridge1$carla_geom_Vector3D_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D *autocxx_gen_this, ::carla::geom::Vector3D *other) noexcept {
  void (*carla_geom_Vector3D_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D *, ::carla::geom::Vector3D *) = ::carla_geom_Vector3D_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Vector3D_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_geom_Vector3D_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D *autocxx_gen_this, ::carla::geom::Vector3D const &other) noexcept {
  void (*carla_geom_Vector3D_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D *, ::carla::geom::Vector3D const &) = ::carla_geom_Vector3D_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Vector3D_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$Vector3D_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3D *autocxx_gen_this) noexcept {
  void (*Vector3D_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3D *) = ::Vector3D_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  Vector3D_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_Vector3DInt_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3DInt *autocxx_gen_this, ::carla::geom::Vector3DInt *other) noexcept {
  void (*carla_geom_Vector3DInt_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3DInt *, ::carla::geom::Vector3DInt *) = ::carla_geom_Vector3DInt_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Vector3DInt_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_geom_Vector3DInt_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3DInt *autocxx_gen_this, ::carla::geom::Vector3DInt const &other) noexcept {
  void (*carla_geom_Vector3DInt_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3DInt *, ::carla::geom::Vector3DInt const &) = ::carla_geom_Vector3DInt_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Vector3DInt_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$Vector3DInt_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector3DInt *autocxx_gen_this) noexcept {
  void (*Vector3DInt_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector3DInt *) = ::Vector3DInt_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  Vector3DInt_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_Math_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Math *autocxx_gen_this) noexcept {
  void (*carla_geom_Math_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Math *) = ::carla_geom_Math_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Math_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_Math_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Math *autocxx_gen_this, ::carla::geom::Math *other) noexcept {
  void (*carla_geom_Math_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Math *, ::carla::geom::Math *) = ::carla_geom_Math_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Math_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_geom_Math_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Math *autocxx_gen_this, ::carla::geom::Math const &other) noexcept {
  void (*carla_geom_Math_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Math *, ::carla::geom::Math const &) = ::carla_geom_Math_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Math_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$Math_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Math *autocxx_gen_this) noexcept {
  void (*Math_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Math *) = ::Math_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  Math_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_Rotation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Rotation *autocxx_gen_this, ::carla::geom::Rotation *other) noexcept {
  void (*carla_geom_Rotation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Rotation *, ::carla::geom::Rotation *) = ::carla_geom_Rotation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Rotation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_geom_Rotation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Rotation *autocxx_gen_this, ::carla::geom::Rotation const &other) noexcept {
  void (*carla_geom_Rotation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Rotation *, ::carla::geom::Rotation const &) = ::carla_geom_Rotation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Rotation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$Rotation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Rotation *autocxx_gen_this) noexcept {
  void (*Rotation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Rotation *) = ::Rotation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  Rotation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_BoundingBox_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::BoundingBox *autocxx_gen_this, ::carla::geom::BoundingBox *other) noexcept {
  void (*carla_geom_BoundingBox_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::BoundingBox *, ::carla::geom::BoundingBox *) = ::carla_geom_BoundingBox_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_BoundingBox_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_geom_BoundingBox_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::BoundingBox *autocxx_gen_this, ::carla::geom::BoundingBox const &other) noexcept {
  void (*carla_geom_BoundingBox_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::BoundingBox *, ::carla::geom::BoundingBox const &) = ::carla_geom_BoundingBox_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_BoundingBox_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$BoundingBox_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::BoundingBox *autocxx_gen_this) noexcept {
  void (*BoundingBox_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::BoundingBox *) = ::BoundingBox_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  BoundingBox_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_Vector2D_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector2D *autocxx_gen_this, ::carla::geom::Vector2D *other) noexcept {
  void (*carla_geom_Vector2D_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector2D *, ::carla::geom::Vector2D *) = ::carla_geom_Vector2D_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Vector2D_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_geom_Vector2D_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector2D *autocxx_gen_this, ::carla::geom::Vector2D const &other) noexcept {
  void (*carla_geom_Vector2D_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector2D *, ::carla::geom::Vector2D const &) = ::carla_geom_Vector2D_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Vector2D_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$Vector2D_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Vector2D *autocxx_gen_this) noexcept {
  void (*Vector2D_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Vector2D *) = ::Vector2D_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  Vector2D_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_MeshMaterial_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshMaterial *autocxx_gen_this, ::carla::geom::MeshMaterial *other) noexcept {
  void (*carla_geom_MeshMaterial_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshMaterial *, ::carla::geom::MeshMaterial *) = ::carla_geom_MeshMaterial_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_MeshMaterial_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_geom_MeshMaterial_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshMaterial *autocxx_gen_this, ::carla::geom::MeshMaterial const &other) noexcept {
  void (*carla_geom_MeshMaterial_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshMaterial *, ::carla::geom::MeshMaterial const &) = ::carla_geom_MeshMaterial_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_MeshMaterial_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$MeshMaterial_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshMaterial *autocxx_gen_this) noexcept {
  void (*MeshMaterial_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshMaterial *) = ::MeshMaterial_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  MeshMaterial_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_Mesh_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Mesh *autocxx_gen_this, ::carla::geom::Mesh *other) noexcept {
  void (*carla_geom_Mesh_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Mesh *, ::carla::geom::Mesh *) = ::carla_geom_Mesh_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_Mesh_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$Mesh_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::Mesh *autocxx_gen_this) noexcept {
  void (*Mesh_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::Mesh *) = ::Mesh_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  Mesh_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_GeoLocation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::GeoLocation *autocxx_gen_this, ::carla::geom::GeoLocation *other) noexcept {
  void (*carla_geom_GeoLocation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::GeoLocation *, ::carla::geom::GeoLocation *) = ::carla_geom_GeoLocation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_GeoLocation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_geom_GeoLocation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::GeoLocation *autocxx_gen_this, ::carla::geom::GeoLocation const &other) noexcept {
  void (*carla_geom_GeoLocation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::GeoLocation *, ::carla::geom::GeoLocation const &) = ::carla_geom_GeoLocation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_GeoLocation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$GeoLocation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::GeoLocation *autocxx_gen_this) noexcept {
  void (*GeoLocation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::GeoLocation *) = ::GeoLocation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  GeoLocation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$CubicPolynomial_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::CubicPolynomial *autocxx_gen_this) noexcept {
  void (*CubicPolynomial_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::CubicPolynomial *) = ::CubicPolynomial_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  CubicPolynomial_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_MeshFactory_RoadParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshFactory::RoadParameters *autocxx_gen_this) noexcept {
  void (*carla_geom_MeshFactory_RoadParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshFactory::RoadParameters *) = ::carla_geom_MeshFactory_RoadParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_MeshFactory_RoadParameters_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$MeshFactory_RoadParameters_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshFactory::RoadParameters *autocxx_gen_this, ::carla::geom::MeshFactory::RoadParameters *other) noexcept {
  void (*MeshFactory_RoadParameters_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshFactory::RoadParameters *, ::carla::geom::MeshFactory::RoadParameters *) = ::MeshFactory_RoadParameters_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  MeshFactory_RoadParameters_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$MeshFactory_RoadParameters_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshFactory::RoadParameters *autocxx_gen_this, ::carla::geom::MeshFactory::RoadParameters const &other) noexcept {
  void (*MeshFactory_RoadParameters_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshFactory::RoadParameters *, ::carla::geom::MeshFactory::RoadParameters const &) = ::MeshFactory_RoadParameters_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  MeshFactory_RoadParameters_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$MeshFactory_RoadParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshFactory::RoadParameters *autocxx_gen_this) noexcept {
  void (*MeshFactory_RoadParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshFactory::RoadParameters *) = ::MeshFactory_RoadParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  MeshFactory_RoadParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_VehicleControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleControl *autocxx_gen_this, ::carla::rpc::VehicleControl *other) noexcept {
  void (*carla_rpc_VehicleControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleControl *, ::carla::rpc::VehicleControl *) = ::carla_rpc_VehicleControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehicleControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rpc_VehicleControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleControl *autocxx_gen_this, ::carla::rpc::VehicleControl const &other) noexcept {
  void (*carla_rpc_VehicleControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleControl *, ::carla::rpc::VehicleControl const &) = ::carla_rpc_VehicleControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehicleControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$VehicleControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleControl *autocxx_gen_this) noexcept {
  void (*VehicleControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleControl *) = ::VehicleControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  VehicleControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_EpisodeSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::EpisodeSettings *autocxx_gen_this, ::carla::rpc::EpisodeSettings *other) noexcept {
  void (*carla_rpc_EpisodeSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::EpisodeSettings *, ::carla::rpc::EpisodeSettings *) = ::carla_rpc_EpisodeSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_EpisodeSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rpc_EpisodeSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::EpisodeSettings *autocxx_gen_this, ::carla::rpc::EpisodeSettings const &other) noexcept {
  void (*carla_rpc_EpisodeSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::EpisodeSettings *, ::carla::rpc::EpisodeSettings const &) = ::carla_rpc_EpisodeSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_EpisodeSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$EpisodeSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::EpisodeSettings *autocxx_gen_this) noexcept {
  void (*EpisodeSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::EpisodeSettings *) = ::EpisodeSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  EpisodeSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_LabelledPoint_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::LabelledPoint *autocxx_gen_this, ::carla::rpc::LabelledPoint *other) noexcept {
  void (*carla_rpc_LabelledPoint_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::LabelledPoint *, ::carla::rpc::LabelledPoint *) = ::carla_rpc_LabelledPoint_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_LabelledPoint_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rpc_LabelledPoint_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::LabelledPoint *autocxx_gen_this, ::carla::rpc::LabelledPoint const &other) noexcept {
  void (*carla_rpc_LabelledPoint_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::LabelledPoint *, ::carla::rpc::LabelledPoint const &) = ::carla_rpc_LabelledPoint_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_LabelledPoint_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$LabelledPoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::LabelledPoint *autocxx_gen_this) noexcept {
  void (*LabelledPoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::LabelledPoint *) = ::LabelledPoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  LabelledPoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_GearPhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::GearPhysicsControl *autocxx_gen_this, ::carla::rpc::GearPhysicsControl *other) noexcept {
  void (*carla_rpc_GearPhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::GearPhysicsControl *, ::carla::rpc::GearPhysicsControl *) = ::carla_rpc_GearPhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_GearPhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rpc_GearPhysicsControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::GearPhysicsControl *autocxx_gen_this, ::carla::rpc::GearPhysicsControl const &other) noexcept {
  void (*carla_rpc_GearPhysicsControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::GearPhysicsControl *, ::carla::rpc::GearPhysicsControl const &) = ::carla_rpc_GearPhysicsControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_GearPhysicsControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$GearPhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::GearPhysicsControl *autocxx_gen_this) noexcept {
  void (*GearPhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::GearPhysicsControl *) = ::GearPhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  GearPhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_WheelPhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WheelPhysicsControl *autocxx_gen_this, ::carla::rpc::WheelPhysicsControl *other) noexcept {
  void (*carla_rpc_WheelPhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WheelPhysicsControl *, ::carla::rpc::WheelPhysicsControl *) = ::carla_rpc_WheelPhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_WheelPhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rpc_WheelPhysicsControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WheelPhysicsControl *autocxx_gen_this, ::carla::rpc::WheelPhysicsControl const &other) noexcept {
  void (*carla_rpc_WheelPhysicsControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WheelPhysicsControl *, ::carla::rpc::WheelPhysicsControl const &) = ::carla_rpc_WheelPhysicsControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_WheelPhysicsControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$WheelPhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WheelPhysicsControl *autocxx_gen_this) noexcept {
  void (*WheelPhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WheelPhysicsControl *) = ::WheelPhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  WheelPhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_WeatherParameters_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WeatherParameters *autocxx_gen_this, ::carla::rpc::WeatherParameters *other) noexcept {
  void (*carla_rpc_WeatherParameters_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WeatherParameters *, ::carla::rpc::WeatherParameters *) = ::carla_rpc_WeatherParameters_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_WeatherParameters_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rpc_WeatherParameters_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WeatherParameters *autocxx_gen_this, ::carla::rpc::WeatherParameters const &other) noexcept {
  void (*carla_rpc_WeatherParameters_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WeatherParameters *, ::carla::rpc::WeatherParameters const &) = ::carla_rpc_WeatherParameters_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_WeatherParameters_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$WeatherParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WeatherParameters *autocxx_gen_this) noexcept {
  void (*WeatherParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WeatherParameters *) = ::WeatherParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  WeatherParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_VehicleLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleLightState *autocxx_gen_this, ::carla::rpc::VehicleLightState *other) noexcept {
  void (*carla_rpc_VehicleLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleLightState *, ::carla::rpc::VehicleLightState *) = ::carla_rpc_VehicleLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehicleLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rpc_VehicleLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleLightState *autocxx_gen_this, ::carla::rpc::VehicleLightState const &other) noexcept {
  void (*carla_rpc_VehicleLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleLightState *, ::carla::rpc::VehicleLightState const &) = ::carla_rpc_VehicleLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehicleLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$VehicleLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleLightState *autocxx_gen_this) noexcept {
  void (*VehicleLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleLightState *) = ::VehicleLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  VehicleLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_AckermannControllerSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::AckermannControllerSettings *autocxx_gen_this, ::carla::rpc::AckermannControllerSettings *other) noexcept {
  void (*carla_rpc_AckermannControllerSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::AckermannControllerSettings *, ::carla::rpc::AckermannControllerSettings *) = ::carla_rpc_AckermannControllerSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_AckermannControllerSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rpc_AckermannControllerSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::AckermannControllerSettings *autocxx_gen_this, ::carla::rpc::AckermannControllerSettings const &other) noexcept {
  void (*carla_rpc_AckermannControllerSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::AckermannControllerSettings *, ::carla::rpc::AckermannControllerSettings const &) = ::carla_rpc_AckermannControllerSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_AckermannControllerSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$AckermannControllerSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::AckermannControllerSettings *autocxx_gen_this) noexcept {
  void (*AckermannControllerSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::AckermannControllerSettings *) = ::AckermannControllerSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  AckermannControllerSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_VehicleAckermannControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleAckermannControl *autocxx_gen_this, ::carla::rpc::VehicleAckermannControl *other) noexcept {
  void (*carla_rpc_VehicleAckermannControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleAckermannControl *, ::carla::rpc::VehicleAckermannControl *) = ::carla_rpc_VehicleAckermannControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehicleAckermannControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rpc_VehicleAckermannControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleAckermannControl *autocxx_gen_this, ::carla::rpc::VehicleAckermannControl const &other) noexcept {
  void (*carla_rpc_VehicleAckermannControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleAckermannControl *, ::carla::rpc::VehicleAckermannControl const &) = ::carla_rpc_VehicleAckermannControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehicleAckermannControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$VehicleAckermannControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehicleAckermannControl *autocxx_gen_this) noexcept {
  void (*VehicleAckermannControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehicleAckermannControl *) = ::VehicleAckermannControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  VehicleAckermannControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rpc_OpendriveGenerationParameters_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::OpendriveGenerationParameters *autocxx_gen_this, ::carla::rpc::OpendriveGenerationParameters *other) noexcept {
  void (*carla_rpc_OpendriveGenerationParameters_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::OpendriveGenerationParameters *, ::carla::rpc::OpendriveGenerationParameters *) = ::carla_rpc_OpendriveGenerationParameters_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_OpendriveGenerationParameters_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rpc_OpendriveGenerationParameters_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::OpendriveGenerationParameters *autocxx_gen_this, ::carla::rpc::OpendriveGenerationParameters const &other) noexcept {
  void (*carla_rpc_OpendriveGenerationParameters_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::OpendriveGenerationParameters *, ::carla::rpc::OpendriveGenerationParameters const &) = ::carla_rpc_OpendriveGenerationParameters_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_OpendriveGenerationParameters_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$OpendriveGenerationParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::OpendriveGenerationParameters *autocxx_gen_this) noexcept {
  void (*OpendriveGenerationParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::OpendriveGenerationParameters *) = ::OpendriveGenerationParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  OpendriveGenerationParameters_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_sensor_data_SemanticLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarDetection *autocxx_gen_this, ::carla::sensor::data::SemanticLidarDetection *other) noexcept {
  void (*carla_sensor_data_SemanticLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarDetection *, ::carla::sensor::data::SemanticLidarDetection *) = ::carla_sensor_data_SemanticLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_SemanticLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_sensor_data_SemanticLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarDetection *autocxx_gen_this, ::carla::sensor::data::SemanticLidarDetection const &other) noexcept {
  void (*carla_sensor_data_SemanticLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarDetection *, ::carla::sensor::data::SemanticLidarDetection const &) = ::carla_sensor_data_SemanticLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_SemanticLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$SemanticLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarDetection *autocxx_gen_this) noexcept {
  void (*SemanticLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarDetection *) = ::SemanticLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  SemanticLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_sensor_data_LidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarDetection *autocxx_gen_this, ::carla::sensor::data::LidarDetection *other) noexcept {
  void (*carla_sensor_data_LidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarDetection *, ::carla::sensor::data::LidarDetection *) = ::carla_sensor_data_LidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_LidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_sensor_data_LidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarDetection *autocxx_gen_this, ::carla::sensor::data::LidarDetection const &other) noexcept {
  void (*carla_sensor_data_LidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarDetection *, ::carla::sensor::data::LidarDetection const &) = ::carla_sensor_data_LidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_LidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$LidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarDetection *autocxx_gen_this) noexcept {
  void (*LidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarDetection *) = ::LidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  LidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$LidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::LidarMeasurement *autocxx_gen_this) noexcept {
  void (*LidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::LidarMeasurement *) = ::LidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  LidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$SemanticLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::SemanticLidarMeasurement *autocxx_gen_this) noexcept {
  void (*SemanticLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::SemanticLidarMeasurement *) = ::SemanticLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  SemanticLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_sensor_data_RadarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::RadarDetection *autocxx_gen_this) noexcept {
  void (*carla_sensor_data_RadarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::RadarDetection *) = ::carla_sensor_data_RadarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_RadarDetection_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_sensor_data_RadarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::RadarDetection *autocxx_gen_this, ::carla::sensor::data::RadarDetection *other) noexcept {
  void (*carla_sensor_data_RadarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::RadarDetection *, ::carla::sensor::data::RadarDetection *) = ::carla_sensor_data_RadarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_RadarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_sensor_data_RadarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::RadarDetection *autocxx_gen_this, ::carla::sensor::data::RadarDetection const &other) noexcept {
  void (*carla_sensor_data_RadarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::RadarDetection *, ::carla::sensor::data::RadarDetection const &) = ::carla_sensor_data_RadarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_data_RadarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$RadarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::RadarDetection *autocxx_gen_this) noexcept {
  void (*RadarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::RadarDetection *) = ::RadarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  RadarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$RadarData_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::RadarData *autocxx_gen_this) noexcept {
  void (*RadarData_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::RadarData *) = ::RadarData_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  RadarData_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$RadarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::RadarMeasurement *autocxx_gen_this) noexcept {
  void (*RadarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::RadarMeasurement *) = ::RadarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  RadarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$Landmark_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Landmark *autocxx_gen_this) noexcept {
  void (*Landmark_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Landmark *) = ::Landmark_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  Landmark_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_client_Timestamp_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Timestamp *autocxx_gen_this, ::carla::client::Timestamp *other) noexcept {
  void (*carla_client_Timestamp_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Timestamp *, ::carla::client::Timestamp *) = ::carla_client_Timestamp_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Timestamp_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_client_Timestamp_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Timestamp *autocxx_gen_this, ::carla::client::Timestamp const &other) noexcept {
  void (*carla_client_Timestamp_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Timestamp *, ::carla::client::Timestamp const &) = ::carla_client_Timestamp_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_Timestamp_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$Timestamp_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Timestamp *autocxx_gen_this) noexcept {
  void (*Timestamp_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Timestamp *) = ::Timestamp_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  Timestamp_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_client_WorldSnapshot_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::WorldSnapshot *autocxx_gen_this, ::carla::client::WorldSnapshot *other) noexcept {
  void (*carla_client_WorldSnapshot_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::WorldSnapshot *, ::carla::client::WorldSnapshot *) = ::carla_client_WorldSnapshot_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_WorldSnapshot_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_client_WorldSnapshot_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::WorldSnapshot *autocxx_gen_this, ::carla::client::WorldSnapshot const &other) noexcept {
  void (*carla_client_WorldSnapshot_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::WorldSnapshot *, ::carla::client::WorldSnapshot const &) = ::carla_client_WorldSnapshot_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_WorldSnapshot_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$WorldSnapshot_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::WorldSnapshot *autocxx_gen_this) noexcept {
  void (*WorldSnapshot_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::WorldSnapshot *) = ::WorldSnapshot_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  WorldSnapshot_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$Light_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Light *autocxx_gen_this) noexcept {
  void (*Light_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Light *) = ::Light_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  Light_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$ActorBlueprint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorBlueprint *autocxx_gen_this) noexcept {
  void (*ActorBlueprint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorBlueprint *) = ::ActorBlueprint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  ActorBlueprint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_geom_FfiLocation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiLocation *autocxx_gen_this, ::carla_rust::geom::FfiLocation *other) noexcept {
  void (*carla_rust_geom_FfiLocation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiLocation *, ::carla_rust::geom::FfiLocation *) = ::carla_rust_geom_FfiLocation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_geom_FfiLocation_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_geom_FfiLocation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiLocation *autocxx_gen_this, ::carla_rust::geom::FfiLocation const &other) noexcept {
  void (*carla_rust_geom_FfiLocation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiLocation *, ::carla_rust::geom::FfiLocation const &) = ::carla_rust_geom_FfiLocation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_geom_FfiLocation_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiLocation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiLocation *autocxx_gen_this) noexcept {
  void (*FfiLocation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiLocation *) = ::FfiLocation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLocation_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_geom_FfiTransform_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiTransform *autocxx_gen_this, ::carla_rust::geom::FfiTransform *other) noexcept {
  void (*carla_rust_geom_FfiTransform_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiTransform *, ::carla_rust::geom::FfiTransform *) = ::carla_rust_geom_FfiTransform_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_geom_FfiTransform_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_geom_FfiTransform_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiTransform *autocxx_gen_this, ::carla_rust::geom::FfiTransform const &other) noexcept {
  void (*carla_rust_geom_FfiTransform_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiTransform *, ::carla_rust::geom::FfiTransform const &) = ::carla_rust_geom_FfiTransform_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_geom_FfiTransform_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiTransform_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiTransform *autocxx_gen_this) noexcept {
  void (*FfiTransform_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiTransform *) = ::FfiTransform_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiTransform_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_geom_FfiBoundingBox_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiBoundingBox *autocxx_gen_this, ::carla_rust::geom::FfiBoundingBox *other) noexcept {
  void (*carla_rust_geom_FfiBoundingBox_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiBoundingBox *, ::carla_rust::geom::FfiBoundingBox *) = ::carla_rust_geom_FfiBoundingBox_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_geom_FfiBoundingBox_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_geom_FfiBoundingBox_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiBoundingBox *autocxx_gen_this, ::carla_rust::geom::FfiBoundingBox const &other) noexcept {
  void (*carla_rust_geom_FfiBoundingBox_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiBoundingBox *, ::carla_rust::geom::FfiBoundingBox const &) = ::carla_rust_geom_FfiBoundingBox_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_geom_FfiBoundingBox_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiBoundingBox_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::geom::FfiBoundingBox *autocxx_gen_this) noexcept {
  void (*FfiBoundingBox_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::geom::FfiBoundingBox *) = ::FfiBoundingBox_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiBoundingBox_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_rpc_FfiVehiclePhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehiclePhysicsControl *autocxx_gen_this, ::carla_rust::rpc::FfiVehiclePhysicsControl *other) noexcept {
  void (*carla_rust_rpc_FfiVehiclePhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehiclePhysicsControl *, ::carla_rust::rpc::FfiVehiclePhysicsControl *) = ::carla_rust_rpc_FfiVehiclePhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiVehiclePhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiVehiclePhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehiclePhysicsControl *autocxx_gen_this) noexcept {
  void (*FfiVehiclePhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehiclePhysicsControl *) = ::FfiVehiclePhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiVehiclePhysicsControl_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_rpc_FfiEpisodeSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEpisodeSettings *autocxx_gen_this, ::carla_rust::rpc::FfiEpisodeSettings *other) noexcept {
  void (*carla_rust_rpc_FfiEpisodeSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEpisodeSettings *, ::carla_rust::rpc::FfiEpisodeSettings *) = ::carla_rust_rpc_FfiEpisodeSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiEpisodeSettings_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_rpc_FfiEpisodeSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEpisodeSettings *autocxx_gen_this, ::carla_rust::rpc::FfiEpisodeSettings const &other) noexcept {
  void (*carla_rust_rpc_FfiEpisodeSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEpisodeSettings *, ::carla_rust::rpc::FfiEpisodeSettings const &) = ::carla_rust_rpc_FfiEpisodeSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiEpisodeSettings_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiEpisodeSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEpisodeSettings *autocxx_gen_this) noexcept {
  void (*FfiEpisodeSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEpisodeSettings *) = ::FfiEpisodeSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiEpisodeSettings_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_rpc_FfiLabelledPoint_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiLabelledPoint *autocxx_gen_this, ::carla_rust::rpc::FfiLabelledPoint *other) noexcept {
  void (*carla_rust_rpc_FfiLabelledPoint_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiLabelledPoint *, ::carla_rust::rpc::FfiLabelledPoint *) = ::carla_rust_rpc_FfiLabelledPoint_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiLabelledPoint_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_rpc_FfiLabelledPoint_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiLabelledPoint *autocxx_gen_this, ::carla_rust::rpc::FfiLabelledPoint const &other) noexcept {
  void (*carla_rust_rpc_FfiLabelledPoint_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiLabelledPoint *, ::carla_rust::rpc::FfiLabelledPoint const &) = ::carla_rust_rpc_FfiLabelledPoint_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiLabelledPoint_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiLabelledPoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiLabelledPoint *autocxx_gen_this) noexcept {
  void (*FfiLabelledPoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiLabelledPoint *) = ::FfiLabelledPoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLabelledPoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_rpc_FfiVehicleLightStateElementRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehicleLightStateElementRef *autocxx_gen_this, ::carla_rust::rpc::FfiVehicleLightStateElementRef *other) noexcept {
  void (*carla_rust_rpc_FfiVehicleLightStateElementRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehicleLightStateElementRef *, ::carla_rust::rpc::FfiVehicleLightStateElementRef *) = ::carla_rust_rpc_FfiVehicleLightStateElementRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiVehicleLightStateElementRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_rpc_FfiVehicleLightStateElementRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehicleLightStateElementRef *autocxx_gen_this, ::carla_rust::rpc::FfiVehicleLightStateElementRef const &other) noexcept {
  void (*carla_rust_rpc_FfiVehicleLightStateElementRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehicleLightStateElementRef *, ::carla_rust::rpc::FfiVehicleLightStateElementRef const &) = ::carla_rust_rpc_FfiVehicleLightStateElementRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiVehicleLightStateElementRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiVehicleLightStateElementRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehicleLightStateElementRef *autocxx_gen_this) noexcept {
  void (*FfiVehicleLightStateElementRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehicleLightStateElementRef *) = ::FfiVehicleLightStateElementRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiVehicleLightStateElementRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_rpc_FfiVehicleLightStateList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehicleLightStateList *autocxx_gen_this, ::carla_rust::rpc::FfiVehicleLightStateList *other) noexcept {
  void (*carla_rust_rpc_FfiVehicleLightStateList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehicleLightStateList *, ::carla_rust::rpc::FfiVehicleLightStateList *) = ::carla_rust_rpc_FfiVehicleLightStateList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiVehicleLightStateList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiVehicleLightStateList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiVehicleLightStateList *autocxx_gen_this) noexcept {
  void (*FfiVehicleLightStateList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiVehicleLightStateList *) = ::FfiVehicleLightStateList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiVehicleLightStateList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_rpc_FfiEnvironmentObjectRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEnvironmentObjectRef *autocxx_gen_this, ::carla_rust::rpc::FfiEnvironmentObjectRef *other) noexcept {
  void (*carla_rust_rpc_FfiEnvironmentObjectRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEnvironmentObjectRef *, ::carla_rust::rpc::FfiEnvironmentObjectRef *) = ::carla_rust_rpc_FfiEnvironmentObjectRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiEnvironmentObjectRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_rpc_FfiEnvironmentObjectRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEnvironmentObjectRef *autocxx_gen_this, ::carla_rust::rpc::FfiEnvironmentObjectRef const &other) noexcept {
  void (*carla_rust_rpc_FfiEnvironmentObjectRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEnvironmentObjectRef *, ::carla_rust::rpc::FfiEnvironmentObjectRef const &) = ::carla_rust_rpc_FfiEnvironmentObjectRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiEnvironmentObjectRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiEnvironmentObjectRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiEnvironmentObjectRef *autocxx_gen_this) noexcept {
  void (*FfiEnvironmentObjectRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiEnvironmentObjectRef *) = ::FfiEnvironmentObjectRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiEnvironmentObjectRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_rpc_FfiRpcColor_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiRpcColor *autocxx_gen_this, ::carla_rust::rpc::FfiRpcColor *other) noexcept {
  void (*carla_rust_rpc_FfiRpcColor_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiRpcColor *, ::carla_rust::rpc::FfiRpcColor *) = ::carla_rust_rpc_FfiRpcColor_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiRpcColor_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_rpc_FfiRpcColor_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiRpcColor *autocxx_gen_this, ::carla_rust::rpc::FfiRpcColor const &other) noexcept {
  void (*carla_rust_rpc_FfiRpcColor_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiRpcColor *, ::carla_rust::rpc::FfiRpcColor const &) = ::carla_rust_rpc_FfiRpcColor_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiRpcColor_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiRpcColor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiRpcColor *autocxx_gen_this) noexcept {
  void (*FfiRpcColor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiRpcColor *) = ::FfiRpcColor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiRpcColor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_rpc_FfiRpcLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiRpcLightState *autocxx_gen_this, ::carla_rust::rpc::FfiRpcLightState *other) noexcept {
  void (*carla_rust_rpc_FfiRpcLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiRpcLightState *, ::carla_rust::rpc::FfiRpcLightState *) = ::carla_rust_rpc_FfiRpcLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiRpcLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_rpc_FfiRpcLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiRpcLightState *autocxx_gen_this, ::carla_rust::rpc::FfiRpcLightState const &other) noexcept {
  void (*carla_rust_rpc_FfiRpcLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiRpcLightState *, ::carla_rust::rpc::FfiRpcLightState const &) = ::carla_rust_rpc_FfiRpcLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_rpc_FfiRpcLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiRpcLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::rpc::FfiRpcLightState *autocxx_gen_this) noexcept {
  void (*FfiRpcLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::rpc::FfiRpcLightState *) = ::FfiRpcLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiRpcLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_sensor_data_FfiColor_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiColor *autocxx_gen_this, ::carla_rust::sensor::data::FfiColor *other) noexcept {
  void (*carla_rust_sensor_data_FfiColor_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiColor *, ::carla_rust::sensor::data::FfiColor *) = ::carla_rust_sensor_data_FfiColor_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_sensor_data_FfiColor_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_sensor_data_FfiColor_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiColor *autocxx_gen_this, ::carla_rust::sensor::data::FfiColor const &other) noexcept {
  void (*carla_rust_sensor_data_FfiColor_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiColor *, ::carla_rust::sensor::data::FfiColor const &) = ::carla_rust_sensor_data_FfiColor_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_sensor_data_FfiColor_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiColor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiColor *autocxx_gen_this) noexcept {
  void (*FfiColor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiColor *) = ::FfiColor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiColor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiCollisionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiCollisionEvent *autocxx_gen_this) noexcept {
  void (*FfiCollisionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiCollisionEvent *) = ::FfiCollisionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiCollisionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiImage_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiImage *autocxx_gen_this) noexcept {
  void (*FfiImage_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiImage *) = ::FfiImage_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiImage_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiLaneInvasionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLaneInvasionEvent *autocxx_gen_this) noexcept {
  void (*FfiLaneInvasionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLaneInvasionEvent *) = ::FfiLaneInvasionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLaneInvasionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_sensor_data_FfiLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarDetection *autocxx_gen_this, ::carla_rust::sensor::data::FfiLidarDetection *other) noexcept {
  void (*carla_rust_sensor_data_FfiLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarDetection *, ::carla_rust::sensor::data::FfiLidarDetection *) = ::carla_rust_sensor_data_FfiLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_sensor_data_FfiLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_sensor_data_FfiLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarDetection *autocxx_gen_this, ::carla_rust::sensor::data::FfiLidarDetection const &other) noexcept {
  void (*carla_rust_sensor_data_FfiLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarDetection *, ::carla_rust::sensor::data::FfiLidarDetection const &) = ::carla_rust_sensor_data_FfiLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_sensor_data_FfiLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarDetection *autocxx_gen_this) noexcept {
  void (*FfiLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarDetection *) = ::FfiLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiObstacleDetectionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiObstacleDetectionEvent *autocxx_gen_this) noexcept {
  void (*FfiObstacleDetectionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiObstacleDetectionEvent *) = ::FfiObstacleDetectionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiObstacleDetectionEvent_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_sensor_data_FfiSemanticLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarDetection *autocxx_gen_this, ::carla_rust::sensor::data::FfiSemanticLidarDetection *other) noexcept {
  void (*carla_rust_sensor_data_FfiSemanticLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarDetection *, ::carla_rust::sensor::data::FfiSemanticLidarDetection *) = ::carla_rust_sensor_data_FfiSemanticLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_sensor_data_FfiSemanticLidarDetection_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_sensor_data_FfiSemanticLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarDetection *autocxx_gen_this, ::carla_rust::sensor::data::FfiSemanticLidarDetection const &other) noexcept {
  void (*carla_rust_sensor_data_FfiSemanticLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarDetection *, ::carla_rust::sensor::data::FfiSemanticLidarDetection const &) = ::carla_rust_sensor_data_FfiSemanticLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_sensor_data_FfiSemanticLidarDetection_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiSemanticLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarDetection *autocxx_gen_this) noexcept {
  void (*FfiSemanticLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarDetection *) = ::FfiSemanticLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiSemanticLidarDetection_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiLidarMeasurement *autocxx_gen_this) noexcept {
  void (*FfiLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiLidarMeasurement *) = ::FfiLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiSemanticLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiSemanticLidarMeasurement *autocxx_gen_this) noexcept {
  void (*FfiSemanticLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiSemanticLidarMeasurement *) = ::FfiSemanticLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiSemanticLidarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiRadarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiRadarMeasurement *autocxx_gen_this) noexcept {
  void (*FfiRadarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiRadarMeasurement *) = ::FfiRadarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiRadarMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiGnssMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiGnssMeasurement *autocxx_gen_this) noexcept {
  void (*FfiGnssMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiGnssMeasurement *) = ::FfiGnssMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiGnssMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiImuMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::data::FfiImuMeasurement *autocxx_gen_this) noexcept {
  void (*FfiImuMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::data::FfiImuMeasurement *) = ::FfiImuMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiImuMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiSensorData_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::sensor::FfiSensorData *autocxx_gen_this) noexcept {
  void (*FfiSensorData_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::sensor::FfiSensorData *) = ::FfiSensorData_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiSensorData_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiActorAttributeValue_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorAttributeValue *autocxx_gen_this, ::carla_rust::client::FfiActorAttributeValue *other) noexcept {
  void (*carla_rust_client_FfiActorAttributeValue_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorAttributeValue *, ::carla_rust::client::FfiActorAttributeValue *) = ::carla_rust_client_FfiActorAttributeValue_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActorAttributeValue_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_client_FfiActorAttributeValue_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorAttributeValue *autocxx_gen_this, ::carla_rust::client::FfiActorAttributeValue const &other) noexcept {
  void (*carla_rust_client_FfiActorAttributeValue_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorAttributeValue *, ::carla_rust::client::FfiActorAttributeValue const &) = ::carla_rust_client_FfiActorAttributeValue_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActorAttributeValue_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiActorAttributeValue_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorAttributeValue *autocxx_gen_this) noexcept {
  void (*FfiActorAttributeValue_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorAttributeValue *) = ::FfiActorAttributeValue_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiActorAttributeValue_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiActor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActor *autocxx_gen_this) noexcept {
  void (*FfiActor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActor *) = ::FfiActor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiActor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiWaypointList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypointList *autocxx_gen_this, ::carla_rust::client::FfiWaypointList *other) noexcept {
  void (*carla_rust_client_FfiWaypointList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypointList *, ::carla_rust::client::FfiWaypointList *) = ::carla_rust_client_FfiWaypointList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWaypointList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_client_FfiWaypointList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypointList *autocxx_gen_this, ::carla_rust::client::FfiWaypointList const &other) noexcept {
  void (*carla_rust_client_FfiWaypointList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypointList *, ::carla_rust::client::FfiWaypointList const &) = ::carla_rust_client_FfiWaypointList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWaypointList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiWaypointList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypointList *autocxx_gen_this) noexcept {
  void (*FfiWaypointList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypointList *) = ::FfiWaypointList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiWaypointList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiWaypointPair_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypointPair *autocxx_gen_this, ::carla_rust::client::FfiWaypointPair *other) noexcept {
  void (*carla_rust_client_FfiWaypointPair_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypointPair *, ::carla_rust::client::FfiWaypointPair *) = ::carla_rust_client_FfiWaypointPair_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWaypointPair_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_client_FfiWaypointPair_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypointPair *autocxx_gen_this, ::carla_rust::client::FfiWaypointPair const &other) noexcept {
  void (*carla_rust_client_FfiWaypointPair_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypointPair *, ::carla_rust::client::FfiWaypointPair const &) = ::carla_rust_client_FfiWaypointPair_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWaypointPair_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiWaypointPair_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypointPair *autocxx_gen_this) noexcept {
  void (*FfiWaypointPair_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypointPair *) = ::FfiWaypointPair_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiWaypointPair_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiJunction_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiJunction *autocxx_gen_this) noexcept {
  void (*FfiJunction_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiJunction *) = ::FfiJunction_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiJunction_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiLandmarkList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmarkList *autocxx_gen_this, ::carla_rust::client::FfiLandmarkList *other) noexcept {
  void (*carla_rust_client_FfiLandmarkList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmarkList *, ::carla_rust::client::FfiLandmarkList *) = ::carla_rust_client_FfiLandmarkList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLandmarkList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_client_FfiLandmarkList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmarkList *autocxx_gen_this, ::carla_rust::client::FfiLandmarkList const &other) noexcept {
  void (*carla_rust_client_FfiLandmarkList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmarkList *, ::carla_rust::client::FfiLandmarkList const &) = ::carla_rust_client_FfiLandmarkList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLandmarkList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiLandmarkList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmarkList *autocxx_gen_this) noexcept {
  void (*FfiLandmarkList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmarkList *) = ::FfiLandmarkList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLandmarkList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiWaypoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWaypoint *autocxx_gen_this) noexcept {
  void (*FfiWaypoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWaypoint *) = ::FfiWaypoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiWaypoint_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiLandmark_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLandmark *autocxx_gen_this) noexcept {
  void (*FfiLandmark_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLandmark *) = ::FfiLandmark_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLandmark_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiTransformList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTransformList *autocxx_gen_this, ::carla_rust::client::FfiTransformList *other) noexcept {
  void (*carla_rust_client_FfiTransformList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTransformList *, ::carla_rust::client::FfiTransformList *) = ::carla_rust_client_FfiTransformList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiTransformList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiTransformList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTransformList *autocxx_gen_this) noexcept {
  void (*FfiTransformList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTransformList *) = ::FfiTransformList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiTransformList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiMap_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiMap *autocxx_gen_this) noexcept {
  void (*FfiMap_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiMap *) = ::FfiMap_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiMap_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiTrafficSign_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficSign *autocxx_gen_this) noexcept {
  void (*FfiTrafficSign_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficSign *) = ::FfiTrafficSign_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiTrafficSign_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiVehicle_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiVehicle *autocxx_gen_this) noexcept {
  void (*FfiVehicle_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiVehicle *) = ::FfiVehicle_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiVehicle_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiSensor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiSensor *autocxx_gen_this) noexcept {
  void (*FfiSensor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiSensor *) = ::FfiSensor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiSensor_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiBlueprintLibrary_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiBlueprintLibrary *autocxx_gen_this) noexcept {
  void (*FfiBlueprintLibrary_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiBlueprintLibrary *) = ::FfiBlueprintLibrary_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiBlueprintLibrary_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiActorList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorList *autocxx_gen_this) noexcept {
  void (*FfiActorList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorList *) = ::FfiActorList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiActorList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiBoundingBoxList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiBoundingBoxList *autocxx_gen_this, ::carla_rust::client::FfiBoundingBoxList *other) noexcept {
  void (*carla_rust_client_FfiBoundingBoxList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiBoundingBoxList *, ::carla_rust::client::FfiBoundingBoxList *) = ::carla_rust_client_FfiBoundingBoxList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiBoundingBoxList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiBoundingBoxList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiBoundingBoxList *autocxx_gen_this) noexcept {
  void (*FfiBoundingBoxList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiBoundingBoxList *) = ::FfiBoundingBoxList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiBoundingBoxList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiLabelledPointList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLabelledPointList *autocxx_gen_this, ::carla_rust::client::FfiLabelledPointList *other) noexcept {
  void (*carla_rust_client_FfiLabelledPointList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLabelledPointList *, ::carla_rust::client::FfiLabelledPointList *) = ::carla_rust_client_FfiLabelledPointList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLabelledPointList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiLabelledPointList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLabelledPointList *autocxx_gen_this) noexcept {
  void (*FfiLabelledPointList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLabelledPointList *) = ::FfiLabelledPointList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLabelledPointList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiEnvironmentObjectList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiEnvironmentObjectList *autocxx_gen_this, ::carla_rust::client::FfiEnvironmentObjectList *other) noexcept {
  void (*carla_rust_client_FfiEnvironmentObjectList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiEnvironmentObjectList *, ::carla_rust::client::FfiEnvironmentObjectList *) = ::carla_rust_client_FfiEnvironmentObjectList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiEnvironmentObjectList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiEnvironmentObjectList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiEnvironmentObjectList *autocxx_gen_this) noexcept {
  void (*FfiEnvironmentObjectList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiEnvironmentObjectList *) = ::FfiEnvironmentObjectList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiEnvironmentObjectList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiActorVec_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorVec *autocxx_gen_this, ::carla_rust::client::FfiActorVec *other) noexcept {
  void (*carla_rust_client_FfiActorVec_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorVec *, ::carla_rust::client::FfiActorVec *) = ::carla_rust_client_FfiActorVec_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActorVec_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_client_FfiActorVec_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorVec *autocxx_gen_this, ::carla_rust::client::FfiActorVec const &other) noexcept {
  void (*carla_rust_client_FfiActorVec_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorVec *, ::carla_rust::client::FfiActorVec const &) = ::carla_rust_client_FfiActorVec_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiActorVec_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiActorVec_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorVec *autocxx_gen_this) noexcept {
  void (*FfiActorVec_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorVec *) = ::FfiActorVec_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiActorVec_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiWorldSnapshot_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorldSnapshot *autocxx_gen_this, ::carla_rust::client::FfiWorldSnapshot *other) noexcept {
  void (*carla_rust_client_FfiWorldSnapshot_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorldSnapshot *, ::carla_rust::client::FfiWorldSnapshot *) = ::carla_rust_client_FfiWorldSnapshot_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorldSnapshot_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_client_FfiWorldSnapshot_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorldSnapshot *autocxx_gen_this, ::carla_rust::client::FfiWorldSnapshot const &other) noexcept {
  void (*carla_rust_client_FfiWorldSnapshot_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorldSnapshot *, ::carla_rust::client::FfiWorldSnapshot const &) = ::carla_rust_client_FfiWorldSnapshot_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiWorldSnapshot_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiWorldSnapshot_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorldSnapshot *autocxx_gen_this) noexcept {
  void (*FfiWorldSnapshot_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorldSnapshot *) = ::FfiWorldSnapshot_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiWorldSnapshot_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiClientLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClientLightState *autocxx_gen_this, ::carla_rust::client::FfiClientLightState *other) noexcept {
  void (*carla_rust_client_FfiClientLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClientLightState *, ::carla_rust::client::FfiClientLightState *) = ::carla_rust_client_FfiClientLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiClientLightState_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_client_FfiClientLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClientLightState *autocxx_gen_this, ::carla_rust::client::FfiClientLightState const &other) noexcept {
  void (*carla_rust_client_FfiClientLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClientLightState *, ::carla_rust::client::FfiClientLightState const &) = ::carla_rust_client_FfiClientLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiClientLightState_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiClientLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClientLightState *autocxx_gen_this) noexcept {
  void (*FfiClientLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClientLightState *) = ::FfiClientLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiClientLightState_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiLightRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef *autocxx_gen_this, ::carla_rust::client::FfiLightRef *other) noexcept {
  void (*carla_rust_client_FfiLightRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef *, ::carla_rust::client::FfiLightRef *) = ::carla_rust_client_FfiLightRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightRef_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_client_FfiLightRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef *autocxx_gen_this, ::carla_rust::client::FfiLightRef const &other) noexcept {
  void (*carla_rust_client_FfiLightRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef *, ::carla_rust::client::FfiLightRef const &) = ::carla_rust_client_FfiLightRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightRef_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiLightRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightRef *autocxx_gen_this) noexcept {
  void (*FfiLightRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightRef *) = ::FfiLightRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLightRef_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiLightList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightList *autocxx_gen_this, ::carla_rust::client::FfiLightList *other) noexcept {
  void (*carla_rust_client_FfiLightList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightList *, ::carla_rust::client::FfiLightList *) = ::carla_rust_client_FfiLightList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiLightList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiLightList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightList *autocxx_gen_this) noexcept {
  void (*FfiLightList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightList *) = ::FfiLightList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLightList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiLightManager_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiLightManager *autocxx_gen_this) noexcept {
  void (*FfiLightManager_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiLightManager *) = ::FfiLightManager_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLightManager_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiClient_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient *autocxx_gen_this, ::carla_rust::client::FfiClient *other) noexcept {
  void (*carla_rust_client_FfiClient_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient *, ::carla_rust::client::FfiClient *) = ::carla_rust_client_FfiClient_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiClient_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_client_FfiClient_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient *autocxx_gen_this, ::carla_rust::client::FfiClient const &other) noexcept {
  void (*carla_rust_client_FfiClient_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient *, ::carla_rust::client::FfiClient const &) = ::carla_rust_client_FfiClient_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiClient_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiClient_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiClient *autocxx_gen_this) noexcept {
  void (*FfiClient_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiClient *) = ::FfiClient_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiClient_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_client_FfiTrafficLightList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLightList *autocxx_gen_this, ::carla_rust::client::FfiTrafficLightList *other) noexcept {
  void (*carla_rust_client_FfiTrafficLightList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLightList *, ::carla_rust::client::FfiTrafficLightList *) = ::carla_rust_client_FfiTrafficLightList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiTrafficLightList_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_client_FfiTrafficLightList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLightList *autocxx_gen_this, ::carla_rust::client::FfiTrafficLightList const &other) noexcept {
  void (*carla_rust_client_FfiTrafficLightList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLightList *, ::carla_rust::client::FfiTrafficLightList const &) = ::carla_rust_client_FfiTrafficLightList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_client_FfiTrafficLightList_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiTrafficLightList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLightList *autocxx_gen_this) noexcept {
  void (*FfiTrafficLightList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLightList *) = ::FfiTrafficLightList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiTrafficLightList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiTrafficLight_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiTrafficLight *autocxx_gen_this) noexcept {
  void (*FfiTrafficLight_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiTrafficLight *) = ::FfiTrafficLight_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiTrafficLight_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_traffic_manager_FfiActionBuffer_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiActionBuffer *autocxx_gen_this, ::carla_rust::traffic_manager::FfiActionBuffer *other) noexcept {
  void (*carla_rust_traffic_manager_FfiActionBuffer_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiActionBuffer *, ::carla_rust::traffic_manager::FfiActionBuffer *) = ::carla_rust_traffic_manager_FfiActionBuffer_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiActionBuffer_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiActionBuffer_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiActionBuffer *autocxx_gen_this) noexcept {
  void (*FfiActionBuffer_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiActionBuffer *) = ::FfiActionBuffer_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiActionBuffer_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager *autocxx_gen_this, ::carla_rust::traffic_manager::FfiTrafficManager *other) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager *, ::carla_rust::traffic_manager::FfiTrafficManager *) = ::carla_rust_traffic_manager_FfiTrafficManager_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_traffic_manager_FfiTrafficManager_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager *autocxx_gen_this, ::carla_rust::traffic_manager::FfiTrafficManager const &other) noexcept {
  void (*carla_rust_traffic_manager_FfiTrafficManager_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager *, ::carla_rust::traffic_manager::FfiTrafficManager const &) = ::carla_rust_traffic_manager_FfiTrafficManager_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_traffic_manager_FfiTrafficManager_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiTrafficManager_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiTrafficManager *autocxx_gen_this) noexcept {
  void (*FfiTrafficManager_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiTrafficManager *) = ::FfiTrafficManager_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiTrafficManager_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_geom_MeshFactory_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshFactory *autocxx_gen_this, ::carla::geom::MeshFactory *other) noexcept {
  void (*carla_geom_MeshFactory_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshFactory *, ::carla::geom::MeshFactory *) = ::carla_geom_MeshFactory_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_MeshFactory_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_geom_MeshFactory_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshFactory *autocxx_gen_this, ::carla::geom::MeshFactory const &other) noexcept {
  void (*carla_geom_MeshFactory_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshFactory *, ::carla::geom::MeshFactory const &) = ::carla_geom_MeshFactory_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_geom_MeshFactory_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$MeshFactory_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::geom::MeshFactory *autocxx_gen_this) noexcept {
  void (*MeshFactory_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::geom::MeshFactory *) = ::MeshFactory_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  MeshFactory_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$Vehicle_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Vehicle *autocxx_gen_this) noexcept {
  void (*Vehicle_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Vehicle *) = ::Vehicle_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  Vehicle_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$TrafficSign_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::TrafficSign *autocxx_gen_this) noexcept {
  void (*TrafficSign_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::TrafficSign *) = ::TrafficSign_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  TrafficSign_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$TrafficLight_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::TrafficLight *autocxx_gen_this) noexcept {
  void (*TrafficLight_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::TrafficLight *) = ::TrafficLight_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  TrafficLight_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$Walker_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::Walker *autocxx_gen_this) noexcept {
  void (*Walker_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::Walker *) = ::Walker_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  Walker_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$ActorList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorList *autocxx_gen_this) noexcept {
  void (*ActorList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorList *) = ::ActorList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  ActorList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiActorAttributeValueList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiActorAttributeValueList *autocxx_gen_this) noexcept {
  void (*FfiActorAttributeValueList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiActorAttributeValueList *) = ::FfiActorAttributeValueList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiActorAttributeValueList_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiWorld_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::client::FfiWorld *autocxx_gen_this) noexcept {
  void (*FfiWorld_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::client::FfiWorld *) = ::FfiWorld_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiWorld_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$carla_rust_road_element_FfiLaneMarking_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::road::element::FfiLaneMarking *autocxx_gen_this, ::carla_rust::road::element::FfiLaneMarking *other) noexcept {
  void (*carla_rust_road_element_FfiLaneMarking_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::road::element::FfiLaneMarking *, ::carla_rust::road::element::FfiLaneMarking *) = ::carla_rust_road_element_FfiLaneMarking_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_road_element_FfiLaneMarking_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rust_road_element_FfiLaneMarking_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::road::element::FfiLaneMarking *autocxx_gen_this, ::carla_rust::road::element::FfiLaneMarking const &other) noexcept {
  void (*carla_rust_road_element_FfiLaneMarking_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::road::element::FfiLaneMarking *, ::carla_rust::road::element::FfiLaneMarking const &) = ::carla_rust_road_element_FfiLaneMarking_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rust_road_element_FfiLaneMarking_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$FfiLaneMarking_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::road::element::FfiLaneMarking *autocxx_gen_this) noexcept {
  void (*FfiLaneMarking_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::road::element::FfiLaneMarking *) = ::FfiLaneMarking_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiLaneMarking_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$FfiAction_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla_rust::traffic_manager::FfiAction *autocxx_gen_this) noexcept {
  void (*FfiAction_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla_rust::traffic_manager::FfiAction *) = ::FfiAction_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  FfiAction_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$IMUMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::IMUMeasurement *autocxx_gen_this) noexcept {
  void (*IMUMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::IMUMeasurement *) = ::IMUMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  IMUMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

void cxxbridge1$GnssMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::data::GnssMeasurement *autocxx_gen_this) noexcept {
  void (*GnssMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::data::GnssMeasurement *) = ::GnssMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  GnssMeasurement_synthetic_destructor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this);
}

::carla::road::Road *cxxbridge1$Road_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::road::Road *(*Road_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::Road_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return Road_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$Road_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::road::Road *arg0) noexcept {
  void (*Road_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::road::Road *) = ::Road_free_autocxx_wrapper_0xd539d5a17acbdd25;
  Road_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::road::LaneSection *cxxbridge1$LaneSection_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::road::LaneSection *(*LaneSection_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::LaneSection_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return LaneSection_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$LaneSection_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::road::LaneSection *arg0) noexcept {
  void (*LaneSection_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::road::LaneSection *) = ::LaneSection_free_autocxx_wrapper_0xd539d5a17acbdd25;
  LaneSection_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::road::Lane *cxxbridge1$Lane_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::road::Lane *(*Lane_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::Lane_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return Lane_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$Lane_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::road::Lane *arg0) noexcept {
  void (*Lane_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::road::Lane *) = ::Lane_free_autocxx_wrapper_0xd539d5a17acbdd25;
  Lane_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::sensor::RawData *cxxbridge1$RawData_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::sensor::RawData *(*RawData_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::RawData_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return RawData_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$RawData_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::RawData *arg0) noexcept {
  void (*RawData_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::RawData *) = ::RawData_free_autocxx_wrapper_0xd539d5a17acbdd25;
  RawData_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_sensor_RawData_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::sensor::RawData *autocxx_gen_this, ::carla::sensor::RawData *other) noexcept {
  void (*carla_sensor_RawData_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::sensor::RawData *, ::carla::sensor::RawData *) = ::carla_sensor_RawData_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_sensor_RawData_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

::carla::road::LaneValidity *cxxbridge1$LaneValidity_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::road::LaneValidity *(*LaneValidity_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::LaneValidity_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return LaneValidity_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$LaneValidity_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::road::LaneValidity *arg0) noexcept {
  void (*LaneValidity_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::road::LaneValidity *) = ::LaneValidity_free_autocxx_wrapper_0xd539d5a17acbdd25;
  LaneValidity_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_road_LaneValidity_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::road::LaneValidity *autocxx_gen_this, ::carla::road::LaneValidity *other) noexcept {
  void (*carla_road_LaneValidity_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::road::LaneValidity *, ::carla::road::LaneValidity *) = ::carla_road_LaneValidity_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_road_LaneValidity_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_road_LaneValidity_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::road::LaneValidity *autocxx_gen_this, ::carla::road::LaneValidity const &other) noexcept {
  void (*carla_road_LaneValidity_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::road::LaneValidity *, ::carla::road::LaneValidity const &) = ::carla_road_LaneValidity_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_road_LaneValidity_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

::carla::client::detail::EpisodeState *cxxbridge1$EpisodeState_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::detail::EpisodeState *(*EpisodeState_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::EpisodeState_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return EpisodeState_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$EpisodeState_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::detail::EpisodeState *arg0) noexcept {
  void (*EpisodeState_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::detail::EpisodeState *) = ::EpisodeState_free_autocxx_wrapper_0xd539d5a17acbdd25;
  EpisodeState_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::rpc::VehiclePhysicsControl *cxxbridge1$VehiclePhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::VehiclePhysicsControl *(*VehiclePhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::VehiclePhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return VehiclePhysicsControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$VehiclePhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehiclePhysicsControl *arg0) noexcept {
  void (*VehiclePhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehiclePhysicsControl *) = ::VehiclePhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25;
  VehiclePhysicsControl_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_rpc_VehiclePhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::VehiclePhysicsControl *autocxx_gen_this, ::carla::rpc::VehiclePhysicsControl *other) noexcept {
  void (*carla_rpc_VehiclePhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::VehiclePhysicsControl *, ::carla::rpc::VehiclePhysicsControl *) = ::carla_rpc_VehiclePhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_VehiclePhysicsControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

::carla::client::ActorInitializer *cxxbridge1$ActorInitializer_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::ActorInitializer *(*ActorInitializer_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::ActorInitializer_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return ActorInitializer_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$ActorInitializer_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorInitializer *arg0) noexcept {
  void (*ActorInitializer_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorInitializer *) = ::ActorInitializer_free_autocxx_wrapper_0xd539d5a17acbdd25;
  ActorInitializer_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_client_ActorInitializer_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::ActorInitializer *autocxx_gen_this, ::carla::client::ActorInitializer *arg1) noexcept {
  void (*carla_client_ActorInitializer_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::ActorInitializer *, ::carla::client::ActorInitializer *) = ::carla_client_ActorInitializer_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_ActorInitializer_new_autocxx_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, arg1);
}

::carla::rpc::WalkerControl *cxxbridge1$WalkerControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::WalkerControl *(*WalkerControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::WalkerControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return WalkerControl_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$WalkerControl_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WalkerControl *arg0) noexcept {
  void (*WalkerControl_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WalkerControl *) = ::WalkerControl_free_autocxx_wrapper_0xd539d5a17acbdd25;
  WalkerControl_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_rpc_WalkerControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WalkerControl *autocxx_gen_this, ::carla::rpc::WalkerControl *other) noexcept {
  void (*carla_rpc_WalkerControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WalkerControl *, ::carla::rpc::WalkerControl *) = ::carla_rpc_WalkerControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_WalkerControl_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_rpc_WalkerControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WalkerControl *autocxx_gen_this, ::carla::rpc::WalkerControl const &other) noexcept {
  void (*carla_rpc_WalkerControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WalkerControl *, ::carla::rpc::WalkerControl const &) = ::carla_rpc_WalkerControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_WalkerControl_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

::carla::rpc::WalkerBoneControlOut *cxxbridge1$WalkerBoneControlOut_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::WalkerBoneControlOut *(*WalkerBoneControlOut_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::WalkerBoneControlOut_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return WalkerBoneControlOut_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$WalkerBoneControlOut_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WalkerBoneControlOut *arg0) noexcept {
  void (*WalkerBoneControlOut_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WalkerBoneControlOut *) = ::WalkerBoneControlOut_free_autocxx_wrapper_0xd539d5a17acbdd25;
  WalkerBoneControlOut_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_rpc_WalkerBoneControlOut_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WalkerBoneControlOut *autocxx_gen_this, ::carla::rpc::WalkerBoneControlOut *other) noexcept {
  void (*carla_rpc_WalkerBoneControlOut_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WalkerBoneControlOut *, ::carla::rpc::WalkerBoneControlOut *) = ::carla_rpc_WalkerBoneControlOut_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_WalkerBoneControlOut_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

::carla::rpc::WalkerBoneControlIn *cxxbridge1$WalkerBoneControlIn_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::WalkerBoneControlIn *(*WalkerBoneControlIn_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::WalkerBoneControlIn_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return WalkerBoneControlIn_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$WalkerBoneControlIn_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WalkerBoneControlIn *arg0) noexcept {
  void (*WalkerBoneControlIn_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WalkerBoneControlIn *) = ::WalkerBoneControlIn_free_autocxx_wrapper_0xd539d5a17acbdd25;
  WalkerBoneControlIn_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_rpc_WalkerBoneControlIn_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::WalkerBoneControlIn *autocxx_gen_this, ::carla::rpc::WalkerBoneControlIn *other) noexcept {
  void (*carla_rpc_WalkerBoneControlIn_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::WalkerBoneControlIn *, ::carla::rpc::WalkerBoneControlIn *) = ::carla_rpc_WalkerBoneControlIn_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_WalkerBoneControlIn_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

::carla::rpc::ActorDescription *cxxbridge1$ActorDescription_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::ActorDescription *(*ActorDescription_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::ActorDescription_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return ActorDescription_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$ActorDescription_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::ActorDescription *arg0) noexcept {
  void (*ActorDescription_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::ActorDescription *) = ::ActorDescription_free_autocxx_wrapper_0xd539d5a17acbdd25;
  ActorDescription_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_rpc_ActorDescription_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::ActorDescription *autocxx_gen_this, ::carla::rpc::ActorDescription *other) noexcept {
  void (*carla_rpc_ActorDescription_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::ActorDescription *, ::carla::rpc::ActorDescription *) = ::carla_rpc_ActorDescription_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_ActorDescription_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

::carla::rpc::ActorDefinition *cxxbridge1$ActorDefinition_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::ActorDefinition *(*ActorDefinition_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::ActorDefinition_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return ActorDefinition_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$ActorDefinition_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::ActorDefinition *arg0) noexcept {
  void (*ActorDefinition_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::ActorDefinition *) = ::ActorDefinition_free_autocxx_wrapper_0xd539d5a17acbdd25;
  ActorDefinition_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_rpc_ActorDefinition_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::ActorDefinition *autocxx_gen_this, ::carla::rpc::ActorDefinition *other) noexcept {
  void (*carla_rpc_ActorDefinition_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::ActorDefinition *, ::carla::rpc::ActorDefinition *) = ::carla_rpc_ActorDefinition_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_rpc_ActorDefinition_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

::carla::rpc::EnvironmentObject *cxxbridge1$EnvironmentObject_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::rpc::EnvironmentObject *(*EnvironmentObject_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::EnvironmentObject_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return EnvironmentObject_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$EnvironmentObject_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::rpc::EnvironmentObject *arg0) noexcept {
  void (*EnvironmentObject_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::rpc::EnvironmentObject *) = ::EnvironmentObject_free_autocxx_wrapper_0xd539d5a17acbdd25;
  EnvironmentObject_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

::carla::client::World *cxxbridge1$World_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::client::World *(*World_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::World_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return World_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$World_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::World *arg0) noexcept {
  void (*World_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::World *) = ::World_free_autocxx_wrapper_0xd539d5a17acbdd25;
  World_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_client_World_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::World *autocxx_gen_this, ::carla::client::World const &arg1) noexcept {
  void (*carla_client_World_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::World *, ::carla::client::World const &) = ::carla_client_World_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_World_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, arg1);
}

void cxxbridge1$carla_client_World_new2_autocxx_wrapper_0xd539d5a17acbdd25(::carla::client::World *autocxx_gen_this, ::carla::client::World *arg1) noexcept {
  void (*carla_client_World_new2_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::client::World *, ::carla::client::World *) = ::carla_client_World_new2_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_client_World_new2_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, arg1);
}

::carla::road::element::LaneMarking *cxxbridge1$LaneMarking_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::road::element::LaneMarking *(*LaneMarking_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::LaneMarking_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return LaneMarking_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$LaneMarking_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::road::element::LaneMarking *arg0) noexcept {
  void (*LaneMarking_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::road::element::LaneMarking *) = ::LaneMarking_free_autocxx_wrapper_0xd539d5a17acbdd25;
  LaneMarking_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_road_element_LaneMarking_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::road::element::LaneMarking *autocxx_gen_this, ::carla::road::element::LaneMarking *other) noexcept {
  void (*carla_road_element_LaneMarking_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::road::element::LaneMarking *, ::carla::road::element::LaneMarking *) = ::carla_road_element_LaneMarking_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_road_element_LaneMarking_new_synthetic_move_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_road_element_LaneMarking_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25(::carla::road::element::LaneMarking *autocxx_gen_this, ::carla::road::element::LaneMarking const &other) noexcept {
  void (*carla_road_element_LaneMarking_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::road::element::LaneMarking *, ::carla::road::element::LaneMarking const &) = ::carla_road_element_LaneMarking_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_road_element_LaneMarking_new_synthetic_const_copy_ctor_0xd539d5a17acbdd25_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

::carla::traffic_manager::TrafficManager *cxxbridge1$TrafficManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25() noexcept {
  ::carla::traffic_manager::TrafficManager *(*TrafficManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25$)() = ::TrafficManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25;
  return TrafficManager_alloc_autocxx_wrapper_0xd539d5a17acbdd25$();
}

void cxxbridge1$TrafficManager_free_autocxx_wrapper_0xd539d5a17acbdd25(::carla::traffic_manager::TrafficManager *arg0) noexcept {
  void (*TrafficManager_free_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::traffic_manager::TrafficManager *) = ::TrafficManager_free_autocxx_wrapper_0xd539d5a17acbdd25;
  TrafficManager_free_autocxx_wrapper_0xd539d5a17acbdd25$(arg0);
}

void cxxbridge1$carla_traffic_manager_TrafficManager_new1_autocxx_wrapper_0xd539d5a17acbdd25(::carla::traffic_manager::TrafficManager *autocxx_gen_this, ::carla::traffic_manager::TrafficManager const &other) noexcept {
  void (*carla_traffic_manager_TrafficManager_new1_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::traffic_manager::TrafficManager *, ::carla::traffic_manager::TrafficManager const &) = ::carla_traffic_manager_TrafficManager_new1_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_traffic_manager_TrafficManager_new1_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, other);
}

void cxxbridge1$carla_traffic_manager_TrafficManager_new3_autocxx_wrapper_0xd539d5a17acbdd25(::carla::traffic_manager::TrafficManager *autocxx_gen_this, ::carla::traffic_manager::TrafficManager *arg1) noexcept {
  void (*carla_traffic_manager_TrafficManager_new3_autocxx_wrapper_0xd539d5a17acbdd25$)(::carla::traffic_manager::TrafficManager *, ::carla::traffic_manager::TrafficManager *) = ::carla_traffic_manager_TrafficManager_new3_autocxx_wrapper_0xd539d5a17acbdd25;
  carla_traffic_manager_TrafficManager_new3_autocxx_wrapper_0xd539d5a17acbdd25$(autocxx_gen_this, arg1);
}

static_assert(::rust::detail::is_complete<::carla::geom::Vector3D>::value, "definition of `::carla::geom::Vector3D` is required");
static_assert(sizeof(::std::unique_ptr<::carla::geom::Vector3D>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::geom::Vector3D>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$geom$Vector3D$null(::std::unique_ptr<::carla::geom::Vector3D> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::Vector3D>();
}
::carla::geom::Vector3D *cxxbridge1$unique_ptr$carla$geom$Vector3D$uninit(::std::unique_ptr<::carla::geom::Vector3D> *ptr) noexcept {
  ::carla::geom::Vector3D *uninit = reinterpret_cast<::carla::geom::Vector3D *>(new ::rust::MaybeUninit<::carla::geom::Vector3D>);
  ::new (ptr) ::std::unique_ptr<::carla::geom::Vector3D>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$geom$Vector3D$raw(::std::unique_ptr<::carla::geom::Vector3D> *ptr, ::carla::geom::Vector3D *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::Vector3D>(raw);
}
::carla::geom::Vector3D const *cxxbridge1$unique_ptr$carla$geom$Vector3D$get(::std::unique_ptr<::carla::geom::Vector3D> const &ptr) noexcept {
  return ptr.get();
}
::carla::geom::Vector3D *cxxbridge1$unique_ptr$carla$geom$Vector3D$release(::std::unique_ptr<::carla::geom::Vector3D> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$geom$Vector3D$drop(::std::unique_ptr<::carla::geom::Vector3D> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::geom::Vector3D>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::geom::Vector3D>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::geom::Vector3D>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$geom$Vector3D$null(::std::shared_ptr<::carla::geom::Vector3D> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::Vector3D>();
}
::carla::geom::Vector3D *cxxbridge1$shared_ptr$carla$geom$Vector3D$uninit(::std::shared_ptr<::carla::geom::Vector3D> *ptr) noexcept {
  ::carla::geom::Vector3D *uninit = reinterpret_cast<::carla::geom::Vector3D *>(new ::rust::MaybeUninit<::carla::geom::Vector3D>);
  ::new (ptr) ::std::shared_ptr<::carla::geom::Vector3D>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$geom$Vector3D$clone(::std::shared_ptr<::carla::geom::Vector3D> const &self, ::std::shared_ptr<::carla::geom::Vector3D> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::Vector3D>(self);
}
::carla::geom::Vector3D const *cxxbridge1$shared_ptr$carla$geom$Vector3D$get(::std::shared_ptr<::carla::geom::Vector3D> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$geom$Vector3D$drop(::std::shared_ptr<::carla::geom::Vector3D> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::geom::Vector3D>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::geom::Vector3D>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$geom$Vector3D$null(::std::weak_ptr<::carla::geom::Vector3D> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::Vector3D>();
}
void cxxbridge1$weak_ptr$carla$geom$Vector3D$clone(::std::weak_ptr<::carla::geom::Vector3D> const &self, ::std::weak_ptr<::carla::geom::Vector3D> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::Vector3D>(self);
}
void cxxbridge1$weak_ptr$carla$geom$Vector3D$downgrade(::std::shared_ptr<::carla::geom::Vector3D> const &shared, ::std::weak_ptr<::carla::geom::Vector3D> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::geom::Vector3D>(shared);
}
void cxxbridge1$weak_ptr$carla$geom$Vector3D$upgrade(::std::weak_ptr<::carla::geom::Vector3D> const &weak, ::std::shared_ptr<::carla::geom::Vector3D> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::geom::Vector3D>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$geom$Vector3D$drop(::std::weak_ptr<::carla::geom::Vector3D> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::geom::Vector3D> *cxxbridge1$std$vector$carla$geom$Vector3D$new() noexcept {
  return new ::std::vector<::carla::geom::Vector3D>();
}
::std::size_t cxxbridge1$std$vector$carla$geom$Vector3D$size(::std::vector<::carla::geom::Vector3D> const &s) noexcept {
  return s.size();
}
::carla::geom::Vector3D *cxxbridge1$std$vector$carla$geom$Vector3D$get_unchecked(::std::vector<::carla::geom::Vector3D> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$geom$Vector3D$push_back(::std::vector<::carla::geom::Vector3D> *v, ::carla::geom::Vector3D *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$geom$Vector3D$pop_back(::std::vector<::carla::geom::Vector3D> *v, ::carla::geom::Vector3D *out) noexcept {
  ::new (out) ::carla::geom::Vector3D(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::geom::Vector3D>>::value, "definition of `::std::vector<::carla::geom::Vector3D>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::geom::Vector3D>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::geom::Vector3D>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$geom$Vector3D$null(::std::unique_ptr<::std::vector<::carla::geom::Vector3D>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::Vector3D>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$Vector3D$raw(::std::unique_ptr<::std::vector<::carla::geom::Vector3D>> *ptr, ::std::vector<::carla::geom::Vector3D> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::Vector3D>>(raw);
}
::std::vector<::carla::geom::Vector3D> const *cxxbridge1$unique_ptr$std$vector$carla$geom$Vector3D$get(::std::unique_ptr<::std::vector<::carla::geom::Vector3D>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::geom::Vector3D> *cxxbridge1$unique_ptr$std$vector$carla$geom$Vector3D$release(::std::unique_ptr<::std::vector<::carla::geom::Vector3D>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$Vector3D$drop(::std::unique_ptr<::std::vector<::carla::geom::Vector3D>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::geom::Vector3D>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::geom::Vector3DInt>::value, "definition of `::carla::geom::Vector3DInt` is required");
static_assert(sizeof(::std::unique_ptr<::carla::geom::Vector3DInt>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::geom::Vector3DInt>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$geom$Vector3DInt$null(::std::unique_ptr<::carla::geom::Vector3DInt> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::Vector3DInt>();
}
::carla::geom::Vector3DInt *cxxbridge1$unique_ptr$carla$geom$Vector3DInt$uninit(::std::unique_ptr<::carla::geom::Vector3DInt> *ptr) noexcept {
  ::carla::geom::Vector3DInt *uninit = reinterpret_cast<::carla::geom::Vector3DInt *>(new ::rust::MaybeUninit<::carla::geom::Vector3DInt>);
  ::new (ptr) ::std::unique_ptr<::carla::geom::Vector3DInt>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$geom$Vector3DInt$raw(::std::unique_ptr<::carla::geom::Vector3DInt> *ptr, ::carla::geom::Vector3DInt *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::Vector3DInt>(raw);
}
::carla::geom::Vector3DInt const *cxxbridge1$unique_ptr$carla$geom$Vector3DInt$get(::std::unique_ptr<::carla::geom::Vector3DInt> const &ptr) noexcept {
  return ptr.get();
}
::carla::geom::Vector3DInt *cxxbridge1$unique_ptr$carla$geom$Vector3DInt$release(::std::unique_ptr<::carla::geom::Vector3DInt> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$geom$Vector3DInt$drop(::std::unique_ptr<::carla::geom::Vector3DInt> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::geom::Vector3DInt>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::geom::Vector3DInt>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::geom::Vector3DInt>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$geom$Vector3DInt$null(::std::shared_ptr<::carla::geom::Vector3DInt> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::Vector3DInt>();
}
::carla::geom::Vector3DInt *cxxbridge1$shared_ptr$carla$geom$Vector3DInt$uninit(::std::shared_ptr<::carla::geom::Vector3DInt> *ptr) noexcept {
  ::carla::geom::Vector3DInt *uninit = reinterpret_cast<::carla::geom::Vector3DInt *>(new ::rust::MaybeUninit<::carla::geom::Vector3DInt>);
  ::new (ptr) ::std::shared_ptr<::carla::geom::Vector3DInt>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$geom$Vector3DInt$clone(::std::shared_ptr<::carla::geom::Vector3DInt> const &self, ::std::shared_ptr<::carla::geom::Vector3DInt> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::Vector3DInt>(self);
}
::carla::geom::Vector3DInt const *cxxbridge1$shared_ptr$carla$geom$Vector3DInt$get(::std::shared_ptr<::carla::geom::Vector3DInt> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$geom$Vector3DInt$drop(::std::shared_ptr<::carla::geom::Vector3DInt> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::geom::Vector3DInt>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::geom::Vector3DInt>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$geom$Vector3DInt$null(::std::weak_ptr<::carla::geom::Vector3DInt> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::Vector3DInt>();
}
void cxxbridge1$weak_ptr$carla$geom$Vector3DInt$clone(::std::weak_ptr<::carla::geom::Vector3DInt> const &self, ::std::weak_ptr<::carla::geom::Vector3DInt> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::Vector3DInt>(self);
}
void cxxbridge1$weak_ptr$carla$geom$Vector3DInt$downgrade(::std::shared_ptr<::carla::geom::Vector3DInt> const &shared, ::std::weak_ptr<::carla::geom::Vector3DInt> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::geom::Vector3DInt>(shared);
}
void cxxbridge1$weak_ptr$carla$geom$Vector3DInt$upgrade(::std::weak_ptr<::carla::geom::Vector3DInt> const &weak, ::std::shared_ptr<::carla::geom::Vector3DInt> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::geom::Vector3DInt>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$geom$Vector3DInt$drop(::std::weak_ptr<::carla::geom::Vector3DInt> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::geom::Vector3DInt> *cxxbridge1$std$vector$carla$geom$Vector3DInt$new() noexcept {
  return new ::std::vector<::carla::geom::Vector3DInt>();
}
::std::size_t cxxbridge1$std$vector$carla$geom$Vector3DInt$size(::std::vector<::carla::geom::Vector3DInt> const &s) noexcept {
  return s.size();
}
::carla::geom::Vector3DInt *cxxbridge1$std$vector$carla$geom$Vector3DInt$get_unchecked(::std::vector<::carla::geom::Vector3DInt> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$geom$Vector3DInt$push_back(::std::vector<::carla::geom::Vector3DInt> *v, ::carla::geom::Vector3DInt *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$geom$Vector3DInt$pop_back(::std::vector<::carla::geom::Vector3DInt> *v, ::carla::geom::Vector3DInt *out) noexcept {
  ::new (out) ::carla::geom::Vector3DInt(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::geom::Vector3DInt>>::value, "definition of `::std::vector<::carla::geom::Vector3DInt>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::geom::Vector3DInt>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::geom::Vector3DInt>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$geom$Vector3DInt$null(::std::unique_ptr<::std::vector<::carla::geom::Vector3DInt>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::Vector3DInt>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$Vector3DInt$raw(::std::unique_ptr<::std::vector<::carla::geom::Vector3DInt>> *ptr, ::std::vector<::carla::geom::Vector3DInt> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::Vector3DInt>>(raw);
}
::std::vector<::carla::geom::Vector3DInt> const *cxxbridge1$unique_ptr$std$vector$carla$geom$Vector3DInt$get(::std::unique_ptr<::std::vector<::carla::geom::Vector3DInt>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::geom::Vector3DInt> *cxxbridge1$unique_ptr$std$vector$carla$geom$Vector3DInt$release(::std::unique_ptr<::std::vector<::carla::geom::Vector3DInt>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$Vector3DInt$drop(::std::unique_ptr<::std::vector<::carla::geom::Vector3DInt>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::geom::Vector3DInt>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::geom::Math>::value, "definition of `::carla::geom::Math` is required");
static_assert(sizeof(::std::unique_ptr<::carla::geom::Math>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::geom::Math>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$geom$Math$null(::std::unique_ptr<::carla::geom::Math> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::Math>();
}
::carla::geom::Math *cxxbridge1$unique_ptr$carla$geom$Math$uninit(::std::unique_ptr<::carla::geom::Math> *ptr) noexcept {
  ::carla::geom::Math *uninit = reinterpret_cast<::carla::geom::Math *>(new ::rust::MaybeUninit<::carla::geom::Math>);
  ::new (ptr) ::std::unique_ptr<::carla::geom::Math>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$geom$Math$raw(::std::unique_ptr<::carla::geom::Math> *ptr, ::carla::geom::Math *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::Math>(raw);
}
::carla::geom::Math const *cxxbridge1$unique_ptr$carla$geom$Math$get(::std::unique_ptr<::carla::geom::Math> const &ptr) noexcept {
  return ptr.get();
}
::carla::geom::Math *cxxbridge1$unique_ptr$carla$geom$Math$release(::std::unique_ptr<::carla::geom::Math> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$geom$Math$drop(::std::unique_ptr<::carla::geom::Math> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::geom::Math>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::geom::Math>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::geom::Math>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$geom$Math$null(::std::shared_ptr<::carla::geom::Math> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::Math>();
}
::carla::geom::Math *cxxbridge1$shared_ptr$carla$geom$Math$uninit(::std::shared_ptr<::carla::geom::Math> *ptr) noexcept {
  ::carla::geom::Math *uninit = reinterpret_cast<::carla::geom::Math *>(new ::rust::MaybeUninit<::carla::geom::Math>);
  ::new (ptr) ::std::shared_ptr<::carla::geom::Math>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$geom$Math$clone(::std::shared_ptr<::carla::geom::Math> const &self, ::std::shared_ptr<::carla::geom::Math> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::Math>(self);
}
::carla::geom::Math const *cxxbridge1$shared_ptr$carla$geom$Math$get(::std::shared_ptr<::carla::geom::Math> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$geom$Math$drop(::std::shared_ptr<::carla::geom::Math> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::geom::Math>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::geom::Math>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$geom$Math$null(::std::weak_ptr<::carla::geom::Math> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::Math>();
}
void cxxbridge1$weak_ptr$carla$geom$Math$clone(::std::weak_ptr<::carla::geom::Math> const &self, ::std::weak_ptr<::carla::geom::Math> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::Math>(self);
}
void cxxbridge1$weak_ptr$carla$geom$Math$downgrade(::std::shared_ptr<::carla::geom::Math> const &shared, ::std::weak_ptr<::carla::geom::Math> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::geom::Math>(shared);
}
void cxxbridge1$weak_ptr$carla$geom$Math$upgrade(::std::weak_ptr<::carla::geom::Math> const &weak, ::std::shared_ptr<::carla::geom::Math> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::geom::Math>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$geom$Math$drop(::std::weak_ptr<::carla::geom::Math> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::geom::Math> *cxxbridge1$std$vector$carla$geom$Math$new() noexcept {
  return new ::std::vector<::carla::geom::Math>();
}
::std::size_t cxxbridge1$std$vector$carla$geom$Math$size(::std::vector<::carla::geom::Math> const &s) noexcept {
  return s.size();
}
::carla::geom::Math *cxxbridge1$std$vector$carla$geom$Math$get_unchecked(::std::vector<::carla::geom::Math> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$geom$Math$push_back(::std::vector<::carla::geom::Math> *v, ::carla::geom::Math *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$geom$Math$pop_back(::std::vector<::carla::geom::Math> *v, ::carla::geom::Math *out) noexcept {
  ::new (out) ::carla::geom::Math(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::geom::Math>>::value, "definition of `::std::vector<::carla::geom::Math>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::geom::Math>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::geom::Math>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$geom$Math$null(::std::unique_ptr<::std::vector<::carla::geom::Math>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::Math>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$Math$raw(::std::unique_ptr<::std::vector<::carla::geom::Math>> *ptr, ::std::vector<::carla::geom::Math> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::Math>>(raw);
}
::std::vector<::carla::geom::Math> const *cxxbridge1$unique_ptr$std$vector$carla$geom$Math$get(::std::unique_ptr<::std::vector<::carla::geom::Math>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::geom::Math> *cxxbridge1$unique_ptr$std$vector$carla$geom$Math$release(::std::unique_ptr<::std::vector<::carla::geom::Math>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$Math$drop(::std::unique_ptr<::std::vector<::carla::geom::Math>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::geom::Math>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::geom::Rotation>::value, "definition of `::carla::geom::Rotation` is required");
static_assert(sizeof(::std::unique_ptr<::carla::geom::Rotation>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::geom::Rotation>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$geom$Rotation$null(::std::unique_ptr<::carla::geom::Rotation> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::Rotation>();
}
::carla::geom::Rotation *cxxbridge1$unique_ptr$carla$geom$Rotation$uninit(::std::unique_ptr<::carla::geom::Rotation> *ptr) noexcept {
  ::carla::geom::Rotation *uninit = reinterpret_cast<::carla::geom::Rotation *>(new ::rust::MaybeUninit<::carla::geom::Rotation>);
  ::new (ptr) ::std::unique_ptr<::carla::geom::Rotation>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$geom$Rotation$raw(::std::unique_ptr<::carla::geom::Rotation> *ptr, ::carla::geom::Rotation *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::Rotation>(raw);
}
::carla::geom::Rotation const *cxxbridge1$unique_ptr$carla$geom$Rotation$get(::std::unique_ptr<::carla::geom::Rotation> const &ptr) noexcept {
  return ptr.get();
}
::carla::geom::Rotation *cxxbridge1$unique_ptr$carla$geom$Rotation$release(::std::unique_ptr<::carla::geom::Rotation> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$geom$Rotation$drop(::std::unique_ptr<::carla::geom::Rotation> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::geom::Rotation>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::geom::Rotation>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::geom::Rotation>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$geom$Rotation$null(::std::shared_ptr<::carla::geom::Rotation> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::Rotation>();
}
::carla::geom::Rotation *cxxbridge1$shared_ptr$carla$geom$Rotation$uninit(::std::shared_ptr<::carla::geom::Rotation> *ptr) noexcept {
  ::carla::geom::Rotation *uninit = reinterpret_cast<::carla::geom::Rotation *>(new ::rust::MaybeUninit<::carla::geom::Rotation>);
  ::new (ptr) ::std::shared_ptr<::carla::geom::Rotation>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$geom$Rotation$clone(::std::shared_ptr<::carla::geom::Rotation> const &self, ::std::shared_ptr<::carla::geom::Rotation> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::Rotation>(self);
}
::carla::geom::Rotation const *cxxbridge1$shared_ptr$carla$geom$Rotation$get(::std::shared_ptr<::carla::geom::Rotation> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$geom$Rotation$drop(::std::shared_ptr<::carla::geom::Rotation> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::geom::Rotation>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::geom::Rotation>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$geom$Rotation$null(::std::weak_ptr<::carla::geom::Rotation> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::Rotation>();
}
void cxxbridge1$weak_ptr$carla$geom$Rotation$clone(::std::weak_ptr<::carla::geom::Rotation> const &self, ::std::weak_ptr<::carla::geom::Rotation> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::Rotation>(self);
}
void cxxbridge1$weak_ptr$carla$geom$Rotation$downgrade(::std::shared_ptr<::carla::geom::Rotation> const &shared, ::std::weak_ptr<::carla::geom::Rotation> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::geom::Rotation>(shared);
}
void cxxbridge1$weak_ptr$carla$geom$Rotation$upgrade(::std::weak_ptr<::carla::geom::Rotation> const &weak, ::std::shared_ptr<::carla::geom::Rotation> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::geom::Rotation>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$geom$Rotation$drop(::std::weak_ptr<::carla::geom::Rotation> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::geom::Rotation> *cxxbridge1$std$vector$carla$geom$Rotation$new() noexcept {
  return new ::std::vector<::carla::geom::Rotation>();
}
::std::size_t cxxbridge1$std$vector$carla$geom$Rotation$size(::std::vector<::carla::geom::Rotation> const &s) noexcept {
  return s.size();
}
::carla::geom::Rotation *cxxbridge1$std$vector$carla$geom$Rotation$get_unchecked(::std::vector<::carla::geom::Rotation> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$geom$Rotation$push_back(::std::vector<::carla::geom::Rotation> *v, ::carla::geom::Rotation *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$geom$Rotation$pop_back(::std::vector<::carla::geom::Rotation> *v, ::carla::geom::Rotation *out) noexcept {
  ::new (out) ::carla::geom::Rotation(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::geom::Rotation>>::value, "definition of `::std::vector<::carla::geom::Rotation>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::geom::Rotation>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::geom::Rotation>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$geom$Rotation$null(::std::unique_ptr<::std::vector<::carla::geom::Rotation>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::Rotation>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$Rotation$raw(::std::unique_ptr<::std::vector<::carla::geom::Rotation>> *ptr, ::std::vector<::carla::geom::Rotation> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::Rotation>>(raw);
}
::std::vector<::carla::geom::Rotation> const *cxxbridge1$unique_ptr$std$vector$carla$geom$Rotation$get(::std::unique_ptr<::std::vector<::carla::geom::Rotation>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::geom::Rotation> *cxxbridge1$unique_ptr$std$vector$carla$geom$Rotation$release(::std::unique_ptr<::std::vector<::carla::geom::Rotation>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$Rotation$drop(::std::unique_ptr<::std::vector<::carla::geom::Rotation>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::geom::Rotation>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::geom::BoundingBox>::value, "definition of `::carla::geom::BoundingBox` is required");
static_assert(sizeof(::std::unique_ptr<::carla::geom::BoundingBox>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::geom::BoundingBox>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$geom$BoundingBox$null(::std::unique_ptr<::carla::geom::BoundingBox> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::BoundingBox>();
}
::carla::geom::BoundingBox *cxxbridge1$unique_ptr$carla$geom$BoundingBox$uninit(::std::unique_ptr<::carla::geom::BoundingBox> *ptr) noexcept {
  ::carla::geom::BoundingBox *uninit = reinterpret_cast<::carla::geom::BoundingBox *>(new ::rust::MaybeUninit<::carla::geom::BoundingBox>);
  ::new (ptr) ::std::unique_ptr<::carla::geom::BoundingBox>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$geom$BoundingBox$raw(::std::unique_ptr<::carla::geom::BoundingBox> *ptr, ::carla::geom::BoundingBox *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::BoundingBox>(raw);
}
::carla::geom::BoundingBox const *cxxbridge1$unique_ptr$carla$geom$BoundingBox$get(::std::unique_ptr<::carla::geom::BoundingBox> const &ptr) noexcept {
  return ptr.get();
}
::carla::geom::BoundingBox *cxxbridge1$unique_ptr$carla$geom$BoundingBox$release(::std::unique_ptr<::carla::geom::BoundingBox> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$geom$BoundingBox$drop(::std::unique_ptr<::carla::geom::BoundingBox> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::geom::BoundingBox>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::geom::BoundingBox>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::geom::BoundingBox>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$geom$BoundingBox$null(::std::shared_ptr<::carla::geom::BoundingBox> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::BoundingBox>();
}
::carla::geom::BoundingBox *cxxbridge1$shared_ptr$carla$geom$BoundingBox$uninit(::std::shared_ptr<::carla::geom::BoundingBox> *ptr) noexcept {
  ::carla::geom::BoundingBox *uninit = reinterpret_cast<::carla::geom::BoundingBox *>(new ::rust::MaybeUninit<::carla::geom::BoundingBox>);
  ::new (ptr) ::std::shared_ptr<::carla::geom::BoundingBox>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$geom$BoundingBox$clone(::std::shared_ptr<::carla::geom::BoundingBox> const &self, ::std::shared_ptr<::carla::geom::BoundingBox> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::BoundingBox>(self);
}
::carla::geom::BoundingBox const *cxxbridge1$shared_ptr$carla$geom$BoundingBox$get(::std::shared_ptr<::carla::geom::BoundingBox> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$geom$BoundingBox$drop(::std::shared_ptr<::carla::geom::BoundingBox> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::geom::BoundingBox>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::geom::BoundingBox>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$geom$BoundingBox$null(::std::weak_ptr<::carla::geom::BoundingBox> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::BoundingBox>();
}
void cxxbridge1$weak_ptr$carla$geom$BoundingBox$clone(::std::weak_ptr<::carla::geom::BoundingBox> const &self, ::std::weak_ptr<::carla::geom::BoundingBox> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::BoundingBox>(self);
}
void cxxbridge1$weak_ptr$carla$geom$BoundingBox$downgrade(::std::shared_ptr<::carla::geom::BoundingBox> const &shared, ::std::weak_ptr<::carla::geom::BoundingBox> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::geom::BoundingBox>(shared);
}
void cxxbridge1$weak_ptr$carla$geom$BoundingBox$upgrade(::std::weak_ptr<::carla::geom::BoundingBox> const &weak, ::std::shared_ptr<::carla::geom::BoundingBox> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::geom::BoundingBox>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$geom$BoundingBox$drop(::std::weak_ptr<::carla::geom::BoundingBox> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::geom::BoundingBox> *cxxbridge1$std$vector$carla$geom$BoundingBox$new() noexcept {
  return new ::std::vector<::carla::geom::BoundingBox>();
}
::std::size_t cxxbridge1$std$vector$carla$geom$BoundingBox$size(::std::vector<::carla::geom::BoundingBox> const &s) noexcept {
  return s.size();
}
::carla::geom::BoundingBox *cxxbridge1$std$vector$carla$geom$BoundingBox$get_unchecked(::std::vector<::carla::geom::BoundingBox> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$geom$BoundingBox$push_back(::std::vector<::carla::geom::BoundingBox> *v, ::carla::geom::BoundingBox *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$geom$BoundingBox$pop_back(::std::vector<::carla::geom::BoundingBox> *v, ::carla::geom::BoundingBox *out) noexcept {
  ::new (out) ::carla::geom::BoundingBox(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::geom::BoundingBox>>::value, "definition of `::std::vector<::carla::geom::BoundingBox>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::geom::BoundingBox>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::geom::BoundingBox>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$geom$BoundingBox$null(::std::unique_ptr<::std::vector<::carla::geom::BoundingBox>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::BoundingBox>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$BoundingBox$raw(::std::unique_ptr<::std::vector<::carla::geom::BoundingBox>> *ptr, ::std::vector<::carla::geom::BoundingBox> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::BoundingBox>>(raw);
}
::std::vector<::carla::geom::BoundingBox> const *cxxbridge1$unique_ptr$std$vector$carla$geom$BoundingBox$get(::std::unique_ptr<::std::vector<::carla::geom::BoundingBox>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::geom::BoundingBox> *cxxbridge1$unique_ptr$std$vector$carla$geom$BoundingBox$release(::std::unique_ptr<::std::vector<::carla::geom::BoundingBox>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$BoundingBox$drop(::std::unique_ptr<::std::vector<::carla::geom::BoundingBox>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::geom::BoundingBox>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::geom::Vector2D>::value, "definition of `::carla::geom::Vector2D` is required");
static_assert(sizeof(::std::unique_ptr<::carla::geom::Vector2D>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::geom::Vector2D>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$geom$Vector2D$null(::std::unique_ptr<::carla::geom::Vector2D> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::Vector2D>();
}
::carla::geom::Vector2D *cxxbridge1$unique_ptr$carla$geom$Vector2D$uninit(::std::unique_ptr<::carla::geom::Vector2D> *ptr) noexcept {
  ::carla::geom::Vector2D *uninit = reinterpret_cast<::carla::geom::Vector2D *>(new ::rust::MaybeUninit<::carla::geom::Vector2D>);
  ::new (ptr) ::std::unique_ptr<::carla::geom::Vector2D>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$geom$Vector2D$raw(::std::unique_ptr<::carla::geom::Vector2D> *ptr, ::carla::geom::Vector2D *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::Vector2D>(raw);
}
::carla::geom::Vector2D const *cxxbridge1$unique_ptr$carla$geom$Vector2D$get(::std::unique_ptr<::carla::geom::Vector2D> const &ptr) noexcept {
  return ptr.get();
}
::carla::geom::Vector2D *cxxbridge1$unique_ptr$carla$geom$Vector2D$release(::std::unique_ptr<::carla::geom::Vector2D> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$geom$Vector2D$drop(::std::unique_ptr<::carla::geom::Vector2D> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::geom::Vector2D>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::geom::Vector2D>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::geom::Vector2D>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$geom$Vector2D$null(::std::shared_ptr<::carla::geom::Vector2D> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::Vector2D>();
}
::carla::geom::Vector2D *cxxbridge1$shared_ptr$carla$geom$Vector2D$uninit(::std::shared_ptr<::carla::geom::Vector2D> *ptr) noexcept {
  ::carla::geom::Vector2D *uninit = reinterpret_cast<::carla::geom::Vector2D *>(new ::rust::MaybeUninit<::carla::geom::Vector2D>);
  ::new (ptr) ::std::shared_ptr<::carla::geom::Vector2D>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$geom$Vector2D$clone(::std::shared_ptr<::carla::geom::Vector2D> const &self, ::std::shared_ptr<::carla::geom::Vector2D> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::Vector2D>(self);
}
::carla::geom::Vector2D const *cxxbridge1$shared_ptr$carla$geom$Vector2D$get(::std::shared_ptr<::carla::geom::Vector2D> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$geom$Vector2D$drop(::std::shared_ptr<::carla::geom::Vector2D> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::geom::Vector2D>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::geom::Vector2D>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$geom$Vector2D$null(::std::weak_ptr<::carla::geom::Vector2D> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::Vector2D>();
}
void cxxbridge1$weak_ptr$carla$geom$Vector2D$clone(::std::weak_ptr<::carla::geom::Vector2D> const &self, ::std::weak_ptr<::carla::geom::Vector2D> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::Vector2D>(self);
}
void cxxbridge1$weak_ptr$carla$geom$Vector2D$downgrade(::std::shared_ptr<::carla::geom::Vector2D> const &shared, ::std::weak_ptr<::carla::geom::Vector2D> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::geom::Vector2D>(shared);
}
void cxxbridge1$weak_ptr$carla$geom$Vector2D$upgrade(::std::weak_ptr<::carla::geom::Vector2D> const &weak, ::std::shared_ptr<::carla::geom::Vector2D> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::geom::Vector2D>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$geom$Vector2D$drop(::std::weak_ptr<::carla::geom::Vector2D> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::geom::Vector2D> *cxxbridge1$std$vector$carla$geom$Vector2D$new() noexcept {
  return new ::std::vector<::carla::geom::Vector2D>();
}
::std::size_t cxxbridge1$std$vector$carla$geom$Vector2D$size(::std::vector<::carla::geom::Vector2D> const &s) noexcept {
  return s.size();
}
::carla::geom::Vector2D *cxxbridge1$std$vector$carla$geom$Vector2D$get_unchecked(::std::vector<::carla::geom::Vector2D> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$geom$Vector2D$push_back(::std::vector<::carla::geom::Vector2D> *v, ::carla::geom::Vector2D *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$geom$Vector2D$pop_back(::std::vector<::carla::geom::Vector2D> *v, ::carla::geom::Vector2D *out) noexcept {
  ::new (out) ::carla::geom::Vector2D(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::geom::Vector2D>>::value, "definition of `::std::vector<::carla::geom::Vector2D>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::geom::Vector2D>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::geom::Vector2D>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$geom$Vector2D$null(::std::unique_ptr<::std::vector<::carla::geom::Vector2D>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::Vector2D>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$Vector2D$raw(::std::unique_ptr<::std::vector<::carla::geom::Vector2D>> *ptr, ::std::vector<::carla::geom::Vector2D> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::Vector2D>>(raw);
}
::std::vector<::carla::geom::Vector2D> const *cxxbridge1$unique_ptr$std$vector$carla$geom$Vector2D$get(::std::unique_ptr<::std::vector<::carla::geom::Vector2D>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::geom::Vector2D> *cxxbridge1$unique_ptr$std$vector$carla$geom$Vector2D$release(::std::unique_ptr<::std::vector<::carla::geom::Vector2D>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$Vector2D$drop(::std::unique_ptr<::std::vector<::carla::geom::Vector2D>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::geom::Vector2D>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::geom::MeshMaterial>::value, "definition of `::carla::geom::MeshMaterial` is required");
static_assert(sizeof(::std::unique_ptr<::carla::geom::MeshMaterial>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::geom::MeshMaterial>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$geom$MeshMaterial$null(::std::unique_ptr<::carla::geom::MeshMaterial> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::MeshMaterial>();
}
::carla::geom::MeshMaterial *cxxbridge1$unique_ptr$carla$geom$MeshMaterial$uninit(::std::unique_ptr<::carla::geom::MeshMaterial> *ptr) noexcept {
  ::carla::geom::MeshMaterial *uninit = reinterpret_cast<::carla::geom::MeshMaterial *>(new ::rust::MaybeUninit<::carla::geom::MeshMaterial>);
  ::new (ptr) ::std::unique_ptr<::carla::geom::MeshMaterial>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$geom$MeshMaterial$raw(::std::unique_ptr<::carla::geom::MeshMaterial> *ptr, ::carla::geom::MeshMaterial *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::MeshMaterial>(raw);
}
::carla::geom::MeshMaterial const *cxxbridge1$unique_ptr$carla$geom$MeshMaterial$get(::std::unique_ptr<::carla::geom::MeshMaterial> const &ptr) noexcept {
  return ptr.get();
}
::carla::geom::MeshMaterial *cxxbridge1$unique_ptr$carla$geom$MeshMaterial$release(::std::unique_ptr<::carla::geom::MeshMaterial> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$geom$MeshMaterial$drop(::std::unique_ptr<::carla::geom::MeshMaterial> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::geom::MeshMaterial>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::geom::MeshMaterial>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::geom::MeshMaterial>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$geom$MeshMaterial$null(::std::shared_ptr<::carla::geom::MeshMaterial> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::MeshMaterial>();
}
::carla::geom::MeshMaterial *cxxbridge1$shared_ptr$carla$geom$MeshMaterial$uninit(::std::shared_ptr<::carla::geom::MeshMaterial> *ptr) noexcept {
  ::carla::geom::MeshMaterial *uninit = reinterpret_cast<::carla::geom::MeshMaterial *>(new ::rust::MaybeUninit<::carla::geom::MeshMaterial>);
  ::new (ptr) ::std::shared_ptr<::carla::geom::MeshMaterial>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$geom$MeshMaterial$clone(::std::shared_ptr<::carla::geom::MeshMaterial> const &self, ::std::shared_ptr<::carla::geom::MeshMaterial> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::MeshMaterial>(self);
}
::carla::geom::MeshMaterial const *cxxbridge1$shared_ptr$carla$geom$MeshMaterial$get(::std::shared_ptr<::carla::geom::MeshMaterial> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$geom$MeshMaterial$drop(::std::shared_ptr<::carla::geom::MeshMaterial> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::geom::MeshMaterial>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::geom::MeshMaterial>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$geom$MeshMaterial$null(::std::weak_ptr<::carla::geom::MeshMaterial> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::MeshMaterial>();
}
void cxxbridge1$weak_ptr$carla$geom$MeshMaterial$clone(::std::weak_ptr<::carla::geom::MeshMaterial> const &self, ::std::weak_ptr<::carla::geom::MeshMaterial> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::MeshMaterial>(self);
}
void cxxbridge1$weak_ptr$carla$geom$MeshMaterial$downgrade(::std::shared_ptr<::carla::geom::MeshMaterial> const &shared, ::std::weak_ptr<::carla::geom::MeshMaterial> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::geom::MeshMaterial>(shared);
}
void cxxbridge1$weak_ptr$carla$geom$MeshMaterial$upgrade(::std::weak_ptr<::carla::geom::MeshMaterial> const &weak, ::std::shared_ptr<::carla::geom::MeshMaterial> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::geom::MeshMaterial>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$geom$MeshMaterial$drop(::std::weak_ptr<::carla::geom::MeshMaterial> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::geom::MeshMaterial> *cxxbridge1$std$vector$carla$geom$MeshMaterial$new() noexcept {
  return new ::std::vector<::carla::geom::MeshMaterial>();
}
::std::size_t cxxbridge1$std$vector$carla$geom$MeshMaterial$size(::std::vector<::carla::geom::MeshMaterial> const &s) noexcept {
  return s.size();
}
::carla::geom::MeshMaterial *cxxbridge1$std$vector$carla$geom$MeshMaterial$get_unchecked(::std::vector<::carla::geom::MeshMaterial> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$geom$MeshMaterial$push_back(::std::vector<::carla::geom::MeshMaterial> *v, ::carla::geom::MeshMaterial *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$geom$MeshMaterial$pop_back(::std::vector<::carla::geom::MeshMaterial> *v, ::carla::geom::MeshMaterial *out) noexcept {
  ::new (out) ::carla::geom::MeshMaterial(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::geom::MeshMaterial>>::value, "definition of `::std::vector<::carla::geom::MeshMaterial>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::geom::MeshMaterial>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::geom::MeshMaterial>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$geom$MeshMaterial$null(::std::unique_ptr<::std::vector<::carla::geom::MeshMaterial>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::MeshMaterial>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$MeshMaterial$raw(::std::unique_ptr<::std::vector<::carla::geom::MeshMaterial>> *ptr, ::std::vector<::carla::geom::MeshMaterial> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::MeshMaterial>>(raw);
}
::std::vector<::carla::geom::MeshMaterial> const *cxxbridge1$unique_ptr$std$vector$carla$geom$MeshMaterial$get(::std::unique_ptr<::std::vector<::carla::geom::MeshMaterial>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::geom::MeshMaterial> *cxxbridge1$unique_ptr$std$vector$carla$geom$MeshMaterial$release(::std::unique_ptr<::std::vector<::carla::geom::MeshMaterial>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$MeshMaterial$drop(::std::unique_ptr<::std::vector<::carla::geom::MeshMaterial>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::geom::MeshMaterial>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::geom::Mesh>::value, "definition of `::carla::geom::Mesh` is required");
static_assert(sizeof(::std::unique_ptr<::carla::geom::Mesh>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::geom::Mesh>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$geom$Mesh$null(::std::unique_ptr<::carla::geom::Mesh> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::Mesh>();
}
::carla::geom::Mesh *cxxbridge1$unique_ptr$carla$geom$Mesh$uninit(::std::unique_ptr<::carla::geom::Mesh> *ptr) noexcept {
  ::carla::geom::Mesh *uninit = reinterpret_cast<::carla::geom::Mesh *>(new ::rust::MaybeUninit<::carla::geom::Mesh>);
  ::new (ptr) ::std::unique_ptr<::carla::geom::Mesh>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$geom$Mesh$raw(::std::unique_ptr<::carla::geom::Mesh> *ptr, ::carla::geom::Mesh *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::Mesh>(raw);
}
::carla::geom::Mesh const *cxxbridge1$unique_ptr$carla$geom$Mesh$get(::std::unique_ptr<::carla::geom::Mesh> const &ptr) noexcept {
  return ptr.get();
}
::carla::geom::Mesh *cxxbridge1$unique_ptr$carla$geom$Mesh$release(::std::unique_ptr<::carla::geom::Mesh> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$geom$Mesh$drop(::std::unique_ptr<::carla::geom::Mesh> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::geom::Mesh>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::geom::Mesh>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::geom::Mesh>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$geom$Mesh$null(::std::shared_ptr<::carla::geom::Mesh> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::Mesh>();
}
::carla::geom::Mesh *cxxbridge1$shared_ptr$carla$geom$Mesh$uninit(::std::shared_ptr<::carla::geom::Mesh> *ptr) noexcept {
  ::carla::geom::Mesh *uninit = reinterpret_cast<::carla::geom::Mesh *>(new ::rust::MaybeUninit<::carla::geom::Mesh>);
  ::new (ptr) ::std::shared_ptr<::carla::geom::Mesh>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$geom$Mesh$clone(::std::shared_ptr<::carla::geom::Mesh> const &self, ::std::shared_ptr<::carla::geom::Mesh> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::Mesh>(self);
}
::carla::geom::Mesh const *cxxbridge1$shared_ptr$carla$geom$Mesh$get(::std::shared_ptr<::carla::geom::Mesh> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$geom$Mesh$drop(::std::shared_ptr<::carla::geom::Mesh> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::geom::Mesh>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::geom::Mesh>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$geom$Mesh$null(::std::weak_ptr<::carla::geom::Mesh> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::Mesh>();
}
void cxxbridge1$weak_ptr$carla$geom$Mesh$clone(::std::weak_ptr<::carla::geom::Mesh> const &self, ::std::weak_ptr<::carla::geom::Mesh> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::Mesh>(self);
}
void cxxbridge1$weak_ptr$carla$geom$Mesh$downgrade(::std::shared_ptr<::carla::geom::Mesh> const &shared, ::std::weak_ptr<::carla::geom::Mesh> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::geom::Mesh>(shared);
}
void cxxbridge1$weak_ptr$carla$geom$Mesh$upgrade(::std::weak_ptr<::carla::geom::Mesh> const &weak, ::std::shared_ptr<::carla::geom::Mesh> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::geom::Mesh>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$geom$Mesh$drop(::std::weak_ptr<::carla::geom::Mesh> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::geom::Mesh> *cxxbridge1$std$vector$carla$geom$Mesh$new() noexcept {
  return new ::std::vector<::carla::geom::Mesh>();
}
::std::size_t cxxbridge1$std$vector$carla$geom$Mesh$size(::std::vector<::carla::geom::Mesh> const &s) noexcept {
  return s.size();
}
::carla::geom::Mesh *cxxbridge1$std$vector$carla$geom$Mesh$get_unchecked(::std::vector<::carla::geom::Mesh> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$geom$Mesh$push_back(::std::vector<::carla::geom::Mesh> *v, ::carla::geom::Mesh *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$geom$Mesh$pop_back(::std::vector<::carla::geom::Mesh> *v, ::carla::geom::Mesh *out) noexcept {
  ::new (out) ::carla::geom::Mesh(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::geom::Mesh>>::value, "definition of `::std::vector<::carla::geom::Mesh>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::geom::Mesh>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::geom::Mesh>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$geom$Mesh$null(::std::unique_ptr<::std::vector<::carla::geom::Mesh>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::Mesh>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$Mesh$raw(::std::unique_ptr<::std::vector<::carla::geom::Mesh>> *ptr, ::std::vector<::carla::geom::Mesh> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::Mesh>>(raw);
}
::std::vector<::carla::geom::Mesh> const *cxxbridge1$unique_ptr$std$vector$carla$geom$Mesh$get(::std::unique_ptr<::std::vector<::carla::geom::Mesh>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::geom::Mesh> *cxxbridge1$unique_ptr$std$vector$carla$geom$Mesh$release(::std::unique_ptr<::std::vector<::carla::geom::Mesh>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$Mesh$drop(::std::unique_ptr<::std::vector<::carla::geom::Mesh>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::geom::Mesh>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::geom::GeoLocation>::value, "definition of `::carla::geom::GeoLocation` is required");
static_assert(sizeof(::std::unique_ptr<::carla::geom::GeoLocation>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::geom::GeoLocation>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$geom$GeoLocation$null(::std::unique_ptr<::carla::geom::GeoLocation> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::GeoLocation>();
}
::carla::geom::GeoLocation *cxxbridge1$unique_ptr$carla$geom$GeoLocation$uninit(::std::unique_ptr<::carla::geom::GeoLocation> *ptr) noexcept {
  ::carla::geom::GeoLocation *uninit = reinterpret_cast<::carla::geom::GeoLocation *>(new ::rust::MaybeUninit<::carla::geom::GeoLocation>);
  ::new (ptr) ::std::unique_ptr<::carla::geom::GeoLocation>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$geom$GeoLocation$raw(::std::unique_ptr<::carla::geom::GeoLocation> *ptr, ::carla::geom::GeoLocation *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::GeoLocation>(raw);
}
::carla::geom::GeoLocation const *cxxbridge1$unique_ptr$carla$geom$GeoLocation$get(::std::unique_ptr<::carla::geom::GeoLocation> const &ptr) noexcept {
  return ptr.get();
}
::carla::geom::GeoLocation *cxxbridge1$unique_ptr$carla$geom$GeoLocation$release(::std::unique_ptr<::carla::geom::GeoLocation> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$geom$GeoLocation$drop(::std::unique_ptr<::carla::geom::GeoLocation> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::geom::GeoLocation>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::geom::GeoLocation>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::geom::GeoLocation>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$geom$GeoLocation$null(::std::shared_ptr<::carla::geom::GeoLocation> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::GeoLocation>();
}
::carla::geom::GeoLocation *cxxbridge1$shared_ptr$carla$geom$GeoLocation$uninit(::std::shared_ptr<::carla::geom::GeoLocation> *ptr) noexcept {
  ::carla::geom::GeoLocation *uninit = reinterpret_cast<::carla::geom::GeoLocation *>(new ::rust::MaybeUninit<::carla::geom::GeoLocation>);
  ::new (ptr) ::std::shared_ptr<::carla::geom::GeoLocation>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$geom$GeoLocation$clone(::std::shared_ptr<::carla::geom::GeoLocation> const &self, ::std::shared_ptr<::carla::geom::GeoLocation> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::GeoLocation>(self);
}
::carla::geom::GeoLocation const *cxxbridge1$shared_ptr$carla$geom$GeoLocation$get(::std::shared_ptr<::carla::geom::GeoLocation> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$geom$GeoLocation$drop(::std::shared_ptr<::carla::geom::GeoLocation> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::geom::GeoLocation>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::geom::GeoLocation>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$geom$GeoLocation$null(::std::weak_ptr<::carla::geom::GeoLocation> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::GeoLocation>();
}
void cxxbridge1$weak_ptr$carla$geom$GeoLocation$clone(::std::weak_ptr<::carla::geom::GeoLocation> const &self, ::std::weak_ptr<::carla::geom::GeoLocation> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::GeoLocation>(self);
}
void cxxbridge1$weak_ptr$carla$geom$GeoLocation$downgrade(::std::shared_ptr<::carla::geom::GeoLocation> const &shared, ::std::weak_ptr<::carla::geom::GeoLocation> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::geom::GeoLocation>(shared);
}
void cxxbridge1$weak_ptr$carla$geom$GeoLocation$upgrade(::std::weak_ptr<::carla::geom::GeoLocation> const &weak, ::std::shared_ptr<::carla::geom::GeoLocation> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::geom::GeoLocation>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$geom$GeoLocation$drop(::std::weak_ptr<::carla::geom::GeoLocation> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::geom::GeoLocation> *cxxbridge1$std$vector$carla$geom$GeoLocation$new() noexcept {
  return new ::std::vector<::carla::geom::GeoLocation>();
}
::std::size_t cxxbridge1$std$vector$carla$geom$GeoLocation$size(::std::vector<::carla::geom::GeoLocation> const &s) noexcept {
  return s.size();
}
::carla::geom::GeoLocation *cxxbridge1$std$vector$carla$geom$GeoLocation$get_unchecked(::std::vector<::carla::geom::GeoLocation> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$geom$GeoLocation$push_back(::std::vector<::carla::geom::GeoLocation> *v, ::carla::geom::GeoLocation *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$geom$GeoLocation$pop_back(::std::vector<::carla::geom::GeoLocation> *v, ::carla::geom::GeoLocation *out) noexcept {
  ::new (out) ::carla::geom::GeoLocation(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::geom::GeoLocation>>::value, "definition of `::std::vector<::carla::geom::GeoLocation>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::geom::GeoLocation>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::geom::GeoLocation>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$geom$GeoLocation$null(::std::unique_ptr<::std::vector<::carla::geom::GeoLocation>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::GeoLocation>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$GeoLocation$raw(::std::unique_ptr<::std::vector<::carla::geom::GeoLocation>> *ptr, ::std::vector<::carla::geom::GeoLocation> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::GeoLocation>>(raw);
}
::std::vector<::carla::geom::GeoLocation> const *cxxbridge1$unique_ptr$std$vector$carla$geom$GeoLocation$get(::std::unique_ptr<::std::vector<::carla::geom::GeoLocation>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::geom::GeoLocation> *cxxbridge1$unique_ptr$std$vector$carla$geom$GeoLocation$release(::std::unique_ptr<::std::vector<::carla::geom::GeoLocation>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$GeoLocation$drop(::std::unique_ptr<::std::vector<::carla::geom::GeoLocation>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::geom::GeoLocation>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::geom::CubicPolynomial>::value, "definition of `::carla::geom::CubicPolynomial` is required");
static_assert(sizeof(::std::unique_ptr<::carla::geom::CubicPolynomial>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::geom::CubicPolynomial>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$geom$CubicPolynomial$null(::std::unique_ptr<::carla::geom::CubicPolynomial> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::CubicPolynomial>();
}
::carla::geom::CubicPolynomial *cxxbridge1$unique_ptr$carla$geom$CubicPolynomial$uninit(::std::unique_ptr<::carla::geom::CubicPolynomial> *ptr) noexcept {
  ::carla::geom::CubicPolynomial *uninit = reinterpret_cast<::carla::geom::CubicPolynomial *>(new ::rust::MaybeUninit<::carla::geom::CubicPolynomial>);
  ::new (ptr) ::std::unique_ptr<::carla::geom::CubicPolynomial>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$geom$CubicPolynomial$raw(::std::unique_ptr<::carla::geom::CubicPolynomial> *ptr, ::carla::geom::CubicPolynomial *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::CubicPolynomial>(raw);
}
::carla::geom::CubicPolynomial const *cxxbridge1$unique_ptr$carla$geom$CubicPolynomial$get(::std::unique_ptr<::carla::geom::CubicPolynomial> const &ptr) noexcept {
  return ptr.get();
}
::carla::geom::CubicPolynomial *cxxbridge1$unique_ptr$carla$geom$CubicPolynomial$release(::std::unique_ptr<::carla::geom::CubicPolynomial> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$geom$CubicPolynomial$drop(::std::unique_ptr<::carla::geom::CubicPolynomial> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::geom::CubicPolynomial>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::geom::CubicPolynomial>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::geom::CubicPolynomial>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$geom$CubicPolynomial$null(::std::shared_ptr<::carla::geom::CubicPolynomial> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::CubicPolynomial>();
}
::carla::geom::CubicPolynomial *cxxbridge1$shared_ptr$carla$geom$CubicPolynomial$uninit(::std::shared_ptr<::carla::geom::CubicPolynomial> *ptr) noexcept {
  ::carla::geom::CubicPolynomial *uninit = reinterpret_cast<::carla::geom::CubicPolynomial *>(new ::rust::MaybeUninit<::carla::geom::CubicPolynomial>);
  ::new (ptr) ::std::shared_ptr<::carla::geom::CubicPolynomial>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$geom$CubicPolynomial$clone(::std::shared_ptr<::carla::geom::CubicPolynomial> const &self, ::std::shared_ptr<::carla::geom::CubicPolynomial> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::CubicPolynomial>(self);
}
::carla::geom::CubicPolynomial const *cxxbridge1$shared_ptr$carla$geom$CubicPolynomial$get(::std::shared_ptr<::carla::geom::CubicPolynomial> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$geom$CubicPolynomial$drop(::std::shared_ptr<::carla::geom::CubicPolynomial> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::geom::CubicPolynomial>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::geom::CubicPolynomial>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$geom$CubicPolynomial$null(::std::weak_ptr<::carla::geom::CubicPolynomial> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::CubicPolynomial>();
}
void cxxbridge1$weak_ptr$carla$geom$CubicPolynomial$clone(::std::weak_ptr<::carla::geom::CubicPolynomial> const &self, ::std::weak_ptr<::carla::geom::CubicPolynomial> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::CubicPolynomial>(self);
}
void cxxbridge1$weak_ptr$carla$geom$CubicPolynomial$downgrade(::std::shared_ptr<::carla::geom::CubicPolynomial> const &shared, ::std::weak_ptr<::carla::geom::CubicPolynomial> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::geom::CubicPolynomial>(shared);
}
void cxxbridge1$weak_ptr$carla$geom$CubicPolynomial$upgrade(::std::weak_ptr<::carla::geom::CubicPolynomial> const &weak, ::std::shared_ptr<::carla::geom::CubicPolynomial> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::geom::CubicPolynomial>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$geom$CubicPolynomial$drop(::std::weak_ptr<::carla::geom::CubicPolynomial> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::geom::MeshFactory>::value, "definition of `::carla::geom::MeshFactory` is required");
static_assert(sizeof(::std::unique_ptr<::carla::geom::MeshFactory>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::geom::MeshFactory>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$geom$MeshFactory$null(::std::unique_ptr<::carla::geom::MeshFactory> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::MeshFactory>();
}
::carla::geom::MeshFactory *cxxbridge1$unique_ptr$carla$geom$MeshFactory$uninit(::std::unique_ptr<::carla::geom::MeshFactory> *ptr) noexcept {
  ::carla::geom::MeshFactory *uninit = reinterpret_cast<::carla::geom::MeshFactory *>(new ::rust::MaybeUninit<::carla::geom::MeshFactory>);
  ::new (ptr) ::std::unique_ptr<::carla::geom::MeshFactory>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$geom$MeshFactory$raw(::std::unique_ptr<::carla::geom::MeshFactory> *ptr, ::carla::geom::MeshFactory *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::MeshFactory>(raw);
}
::carla::geom::MeshFactory const *cxxbridge1$unique_ptr$carla$geom$MeshFactory$get(::std::unique_ptr<::carla::geom::MeshFactory> const &ptr) noexcept {
  return ptr.get();
}
::carla::geom::MeshFactory *cxxbridge1$unique_ptr$carla$geom$MeshFactory$release(::std::unique_ptr<::carla::geom::MeshFactory> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$geom$MeshFactory$drop(::std::unique_ptr<::carla::geom::MeshFactory> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::geom::MeshFactory>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::geom::MeshFactory>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::geom::MeshFactory>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$geom$MeshFactory$null(::std::shared_ptr<::carla::geom::MeshFactory> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::MeshFactory>();
}
::carla::geom::MeshFactory *cxxbridge1$shared_ptr$carla$geom$MeshFactory$uninit(::std::shared_ptr<::carla::geom::MeshFactory> *ptr) noexcept {
  ::carla::geom::MeshFactory *uninit = reinterpret_cast<::carla::geom::MeshFactory *>(new ::rust::MaybeUninit<::carla::geom::MeshFactory>);
  ::new (ptr) ::std::shared_ptr<::carla::geom::MeshFactory>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$geom$MeshFactory$clone(::std::shared_ptr<::carla::geom::MeshFactory> const &self, ::std::shared_ptr<::carla::geom::MeshFactory> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::MeshFactory>(self);
}
::carla::geom::MeshFactory const *cxxbridge1$shared_ptr$carla$geom$MeshFactory$get(::std::shared_ptr<::carla::geom::MeshFactory> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$geom$MeshFactory$drop(::std::shared_ptr<::carla::geom::MeshFactory> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::geom::MeshFactory>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::geom::MeshFactory>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$geom$MeshFactory$null(::std::weak_ptr<::carla::geom::MeshFactory> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::MeshFactory>();
}
void cxxbridge1$weak_ptr$carla$geom$MeshFactory$clone(::std::weak_ptr<::carla::geom::MeshFactory> const &self, ::std::weak_ptr<::carla::geom::MeshFactory> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::MeshFactory>(self);
}
void cxxbridge1$weak_ptr$carla$geom$MeshFactory$downgrade(::std::shared_ptr<::carla::geom::MeshFactory> const &shared, ::std::weak_ptr<::carla::geom::MeshFactory> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::geom::MeshFactory>(shared);
}
void cxxbridge1$weak_ptr$carla$geom$MeshFactory$upgrade(::std::weak_ptr<::carla::geom::MeshFactory> const &weak, ::std::shared_ptr<::carla::geom::MeshFactory> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::geom::MeshFactory>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$geom$MeshFactory$drop(::std::weak_ptr<::carla::geom::MeshFactory> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::geom::MeshFactory> *cxxbridge1$std$vector$carla$geom$MeshFactory$new() noexcept {
  return new ::std::vector<::carla::geom::MeshFactory>();
}
::std::size_t cxxbridge1$std$vector$carla$geom$MeshFactory$size(::std::vector<::carla::geom::MeshFactory> const &s) noexcept {
  return s.size();
}
::carla::geom::MeshFactory *cxxbridge1$std$vector$carla$geom$MeshFactory$get_unchecked(::std::vector<::carla::geom::MeshFactory> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$geom$MeshFactory$push_back(::std::vector<::carla::geom::MeshFactory> *v, ::carla::geom::MeshFactory *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$geom$MeshFactory$pop_back(::std::vector<::carla::geom::MeshFactory> *v, ::carla::geom::MeshFactory *out) noexcept {
  ::new (out) ::carla::geom::MeshFactory(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::geom::MeshFactory>>::value, "definition of `::std::vector<::carla::geom::MeshFactory>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$geom$MeshFactory$null(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::MeshFactory>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$MeshFactory$raw(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory>> *ptr, ::std::vector<::carla::geom::MeshFactory> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::MeshFactory>>(raw);
}
::std::vector<::carla::geom::MeshFactory> const *cxxbridge1$unique_ptr$std$vector$carla$geom$MeshFactory$get(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::geom::MeshFactory> *cxxbridge1$unique_ptr$std$vector$carla$geom$MeshFactory$release(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$MeshFactory$drop(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::geom::MeshFactory>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::geom::MeshFactory::RoadParameters>::value, "definition of `::carla::geom::MeshFactory::RoadParameters` is required");
static_assert(sizeof(::std::unique_ptr<::carla::geom::MeshFactory::RoadParameters>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::geom::MeshFactory::RoadParameters>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$geom$MeshFactory$RoadParameters$null(::std::unique_ptr<::carla::geom::MeshFactory::RoadParameters> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::MeshFactory::RoadParameters>();
}
::carla::geom::MeshFactory::RoadParameters *cxxbridge1$unique_ptr$carla$geom$MeshFactory$RoadParameters$uninit(::std::unique_ptr<::carla::geom::MeshFactory::RoadParameters> *ptr) noexcept {
  ::carla::geom::MeshFactory::RoadParameters *uninit = reinterpret_cast<::carla::geom::MeshFactory::RoadParameters *>(new ::rust::MaybeUninit<::carla::geom::MeshFactory::RoadParameters>);
  ::new (ptr) ::std::unique_ptr<::carla::geom::MeshFactory::RoadParameters>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$geom$MeshFactory$RoadParameters$raw(::std::unique_ptr<::carla::geom::MeshFactory::RoadParameters> *ptr, ::carla::geom::MeshFactory::RoadParameters *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::geom::MeshFactory::RoadParameters>(raw);
}
::carla::geom::MeshFactory::RoadParameters const *cxxbridge1$unique_ptr$carla$geom$MeshFactory$RoadParameters$get(::std::unique_ptr<::carla::geom::MeshFactory::RoadParameters> const &ptr) noexcept {
  return ptr.get();
}
::carla::geom::MeshFactory::RoadParameters *cxxbridge1$unique_ptr$carla$geom$MeshFactory$RoadParameters$release(::std::unique_ptr<::carla::geom::MeshFactory::RoadParameters> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$geom$MeshFactory$RoadParameters$drop(::std::unique_ptr<::carla::geom::MeshFactory::RoadParameters> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::geom::MeshFactory::RoadParameters>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$geom$MeshFactory$RoadParameters$null(::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters>();
}
::carla::geom::MeshFactory::RoadParameters *cxxbridge1$shared_ptr$carla$geom$MeshFactory$RoadParameters$uninit(::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters> *ptr) noexcept {
  ::carla::geom::MeshFactory::RoadParameters *uninit = reinterpret_cast<::carla::geom::MeshFactory::RoadParameters *>(new ::rust::MaybeUninit<::carla::geom::MeshFactory::RoadParameters>);
  ::new (ptr) ::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$geom$MeshFactory$RoadParameters$clone(::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters> const &self, ::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters>(self);
}
::carla::geom::MeshFactory::RoadParameters const *cxxbridge1$shared_ptr$carla$geom$MeshFactory$RoadParameters$get(::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$geom$MeshFactory$RoadParameters$drop(::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::geom::MeshFactory::RoadParameters>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::geom::MeshFactory::RoadParameters>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$geom$MeshFactory$RoadParameters$null(::std::weak_ptr<::carla::geom::MeshFactory::RoadParameters> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::MeshFactory::RoadParameters>();
}
void cxxbridge1$weak_ptr$carla$geom$MeshFactory$RoadParameters$clone(::std::weak_ptr<::carla::geom::MeshFactory::RoadParameters> const &self, ::std::weak_ptr<::carla::geom::MeshFactory::RoadParameters> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::geom::MeshFactory::RoadParameters>(self);
}
void cxxbridge1$weak_ptr$carla$geom$MeshFactory$RoadParameters$downgrade(::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters> const &shared, ::std::weak_ptr<::carla::geom::MeshFactory::RoadParameters> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::geom::MeshFactory::RoadParameters>(shared);
}
void cxxbridge1$weak_ptr$carla$geom$MeshFactory$RoadParameters$upgrade(::std::weak_ptr<::carla::geom::MeshFactory::RoadParameters> const &weak, ::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::geom::MeshFactory::RoadParameters>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$geom$MeshFactory$RoadParameters$drop(::std::weak_ptr<::carla::geom::MeshFactory::RoadParameters> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::geom::MeshFactory::RoadParameters> *cxxbridge1$std$vector$carla$geom$MeshFactory$RoadParameters$new() noexcept {
  return new ::std::vector<::carla::geom::MeshFactory::RoadParameters>();
}
::std::size_t cxxbridge1$std$vector$carla$geom$MeshFactory$RoadParameters$size(::std::vector<::carla::geom::MeshFactory::RoadParameters> const &s) noexcept {
  return s.size();
}
::carla::geom::MeshFactory::RoadParameters *cxxbridge1$std$vector$carla$geom$MeshFactory$RoadParameters$get_unchecked(::std::vector<::carla::geom::MeshFactory::RoadParameters> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$geom$MeshFactory$RoadParameters$push_back(::std::vector<::carla::geom::MeshFactory::RoadParameters> *v, ::carla::geom::MeshFactory::RoadParameters *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$geom$MeshFactory$RoadParameters$pop_back(::std::vector<::carla::geom::MeshFactory::RoadParameters> *v, ::carla::geom::MeshFactory::RoadParameters *out) noexcept {
  ::new (out) ::carla::geom::MeshFactory::RoadParameters(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::geom::MeshFactory::RoadParameters>>::value, "definition of `::std::vector<::carla::geom::MeshFactory::RoadParameters>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory::RoadParameters>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory::RoadParameters>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$geom$MeshFactory$RoadParameters$null(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory::RoadParameters>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::MeshFactory::RoadParameters>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$MeshFactory$RoadParameters$raw(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory::RoadParameters>> *ptr, ::std::vector<::carla::geom::MeshFactory::RoadParameters> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::geom::MeshFactory::RoadParameters>>(raw);
}
::std::vector<::carla::geom::MeshFactory::RoadParameters> const *cxxbridge1$unique_ptr$std$vector$carla$geom$MeshFactory$RoadParameters$get(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory::RoadParameters>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::geom::MeshFactory::RoadParameters> *cxxbridge1$unique_ptr$std$vector$carla$geom$MeshFactory$RoadParameters$release(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory::RoadParameters>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$geom$MeshFactory$RoadParameters$drop(::std::unique_ptr<::std::vector<::carla::geom::MeshFactory::RoadParameters>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::geom::MeshFactory::RoadParameters>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::TrafficLightState>::value, "definition of `::carla::rpc::TrafficLightState` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::TrafficLightState>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::TrafficLightState>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$TrafficLightState$null(::std::unique_ptr<::carla::rpc::TrafficLightState> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::TrafficLightState>();
}
::carla::rpc::TrafficLightState *cxxbridge1$unique_ptr$carla$rpc$TrafficLightState$uninit(::std::unique_ptr<::carla::rpc::TrafficLightState> *ptr) noexcept {
  ::carla::rpc::TrafficLightState *uninit = reinterpret_cast<::carla::rpc::TrafficLightState *>(new ::rust::MaybeUninit<::carla::rpc::TrafficLightState>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::TrafficLightState>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$TrafficLightState$raw(::std::unique_ptr<::carla::rpc::TrafficLightState> *ptr, ::carla::rpc::TrafficLightState *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::TrafficLightState>(raw);
}
::carla::rpc::TrafficLightState const *cxxbridge1$unique_ptr$carla$rpc$TrafficLightState$get(::std::unique_ptr<::carla::rpc::TrafficLightState> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::TrafficLightState *cxxbridge1$unique_ptr$carla$rpc$TrafficLightState$release(::std::unique_ptr<::carla::rpc::TrafficLightState> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$TrafficLightState$drop(::std::unique_ptr<::carla::rpc::TrafficLightState> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::TrafficLightState>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::TrafficLightState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::TrafficLightState>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$TrafficLightState$null(::std::shared_ptr<::carla::rpc::TrafficLightState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::TrafficLightState>();
}
::carla::rpc::TrafficLightState *cxxbridge1$shared_ptr$carla$rpc$TrafficLightState$uninit(::std::shared_ptr<::carla::rpc::TrafficLightState> *ptr) noexcept {
  ::carla::rpc::TrafficLightState *uninit = reinterpret_cast<::carla::rpc::TrafficLightState *>(new ::rust::MaybeUninit<::carla::rpc::TrafficLightState>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::TrafficLightState>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$TrafficLightState$clone(::std::shared_ptr<::carla::rpc::TrafficLightState> const &self, ::std::shared_ptr<::carla::rpc::TrafficLightState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::TrafficLightState>(self);
}
::carla::rpc::TrafficLightState const *cxxbridge1$shared_ptr$carla$rpc$TrafficLightState$get(::std::shared_ptr<::carla::rpc::TrafficLightState> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$TrafficLightState$drop(::std::shared_ptr<::carla::rpc::TrafficLightState> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::TrafficLightState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::TrafficLightState>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$TrafficLightState$null(::std::weak_ptr<::carla::rpc::TrafficLightState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::TrafficLightState>();
}
void cxxbridge1$weak_ptr$carla$rpc$TrafficLightState$clone(::std::weak_ptr<::carla::rpc::TrafficLightState> const &self, ::std::weak_ptr<::carla::rpc::TrafficLightState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::TrafficLightState>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$TrafficLightState$downgrade(::std::shared_ptr<::carla::rpc::TrafficLightState> const &shared, ::std::weak_ptr<::carla::rpc::TrafficLightState> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::TrafficLightState>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$TrafficLightState$upgrade(::std::weak_ptr<::carla::rpc::TrafficLightState> const &weak, ::std::shared_ptr<::carla::rpc::TrafficLightState> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::TrafficLightState>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$TrafficLightState$drop(::std::weak_ptr<::carla::rpc::TrafficLightState> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::TrafficLightState> *cxxbridge1$std$vector$carla$rpc$TrafficLightState$new() noexcept {
  return new ::std::vector<::carla::rpc::TrafficLightState>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$TrafficLightState$size(::std::vector<::carla::rpc::TrafficLightState> const &s) noexcept {
  return s.size();
}
::carla::rpc::TrafficLightState *cxxbridge1$std$vector$carla$rpc$TrafficLightState$get_unchecked(::std::vector<::carla::rpc::TrafficLightState> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$TrafficLightState$push_back(::std::vector<::carla::rpc::TrafficLightState> *v, ::carla::rpc::TrafficLightState *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$TrafficLightState$pop_back(::std::vector<::carla::rpc::TrafficLightState> *v, ::carla::rpc::TrafficLightState *out) noexcept {
  ::new (out) ::carla::rpc::TrafficLightState(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::TrafficLightState>>::value, "definition of `::std::vector<::carla::rpc::TrafficLightState>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::TrafficLightState>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::TrafficLightState>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$TrafficLightState$null(::std::unique_ptr<::std::vector<::carla::rpc::TrafficLightState>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::TrafficLightState>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$TrafficLightState$raw(::std::unique_ptr<::std::vector<::carla::rpc::TrafficLightState>> *ptr, ::std::vector<::carla::rpc::TrafficLightState> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::TrafficLightState>>(raw);
}
::std::vector<::carla::rpc::TrafficLightState> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$TrafficLightState$get(::std::unique_ptr<::std::vector<::carla::rpc::TrafficLightState>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::TrafficLightState> *cxxbridge1$unique_ptr$std$vector$carla$rpc$TrafficLightState$release(::std::unique_ptr<::std::vector<::carla::rpc::TrafficLightState>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$TrafficLightState$drop(::std::unique_ptr<::std::vector<::carla::rpc::TrafficLightState>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::TrafficLightState>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::VehicleControl>::value, "definition of `::carla::rpc::VehicleControl` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::VehicleControl>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::VehicleControl>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$VehicleControl$null(::std::unique_ptr<::carla::rpc::VehicleControl> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleControl>();
}
::carla::rpc::VehicleControl *cxxbridge1$unique_ptr$carla$rpc$VehicleControl$uninit(::std::unique_ptr<::carla::rpc::VehicleControl> *ptr) noexcept {
  ::carla::rpc::VehicleControl *uninit = reinterpret_cast<::carla::rpc::VehicleControl *>(new ::rust::MaybeUninit<::carla::rpc::VehicleControl>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleControl>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleControl$raw(::std::unique_ptr<::carla::rpc::VehicleControl> *ptr, ::carla::rpc::VehicleControl *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleControl>(raw);
}
::carla::rpc::VehicleControl const *cxxbridge1$unique_ptr$carla$rpc$VehicleControl$get(::std::unique_ptr<::carla::rpc::VehicleControl> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::VehicleControl *cxxbridge1$unique_ptr$carla$rpc$VehicleControl$release(::std::unique_ptr<::carla::rpc::VehicleControl> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleControl$drop(::std::unique_ptr<::carla::rpc::VehicleControl> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::VehicleControl>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::VehicleControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::VehicleControl>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$VehicleControl$null(::std::shared_ptr<::carla::rpc::VehicleControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleControl>();
}
::carla::rpc::VehicleControl *cxxbridge1$shared_ptr$carla$rpc$VehicleControl$uninit(::std::shared_ptr<::carla::rpc::VehicleControl> *ptr) noexcept {
  ::carla::rpc::VehicleControl *uninit = reinterpret_cast<::carla::rpc::VehicleControl *>(new ::rust::MaybeUninit<::carla::rpc::VehicleControl>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleControl>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleControl$clone(::std::shared_ptr<::carla::rpc::VehicleControl> const &self, ::std::shared_ptr<::carla::rpc::VehicleControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleControl>(self);
}
::carla::rpc::VehicleControl const *cxxbridge1$shared_ptr$carla$rpc$VehicleControl$get(::std::shared_ptr<::carla::rpc::VehicleControl> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleControl$drop(::std::shared_ptr<::carla::rpc::VehicleControl> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::VehicleControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::VehicleControl>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$VehicleControl$null(::std::weak_ptr<::carla::rpc::VehicleControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleControl>();
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleControl$clone(::std::weak_ptr<::carla::rpc::VehicleControl> const &self, ::std::weak_ptr<::carla::rpc::VehicleControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleControl>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleControl$downgrade(::std::shared_ptr<::carla::rpc::VehicleControl> const &shared, ::std::weak_ptr<::carla::rpc::VehicleControl> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::VehicleControl>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleControl$upgrade(::std::weak_ptr<::carla::rpc::VehicleControl> const &weak, ::std::shared_ptr<::carla::rpc::VehicleControl> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::VehicleControl>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleControl$drop(::std::weak_ptr<::carla::rpc::VehicleControl> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::VehicleControl> *cxxbridge1$std$vector$carla$rpc$VehicleControl$new() noexcept {
  return new ::std::vector<::carla::rpc::VehicleControl>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$VehicleControl$size(::std::vector<::carla::rpc::VehicleControl> const &s) noexcept {
  return s.size();
}
::carla::rpc::VehicleControl *cxxbridge1$std$vector$carla$rpc$VehicleControl$get_unchecked(::std::vector<::carla::rpc::VehicleControl> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$VehicleControl$push_back(::std::vector<::carla::rpc::VehicleControl> *v, ::carla::rpc::VehicleControl *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$VehicleControl$pop_back(::std::vector<::carla::rpc::VehicleControl> *v, ::carla::rpc::VehicleControl *out) noexcept {
  ::new (out) ::carla::rpc::VehicleControl(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleControl>>::value, "definition of `::std::vector<::carla::rpc::VehicleControl>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleControl>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleControl>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleControl$null(::std::unique_ptr<::std::vector<::carla::rpc::VehicleControl>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleControl>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleControl$raw(::std::unique_ptr<::std::vector<::carla::rpc::VehicleControl>> *ptr, ::std::vector<::carla::rpc::VehicleControl> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleControl>>(raw);
}
::std::vector<::carla::rpc::VehicleControl> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleControl$get(::std::unique_ptr<::std::vector<::carla::rpc::VehicleControl>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::VehicleControl> *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleControl$release(::std::unique_ptr<::std::vector<::carla::rpc::VehicleControl>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleControl$drop(::std::unique_ptr<::std::vector<::carla::rpc::VehicleControl>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleControl>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::ActorAttributeType>::value, "definition of `::carla::rpc::ActorAttributeType` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::ActorAttributeType>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::ActorAttributeType>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$ActorAttributeType$null(::std::unique_ptr<::carla::rpc::ActorAttributeType> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::ActorAttributeType>();
}
::carla::rpc::ActorAttributeType *cxxbridge1$unique_ptr$carla$rpc$ActorAttributeType$uninit(::std::unique_ptr<::carla::rpc::ActorAttributeType> *ptr) noexcept {
  ::carla::rpc::ActorAttributeType *uninit = reinterpret_cast<::carla::rpc::ActorAttributeType *>(new ::rust::MaybeUninit<::carla::rpc::ActorAttributeType>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::ActorAttributeType>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$ActorAttributeType$raw(::std::unique_ptr<::carla::rpc::ActorAttributeType> *ptr, ::carla::rpc::ActorAttributeType *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::ActorAttributeType>(raw);
}
::carla::rpc::ActorAttributeType const *cxxbridge1$unique_ptr$carla$rpc$ActorAttributeType$get(::std::unique_ptr<::carla::rpc::ActorAttributeType> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::ActorAttributeType *cxxbridge1$unique_ptr$carla$rpc$ActorAttributeType$release(::std::unique_ptr<::carla::rpc::ActorAttributeType> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$ActorAttributeType$drop(::std::unique_ptr<::carla::rpc::ActorAttributeType> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::ActorAttributeType>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::ActorAttributeType>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::ActorAttributeType>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$ActorAttributeType$null(::std::shared_ptr<::carla::rpc::ActorAttributeType> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::ActorAttributeType>();
}
::carla::rpc::ActorAttributeType *cxxbridge1$shared_ptr$carla$rpc$ActorAttributeType$uninit(::std::shared_ptr<::carla::rpc::ActorAttributeType> *ptr) noexcept {
  ::carla::rpc::ActorAttributeType *uninit = reinterpret_cast<::carla::rpc::ActorAttributeType *>(new ::rust::MaybeUninit<::carla::rpc::ActorAttributeType>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::ActorAttributeType>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$ActorAttributeType$clone(::std::shared_ptr<::carla::rpc::ActorAttributeType> const &self, ::std::shared_ptr<::carla::rpc::ActorAttributeType> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::ActorAttributeType>(self);
}
::carla::rpc::ActorAttributeType const *cxxbridge1$shared_ptr$carla$rpc$ActorAttributeType$get(::std::shared_ptr<::carla::rpc::ActorAttributeType> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$ActorAttributeType$drop(::std::shared_ptr<::carla::rpc::ActorAttributeType> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::ActorAttributeType>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::ActorAttributeType>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$ActorAttributeType$null(::std::weak_ptr<::carla::rpc::ActorAttributeType> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::ActorAttributeType>();
}
void cxxbridge1$weak_ptr$carla$rpc$ActorAttributeType$clone(::std::weak_ptr<::carla::rpc::ActorAttributeType> const &self, ::std::weak_ptr<::carla::rpc::ActorAttributeType> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::ActorAttributeType>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$ActorAttributeType$downgrade(::std::shared_ptr<::carla::rpc::ActorAttributeType> const &shared, ::std::weak_ptr<::carla::rpc::ActorAttributeType> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::ActorAttributeType>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$ActorAttributeType$upgrade(::std::weak_ptr<::carla::rpc::ActorAttributeType> const &weak, ::std::shared_ptr<::carla::rpc::ActorAttributeType> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::ActorAttributeType>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$ActorAttributeType$drop(::std::weak_ptr<::carla::rpc::ActorAttributeType> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::ActorAttributeType> *cxxbridge1$std$vector$carla$rpc$ActorAttributeType$new() noexcept {
  return new ::std::vector<::carla::rpc::ActorAttributeType>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$ActorAttributeType$size(::std::vector<::carla::rpc::ActorAttributeType> const &s) noexcept {
  return s.size();
}
::carla::rpc::ActorAttributeType *cxxbridge1$std$vector$carla$rpc$ActorAttributeType$get_unchecked(::std::vector<::carla::rpc::ActorAttributeType> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$ActorAttributeType$push_back(::std::vector<::carla::rpc::ActorAttributeType> *v, ::carla::rpc::ActorAttributeType *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$ActorAttributeType$pop_back(::std::vector<::carla::rpc::ActorAttributeType> *v, ::carla::rpc::ActorAttributeType *out) noexcept {
  ::new (out) ::carla::rpc::ActorAttributeType(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::ActorAttributeType>>::value, "definition of `::std::vector<::carla::rpc::ActorAttributeType>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::ActorAttributeType>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::ActorAttributeType>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorAttributeType$null(::std::unique_ptr<::std::vector<::carla::rpc::ActorAttributeType>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::ActorAttributeType>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorAttributeType$raw(::std::unique_ptr<::std::vector<::carla::rpc::ActorAttributeType>> *ptr, ::std::vector<::carla::rpc::ActorAttributeType> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::ActorAttributeType>>(raw);
}
::std::vector<::carla::rpc::ActorAttributeType> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorAttributeType$get(::std::unique_ptr<::std::vector<::carla::rpc::ActorAttributeType>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::ActorAttributeType> *cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorAttributeType$release(::std::unique_ptr<::std::vector<::carla::rpc::ActorAttributeType>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorAttributeType$drop(::std::unique_ptr<::std::vector<::carla::rpc::ActorAttributeType>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::ActorAttributeType>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::AttachmentType>::value, "definition of `::carla::rpc::AttachmentType` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::AttachmentType>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::AttachmentType>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$AttachmentType$null(::std::unique_ptr<::carla::rpc::AttachmentType> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::AttachmentType>();
}
::carla::rpc::AttachmentType *cxxbridge1$unique_ptr$carla$rpc$AttachmentType$uninit(::std::unique_ptr<::carla::rpc::AttachmentType> *ptr) noexcept {
  ::carla::rpc::AttachmentType *uninit = reinterpret_cast<::carla::rpc::AttachmentType *>(new ::rust::MaybeUninit<::carla::rpc::AttachmentType>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::AttachmentType>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$AttachmentType$raw(::std::unique_ptr<::carla::rpc::AttachmentType> *ptr, ::carla::rpc::AttachmentType *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::AttachmentType>(raw);
}
::carla::rpc::AttachmentType const *cxxbridge1$unique_ptr$carla$rpc$AttachmentType$get(::std::unique_ptr<::carla::rpc::AttachmentType> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::AttachmentType *cxxbridge1$unique_ptr$carla$rpc$AttachmentType$release(::std::unique_ptr<::carla::rpc::AttachmentType> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$AttachmentType$drop(::std::unique_ptr<::carla::rpc::AttachmentType> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::AttachmentType>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::AttachmentType>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::AttachmentType>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$AttachmentType$null(::std::shared_ptr<::carla::rpc::AttachmentType> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::AttachmentType>();
}
::carla::rpc::AttachmentType *cxxbridge1$shared_ptr$carla$rpc$AttachmentType$uninit(::std::shared_ptr<::carla::rpc::AttachmentType> *ptr) noexcept {
  ::carla::rpc::AttachmentType *uninit = reinterpret_cast<::carla::rpc::AttachmentType *>(new ::rust::MaybeUninit<::carla::rpc::AttachmentType>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::AttachmentType>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$AttachmentType$clone(::std::shared_ptr<::carla::rpc::AttachmentType> const &self, ::std::shared_ptr<::carla::rpc::AttachmentType> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::AttachmentType>(self);
}
::carla::rpc::AttachmentType const *cxxbridge1$shared_ptr$carla$rpc$AttachmentType$get(::std::shared_ptr<::carla::rpc::AttachmentType> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$AttachmentType$drop(::std::shared_ptr<::carla::rpc::AttachmentType> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::AttachmentType>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::AttachmentType>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$AttachmentType$null(::std::weak_ptr<::carla::rpc::AttachmentType> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::AttachmentType>();
}
void cxxbridge1$weak_ptr$carla$rpc$AttachmentType$clone(::std::weak_ptr<::carla::rpc::AttachmentType> const &self, ::std::weak_ptr<::carla::rpc::AttachmentType> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::AttachmentType>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$AttachmentType$downgrade(::std::shared_ptr<::carla::rpc::AttachmentType> const &shared, ::std::weak_ptr<::carla::rpc::AttachmentType> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::AttachmentType>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$AttachmentType$upgrade(::std::weak_ptr<::carla::rpc::AttachmentType> const &weak, ::std::shared_ptr<::carla::rpc::AttachmentType> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::AttachmentType>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$AttachmentType$drop(::std::weak_ptr<::carla::rpc::AttachmentType> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::AttachmentType> *cxxbridge1$std$vector$carla$rpc$AttachmentType$new() noexcept {
  return new ::std::vector<::carla::rpc::AttachmentType>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$AttachmentType$size(::std::vector<::carla::rpc::AttachmentType> const &s) noexcept {
  return s.size();
}
::carla::rpc::AttachmentType *cxxbridge1$std$vector$carla$rpc$AttachmentType$get_unchecked(::std::vector<::carla::rpc::AttachmentType> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$AttachmentType$push_back(::std::vector<::carla::rpc::AttachmentType> *v, ::carla::rpc::AttachmentType *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$AttachmentType$pop_back(::std::vector<::carla::rpc::AttachmentType> *v, ::carla::rpc::AttachmentType *out) noexcept {
  ::new (out) ::carla::rpc::AttachmentType(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::AttachmentType>>::value, "definition of `::std::vector<::carla::rpc::AttachmentType>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::AttachmentType>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::AttachmentType>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$AttachmentType$null(::std::unique_ptr<::std::vector<::carla::rpc::AttachmentType>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::AttachmentType>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$AttachmentType$raw(::std::unique_ptr<::std::vector<::carla::rpc::AttachmentType>> *ptr, ::std::vector<::carla::rpc::AttachmentType> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::AttachmentType>>(raw);
}
::std::vector<::carla::rpc::AttachmentType> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$AttachmentType$get(::std::unique_ptr<::std::vector<::carla::rpc::AttachmentType>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::AttachmentType> *cxxbridge1$unique_ptr$std$vector$carla$rpc$AttachmentType$release(::std::unique_ptr<::std::vector<::carla::rpc::AttachmentType>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$AttachmentType$drop(::std::unique_ptr<::std::vector<::carla::rpc::AttachmentType>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::AttachmentType>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::EpisodeSettings>::value, "definition of `::carla::rpc::EpisodeSettings` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::EpisodeSettings>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::EpisodeSettings>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$EpisodeSettings$null(::std::unique_ptr<::carla::rpc::EpisodeSettings> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::EpisodeSettings>();
}
::carla::rpc::EpisodeSettings *cxxbridge1$unique_ptr$carla$rpc$EpisodeSettings$uninit(::std::unique_ptr<::carla::rpc::EpisodeSettings> *ptr) noexcept {
  ::carla::rpc::EpisodeSettings *uninit = reinterpret_cast<::carla::rpc::EpisodeSettings *>(new ::rust::MaybeUninit<::carla::rpc::EpisodeSettings>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::EpisodeSettings>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$EpisodeSettings$raw(::std::unique_ptr<::carla::rpc::EpisodeSettings> *ptr, ::carla::rpc::EpisodeSettings *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::EpisodeSettings>(raw);
}
::carla::rpc::EpisodeSettings const *cxxbridge1$unique_ptr$carla$rpc$EpisodeSettings$get(::std::unique_ptr<::carla::rpc::EpisodeSettings> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::EpisodeSettings *cxxbridge1$unique_ptr$carla$rpc$EpisodeSettings$release(::std::unique_ptr<::carla::rpc::EpisodeSettings> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$EpisodeSettings$drop(::std::unique_ptr<::carla::rpc::EpisodeSettings> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::EpisodeSettings>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::EpisodeSettings>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::EpisodeSettings>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$EpisodeSettings$null(::std::shared_ptr<::carla::rpc::EpisodeSettings> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::EpisodeSettings>();
}
::carla::rpc::EpisodeSettings *cxxbridge1$shared_ptr$carla$rpc$EpisodeSettings$uninit(::std::shared_ptr<::carla::rpc::EpisodeSettings> *ptr) noexcept {
  ::carla::rpc::EpisodeSettings *uninit = reinterpret_cast<::carla::rpc::EpisodeSettings *>(new ::rust::MaybeUninit<::carla::rpc::EpisodeSettings>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::EpisodeSettings>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$EpisodeSettings$clone(::std::shared_ptr<::carla::rpc::EpisodeSettings> const &self, ::std::shared_ptr<::carla::rpc::EpisodeSettings> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::EpisodeSettings>(self);
}
::carla::rpc::EpisodeSettings const *cxxbridge1$shared_ptr$carla$rpc$EpisodeSettings$get(::std::shared_ptr<::carla::rpc::EpisodeSettings> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$EpisodeSettings$drop(::std::shared_ptr<::carla::rpc::EpisodeSettings> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::EpisodeSettings>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::EpisodeSettings>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$EpisodeSettings$null(::std::weak_ptr<::carla::rpc::EpisodeSettings> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::EpisodeSettings>();
}
void cxxbridge1$weak_ptr$carla$rpc$EpisodeSettings$clone(::std::weak_ptr<::carla::rpc::EpisodeSettings> const &self, ::std::weak_ptr<::carla::rpc::EpisodeSettings> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::EpisodeSettings>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$EpisodeSettings$downgrade(::std::shared_ptr<::carla::rpc::EpisodeSettings> const &shared, ::std::weak_ptr<::carla::rpc::EpisodeSettings> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::EpisodeSettings>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$EpisodeSettings$upgrade(::std::weak_ptr<::carla::rpc::EpisodeSettings> const &weak, ::std::shared_ptr<::carla::rpc::EpisodeSettings> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::EpisodeSettings>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$EpisodeSettings$drop(::std::weak_ptr<::carla::rpc::EpisodeSettings> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::EpisodeSettings> *cxxbridge1$std$vector$carla$rpc$EpisodeSettings$new() noexcept {
  return new ::std::vector<::carla::rpc::EpisodeSettings>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$EpisodeSettings$size(::std::vector<::carla::rpc::EpisodeSettings> const &s) noexcept {
  return s.size();
}
::carla::rpc::EpisodeSettings *cxxbridge1$std$vector$carla$rpc$EpisodeSettings$get_unchecked(::std::vector<::carla::rpc::EpisodeSettings> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$EpisodeSettings$push_back(::std::vector<::carla::rpc::EpisodeSettings> *v, ::carla::rpc::EpisodeSettings *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$EpisodeSettings$pop_back(::std::vector<::carla::rpc::EpisodeSettings> *v, ::carla::rpc::EpisodeSettings *out) noexcept {
  ::new (out) ::carla::rpc::EpisodeSettings(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::EpisodeSettings>>::value, "definition of `::std::vector<::carla::rpc::EpisodeSettings>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::EpisodeSettings>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::EpisodeSettings>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$EpisodeSettings$null(::std::unique_ptr<::std::vector<::carla::rpc::EpisodeSettings>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::EpisodeSettings>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$EpisodeSettings$raw(::std::unique_ptr<::std::vector<::carla::rpc::EpisodeSettings>> *ptr, ::std::vector<::carla::rpc::EpisodeSettings> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::EpisodeSettings>>(raw);
}
::std::vector<::carla::rpc::EpisodeSettings> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$EpisodeSettings$get(::std::unique_ptr<::std::vector<::carla::rpc::EpisodeSettings>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::EpisodeSettings> *cxxbridge1$unique_ptr$std$vector$carla$rpc$EpisodeSettings$release(::std::unique_ptr<::std::vector<::carla::rpc::EpisodeSettings>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$EpisodeSettings$drop(::std::unique_ptr<::std::vector<::carla::rpc::EpisodeSettings>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::EpisodeSettings>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::CityObjectLabel>::value, "definition of `::carla::rpc::CityObjectLabel` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::CityObjectLabel>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::CityObjectLabel>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$CityObjectLabel$null(::std::unique_ptr<::carla::rpc::CityObjectLabel> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::CityObjectLabel>();
}
::carla::rpc::CityObjectLabel *cxxbridge1$unique_ptr$carla$rpc$CityObjectLabel$uninit(::std::unique_ptr<::carla::rpc::CityObjectLabel> *ptr) noexcept {
  ::carla::rpc::CityObjectLabel *uninit = reinterpret_cast<::carla::rpc::CityObjectLabel *>(new ::rust::MaybeUninit<::carla::rpc::CityObjectLabel>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::CityObjectLabel>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$CityObjectLabel$raw(::std::unique_ptr<::carla::rpc::CityObjectLabel> *ptr, ::carla::rpc::CityObjectLabel *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::CityObjectLabel>(raw);
}
::carla::rpc::CityObjectLabel const *cxxbridge1$unique_ptr$carla$rpc$CityObjectLabel$get(::std::unique_ptr<::carla::rpc::CityObjectLabel> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::CityObjectLabel *cxxbridge1$unique_ptr$carla$rpc$CityObjectLabel$release(::std::unique_ptr<::carla::rpc::CityObjectLabel> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$CityObjectLabel$drop(::std::unique_ptr<::carla::rpc::CityObjectLabel> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::CityObjectLabel>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::CityObjectLabel>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::CityObjectLabel>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$CityObjectLabel$null(::std::shared_ptr<::carla::rpc::CityObjectLabel> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::CityObjectLabel>();
}
::carla::rpc::CityObjectLabel *cxxbridge1$shared_ptr$carla$rpc$CityObjectLabel$uninit(::std::shared_ptr<::carla::rpc::CityObjectLabel> *ptr) noexcept {
  ::carla::rpc::CityObjectLabel *uninit = reinterpret_cast<::carla::rpc::CityObjectLabel *>(new ::rust::MaybeUninit<::carla::rpc::CityObjectLabel>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::CityObjectLabel>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$CityObjectLabel$clone(::std::shared_ptr<::carla::rpc::CityObjectLabel> const &self, ::std::shared_ptr<::carla::rpc::CityObjectLabel> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::CityObjectLabel>(self);
}
::carla::rpc::CityObjectLabel const *cxxbridge1$shared_ptr$carla$rpc$CityObjectLabel$get(::std::shared_ptr<::carla::rpc::CityObjectLabel> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$CityObjectLabel$drop(::std::shared_ptr<::carla::rpc::CityObjectLabel> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::CityObjectLabel>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::CityObjectLabel>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$CityObjectLabel$null(::std::weak_ptr<::carla::rpc::CityObjectLabel> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::CityObjectLabel>();
}
void cxxbridge1$weak_ptr$carla$rpc$CityObjectLabel$clone(::std::weak_ptr<::carla::rpc::CityObjectLabel> const &self, ::std::weak_ptr<::carla::rpc::CityObjectLabel> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::CityObjectLabel>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$CityObjectLabel$downgrade(::std::shared_ptr<::carla::rpc::CityObjectLabel> const &shared, ::std::weak_ptr<::carla::rpc::CityObjectLabel> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::CityObjectLabel>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$CityObjectLabel$upgrade(::std::weak_ptr<::carla::rpc::CityObjectLabel> const &weak, ::std::shared_ptr<::carla::rpc::CityObjectLabel> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::CityObjectLabel>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$CityObjectLabel$drop(::std::weak_ptr<::carla::rpc::CityObjectLabel> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::CityObjectLabel> *cxxbridge1$std$vector$carla$rpc$CityObjectLabel$new() noexcept {
  return new ::std::vector<::carla::rpc::CityObjectLabel>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$CityObjectLabel$size(::std::vector<::carla::rpc::CityObjectLabel> const &s) noexcept {
  return s.size();
}
::carla::rpc::CityObjectLabel *cxxbridge1$std$vector$carla$rpc$CityObjectLabel$get_unchecked(::std::vector<::carla::rpc::CityObjectLabel> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$CityObjectLabel$push_back(::std::vector<::carla::rpc::CityObjectLabel> *v, ::carla::rpc::CityObjectLabel *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$CityObjectLabel$pop_back(::std::vector<::carla::rpc::CityObjectLabel> *v, ::carla::rpc::CityObjectLabel *out) noexcept {
  ::new (out) ::carla::rpc::CityObjectLabel(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::CityObjectLabel>>::value, "definition of `::std::vector<::carla::rpc::CityObjectLabel>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::CityObjectLabel>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::CityObjectLabel>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$CityObjectLabel$null(::std::unique_ptr<::std::vector<::carla::rpc::CityObjectLabel>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::CityObjectLabel>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$CityObjectLabel$raw(::std::unique_ptr<::std::vector<::carla::rpc::CityObjectLabel>> *ptr, ::std::vector<::carla::rpc::CityObjectLabel> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::CityObjectLabel>>(raw);
}
::std::vector<::carla::rpc::CityObjectLabel> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$CityObjectLabel$get(::std::unique_ptr<::std::vector<::carla::rpc::CityObjectLabel>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::CityObjectLabel> *cxxbridge1$unique_ptr$std$vector$carla$rpc$CityObjectLabel$release(::std::unique_ptr<::std::vector<::carla::rpc::CityObjectLabel>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$CityObjectLabel$drop(::std::unique_ptr<::std::vector<::carla::rpc::CityObjectLabel>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::CityObjectLabel>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::LabelledPoint>::value, "definition of `::carla::rpc::LabelledPoint` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::LabelledPoint>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::LabelledPoint>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$LabelledPoint$null(::std::unique_ptr<::carla::rpc::LabelledPoint> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::LabelledPoint>();
}
::carla::rpc::LabelledPoint *cxxbridge1$unique_ptr$carla$rpc$LabelledPoint$uninit(::std::unique_ptr<::carla::rpc::LabelledPoint> *ptr) noexcept {
  ::carla::rpc::LabelledPoint *uninit = reinterpret_cast<::carla::rpc::LabelledPoint *>(new ::rust::MaybeUninit<::carla::rpc::LabelledPoint>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::LabelledPoint>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$LabelledPoint$raw(::std::unique_ptr<::carla::rpc::LabelledPoint> *ptr, ::carla::rpc::LabelledPoint *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::LabelledPoint>(raw);
}
::carla::rpc::LabelledPoint const *cxxbridge1$unique_ptr$carla$rpc$LabelledPoint$get(::std::unique_ptr<::carla::rpc::LabelledPoint> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::LabelledPoint *cxxbridge1$unique_ptr$carla$rpc$LabelledPoint$release(::std::unique_ptr<::carla::rpc::LabelledPoint> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$LabelledPoint$drop(::std::unique_ptr<::carla::rpc::LabelledPoint> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::LabelledPoint>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::LabelledPoint>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::LabelledPoint>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$LabelledPoint$null(::std::shared_ptr<::carla::rpc::LabelledPoint> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::LabelledPoint>();
}
::carla::rpc::LabelledPoint *cxxbridge1$shared_ptr$carla$rpc$LabelledPoint$uninit(::std::shared_ptr<::carla::rpc::LabelledPoint> *ptr) noexcept {
  ::carla::rpc::LabelledPoint *uninit = reinterpret_cast<::carla::rpc::LabelledPoint *>(new ::rust::MaybeUninit<::carla::rpc::LabelledPoint>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::LabelledPoint>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$LabelledPoint$clone(::std::shared_ptr<::carla::rpc::LabelledPoint> const &self, ::std::shared_ptr<::carla::rpc::LabelledPoint> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::LabelledPoint>(self);
}
::carla::rpc::LabelledPoint const *cxxbridge1$shared_ptr$carla$rpc$LabelledPoint$get(::std::shared_ptr<::carla::rpc::LabelledPoint> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$LabelledPoint$drop(::std::shared_ptr<::carla::rpc::LabelledPoint> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::LabelledPoint>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::LabelledPoint>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$LabelledPoint$null(::std::weak_ptr<::carla::rpc::LabelledPoint> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::LabelledPoint>();
}
void cxxbridge1$weak_ptr$carla$rpc$LabelledPoint$clone(::std::weak_ptr<::carla::rpc::LabelledPoint> const &self, ::std::weak_ptr<::carla::rpc::LabelledPoint> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::LabelledPoint>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$LabelledPoint$downgrade(::std::shared_ptr<::carla::rpc::LabelledPoint> const &shared, ::std::weak_ptr<::carla::rpc::LabelledPoint> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::LabelledPoint>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$LabelledPoint$upgrade(::std::weak_ptr<::carla::rpc::LabelledPoint> const &weak, ::std::shared_ptr<::carla::rpc::LabelledPoint> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::LabelledPoint>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$LabelledPoint$drop(::std::weak_ptr<::carla::rpc::LabelledPoint> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::LabelledPoint> *cxxbridge1$std$vector$carla$rpc$LabelledPoint$new() noexcept {
  return new ::std::vector<::carla::rpc::LabelledPoint>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$LabelledPoint$size(::std::vector<::carla::rpc::LabelledPoint> const &s) noexcept {
  return s.size();
}
::carla::rpc::LabelledPoint *cxxbridge1$std$vector$carla$rpc$LabelledPoint$get_unchecked(::std::vector<::carla::rpc::LabelledPoint> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$LabelledPoint$push_back(::std::vector<::carla::rpc::LabelledPoint> *v, ::carla::rpc::LabelledPoint *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$LabelledPoint$pop_back(::std::vector<::carla::rpc::LabelledPoint> *v, ::carla::rpc::LabelledPoint *out) noexcept {
  ::new (out) ::carla::rpc::LabelledPoint(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::LabelledPoint>>::value, "definition of `::std::vector<::carla::rpc::LabelledPoint>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::LabelledPoint>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::LabelledPoint>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$LabelledPoint$null(::std::unique_ptr<::std::vector<::carla::rpc::LabelledPoint>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::LabelledPoint>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$LabelledPoint$raw(::std::unique_ptr<::std::vector<::carla::rpc::LabelledPoint>> *ptr, ::std::vector<::carla::rpc::LabelledPoint> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::LabelledPoint>>(raw);
}
::std::vector<::carla::rpc::LabelledPoint> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$LabelledPoint$get(::std::unique_ptr<::std::vector<::carla::rpc::LabelledPoint>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::LabelledPoint> *cxxbridge1$unique_ptr$std$vector$carla$rpc$LabelledPoint$release(::std::unique_ptr<::std::vector<::carla::rpc::LabelledPoint>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$LabelledPoint$drop(::std::unique_ptr<::std::vector<::carla::rpc::LabelledPoint>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::LabelledPoint>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::GearPhysicsControl>::value, "definition of `::carla::rpc::GearPhysicsControl` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::GearPhysicsControl>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::GearPhysicsControl>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$GearPhysicsControl$null(::std::unique_ptr<::carla::rpc::GearPhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::GearPhysicsControl>();
}
::carla::rpc::GearPhysicsControl *cxxbridge1$unique_ptr$carla$rpc$GearPhysicsControl$uninit(::std::unique_ptr<::carla::rpc::GearPhysicsControl> *ptr) noexcept {
  ::carla::rpc::GearPhysicsControl *uninit = reinterpret_cast<::carla::rpc::GearPhysicsControl *>(new ::rust::MaybeUninit<::carla::rpc::GearPhysicsControl>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::GearPhysicsControl>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$GearPhysicsControl$raw(::std::unique_ptr<::carla::rpc::GearPhysicsControl> *ptr, ::carla::rpc::GearPhysicsControl *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::GearPhysicsControl>(raw);
}
::carla::rpc::GearPhysicsControl const *cxxbridge1$unique_ptr$carla$rpc$GearPhysicsControl$get(::std::unique_ptr<::carla::rpc::GearPhysicsControl> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::GearPhysicsControl *cxxbridge1$unique_ptr$carla$rpc$GearPhysicsControl$release(::std::unique_ptr<::carla::rpc::GearPhysicsControl> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$GearPhysicsControl$drop(::std::unique_ptr<::carla::rpc::GearPhysicsControl> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::GearPhysicsControl>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::GearPhysicsControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::GearPhysicsControl>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$GearPhysicsControl$null(::std::shared_ptr<::carla::rpc::GearPhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::GearPhysicsControl>();
}
::carla::rpc::GearPhysicsControl *cxxbridge1$shared_ptr$carla$rpc$GearPhysicsControl$uninit(::std::shared_ptr<::carla::rpc::GearPhysicsControl> *ptr) noexcept {
  ::carla::rpc::GearPhysicsControl *uninit = reinterpret_cast<::carla::rpc::GearPhysicsControl *>(new ::rust::MaybeUninit<::carla::rpc::GearPhysicsControl>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::GearPhysicsControl>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$GearPhysicsControl$clone(::std::shared_ptr<::carla::rpc::GearPhysicsControl> const &self, ::std::shared_ptr<::carla::rpc::GearPhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::GearPhysicsControl>(self);
}
::carla::rpc::GearPhysicsControl const *cxxbridge1$shared_ptr$carla$rpc$GearPhysicsControl$get(::std::shared_ptr<::carla::rpc::GearPhysicsControl> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$GearPhysicsControl$drop(::std::shared_ptr<::carla::rpc::GearPhysicsControl> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::GearPhysicsControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::GearPhysicsControl>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$GearPhysicsControl$null(::std::weak_ptr<::carla::rpc::GearPhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::GearPhysicsControl>();
}
void cxxbridge1$weak_ptr$carla$rpc$GearPhysicsControl$clone(::std::weak_ptr<::carla::rpc::GearPhysicsControl> const &self, ::std::weak_ptr<::carla::rpc::GearPhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::GearPhysicsControl>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$GearPhysicsControl$downgrade(::std::shared_ptr<::carla::rpc::GearPhysicsControl> const &shared, ::std::weak_ptr<::carla::rpc::GearPhysicsControl> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::GearPhysicsControl>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$GearPhysicsControl$upgrade(::std::weak_ptr<::carla::rpc::GearPhysicsControl> const &weak, ::std::shared_ptr<::carla::rpc::GearPhysicsControl> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::GearPhysicsControl>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$GearPhysicsControl$drop(::std::weak_ptr<::carla::rpc::GearPhysicsControl> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::GearPhysicsControl> *cxxbridge1$std$vector$carla$rpc$GearPhysicsControl$new() noexcept {
  return new ::std::vector<::carla::rpc::GearPhysicsControl>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$GearPhysicsControl$size(::std::vector<::carla::rpc::GearPhysicsControl> const &s) noexcept {
  return s.size();
}
::carla::rpc::GearPhysicsControl *cxxbridge1$std$vector$carla$rpc$GearPhysicsControl$get_unchecked(::std::vector<::carla::rpc::GearPhysicsControl> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$GearPhysicsControl$push_back(::std::vector<::carla::rpc::GearPhysicsControl> *v, ::carla::rpc::GearPhysicsControl *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$GearPhysicsControl$pop_back(::std::vector<::carla::rpc::GearPhysicsControl> *v, ::carla::rpc::GearPhysicsControl *out) noexcept {
  ::new (out) ::carla::rpc::GearPhysicsControl(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::GearPhysicsControl>>::value, "definition of `::std::vector<::carla::rpc::GearPhysicsControl>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::GearPhysicsControl>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::GearPhysicsControl>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$GearPhysicsControl$null(::std::unique_ptr<::std::vector<::carla::rpc::GearPhysicsControl>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::GearPhysicsControl>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$GearPhysicsControl$raw(::std::unique_ptr<::std::vector<::carla::rpc::GearPhysicsControl>> *ptr, ::std::vector<::carla::rpc::GearPhysicsControl> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::GearPhysicsControl>>(raw);
}
::std::vector<::carla::rpc::GearPhysicsControl> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$GearPhysicsControl$get(::std::unique_ptr<::std::vector<::carla::rpc::GearPhysicsControl>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::GearPhysicsControl> *cxxbridge1$unique_ptr$std$vector$carla$rpc$GearPhysicsControl$release(::std::unique_ptr<::std::vector<::carla::rpc::GearPhysicsControl>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$GearPhysicsControl$drop(::std::unique_ptr<::std::vector<::carla::rpc::GearPhysicsControl>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::GearPhysicsControl>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::WheelPhysicsControl>::value, "definition of `::carla::rpc::WheelPhysicsControl` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::WheelPhysicsControl>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::WheelPhysicsControl>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$WheelPhysicsControl$null(::std::unique_ptr<::carla::rpc::WheelPhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WheelPhysicsControl>();
}
::carla::rpc::WheelPhysicsControl *cxxbridge1$unique_ptr$carla$rpc$WheelPhysicsControl$uninit(::std::unique_ptr<::carla::rpc::WheelPhysicsControl> *ptr) noexcept {
  ::carla::rpc::WheelPhysicsControl *uninit = reinterpret_cast<::carla::rpc::WheelPhysicsControl *>(new ::rust::MaybeUninit<::carla::rpc::WheelPhysicsControl>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WheelPhysicsControl>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$WheelPhysicsControl$raw(::std::unique_ptr<::carla::rpc::WheelPhysicsControl> *ptr, ::carla::rpc::WheelPhysicsControl *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WheelPhysicsControl>(raw);
}
::carla::rpc::WheelPhysicsControl const *cxxbridge1$unique_ptr$carla$rpc$WheelPhysicsControl$get(::std::unique_ptr<::carla::rpc::WheelPhysicsControl> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::WheelPhysicsControl *cxxbridge1$unique_ptr$carla$rpc$WheelPhysicsControl$release(::std::unique_ptr<::carla::rpc::WheelPhysicsControl> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$WheelPhysicsControl$drop(::std::unique_ptr<::carla::rpc::WheelPhysicsControl> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::WheelPhysicsControl>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::WheelPhysicsControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::WheelPhysicsControl>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$WheelPhysicsControl$null(::std::shared_ptr<::carla::rpc::WheelPhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WheelPhysicsControl>();
}
::carla::rpc::WheelPhysicsControl *cxxbridge1$shared_ptr$carla$rpc$WheelPhysicsControl$uninit(::std::shared_ptr<::carla::rpc::WheelPhysicsControl> *ptr) noexcept {
  ::carla::rpc::WheelPhysicsControl *uninit = reinterpret_cast<::carla::rpc::WheelPhysicsControl *>(new ::rust::MaybeUninit<::carla::rpc::WheelPhysicsControl>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WheelPhysicsControl>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$WheelPhysicsControl$clone(::std::shared_ptr<::carla::rpc::WheelPhysicsControl> const &self, ::std::shared_ptr<::carla::rpc::WheelPhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WheelPhysicsControl>(self);
}
::carla::rpc::WheelPhysicsControl const *cxxbridge1$shared_ptr$carla$rpc$WheelPhysicsControl$get(::std::shared_ptr<::carla::rpc::WheelPhysicsControl> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$WheelPhysicsControl$drop(::std::shared_ptr<::carla::rpc::WheelPhysicsControl> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::WheelPhysicsControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::WheelPhysicsControl>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$WheelPhysicsControl$null(::std::weak_ptr<::carla::rpc::WheelPhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::WheelPhysicsControl>();
}
void cxxbridge1$weak_ptr$carla$rpc$WheelPhysicsControl$clone(::std::weak_ptr<::carla::rpc::WheelPhysicsControl> const &self, ::std::weak_ptr<::carla::rpc::WheelPhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::WheelPhysicsControl>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$WheelPhysicsControl$downgrade(::std::shared_ptr<::carla::rpc::WheelPhysicsControl> const &shared, ::std::weak_ptr<::carla::rpc::WheelPhysicsControl> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::WheelPhysicsControl>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$WheelPhysicsControl$upgrade(::std::weak_ptr<::carla::rpc::WheelPhysicsControl> const &weak, ::std::shared_ptr<::carla::rpc::WheelPhysicsControl> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::WheelPhysicsControl>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$WheelPhysicsControl$drop(::std::weak_ptr<::carla::rpc::WheelPhysicsControl> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::WheelPhysicsControl> *cxxbridge1$std$vector$carla$rpc$WheelPhysicsControl$new() noexcept {
  return new ::std::vector<::carla::rpc::WheelPhysicsControl>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$WheelPhysicsControl$size(::std::vector<::carla::rpc::WheelPhysicsControl> const &s) noexcept {
  return s.size();
}
::carla::rpc::WheelPhysicsControl *cxxbridge1$std$vector$carla$rpc$WheelPhysicsControl$get_unchecked(::std::vector<::carla::rpc::WheelPhysicsControl> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$WheelPhysicsControl$push_back(::std::vector<::carla::rpc::WheelPhysicsControl> *v, ::carla::rpc::WheelPhysicsControl *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$WheelPhysicsControl$pop_back(::std::vector<::carla::rpc::WheelPhysicsControl> *v, ::carla::rpc::WheelPhysicsControl *out) noexcept {
  ::new (out) ::carla::rpc::WheelPhysicsControl(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::WheelPhysicsControl>>::value, "definition of `::std::vector<::carla::rpc::WheelPhysicsControl>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::WheelPhysicsControl>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::WheelPhysicsControl>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WheelPhysicsControl$null(::std::unique_ptr<::std::vector<::carla::rpc::WheelPhysicsControl>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::WheelPhysicsControl>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WheelPhysicsControl$raw(::std::unique_ptr<::std::vector<::carla::rpc::WheelPhysicsControl>> *ptr, ::std::vector<::carla::rpc::WheelPhysicsControl> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::WheelPhysicsControl>>(raw);
}
::std::vector<::carla::rpc::WheelPhysicsControl> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$WheelPhysicsControl$get(::std::unique_ptr<::std::vector<::carla::rpc::WheelPhysicsControl>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::WheelPhysicsControl> *cxxbridge1$unique_ptr$std$vector$carla$rpc$WheelPhysicsControl$release(::std::unique_ptr<::std::vector<::carla::rpc::WheelPhysicsControl>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WheelPhysicsControl$drop(::std::unique_ptr<::std::vector<::carla::rpc::WheelPhysicsControl>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::WheelPhysicsControl>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::WeatherParameters>::value, "definition of `::carla::rpc::WeatherParameters` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::WeatherParameters>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::WeatherParameters>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$WeatherParameters$null(::std::unique_ptr<::carla::rpc::WeatherParameters> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WeatherParameters>();
}
::carla::rpc::WeatherParameters *cxxbridge1$unique_ptr$carla$rpc$WeatherParameters$uninit(::std::unique_ptr<::carla::rpc::WeatherParameters> *ptr) noexcept {
  ::carla::rpc::WeatherParameters *uninit = reinterpret_cast<::carla::rpc::WeatherParameters *>(new ::rust::MaybeUninit<::carla::rpc::WeatherParameters>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WeatherParameters>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$WeatherParameters$raw(::std::unique_ptr<::carla::rpc::WeatherParameters> *ptr, ::carla::rpc::WeatherParameters *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WeatherParameters>(raw);
}
::carla::rpc::WeatherParameters const *cxxbridge1$unique_ptr$carla$rpc$WeatherParameters$get(::std::unique_ptr<::carla::rpc::WeatherParameters> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::WeatherParameters *cxxbridge1$unique_ptr$carla$rpc$WeatherParameters$release(::std::unique_ptr<::carla::rpc::WeatherParameters> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$WeatherParameters$drop(::std::unique_ptr<::carla::rpc::WeatherParameters> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::WeatherParameters>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::WeatherParameters>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::WeatherParameters>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$WeatherParameters$null(::std::shared_ptr<::carla::rpc::WeatherParameters> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WeatherParameters>();
}
::carla::rpc::WeatherParameters *cxxbridge1$shared_ptr$carla$rpc$WeatherParameters$uninit(::std::shared_ptr<::carla::rpc::WeatherParameters> *ptr) noexcept {
  ::carla::rpc::WeatherParameters *uninit = reinterpret_cast<::carla::rpc::WeatherParameters *>(new ::rust::MaybeUninit<::carla::rpc::WeatherParameters>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WeatherParameters>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$WeatherParameters$clone(::std::shared_ptr<::carla::rpc::WeatherParameters> const &self, ::std::shared_ptr<::carla::rpc::WeatherParameters> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WeatherParameters>(self);
}
::carla::rpc::WeatherParameters const *cxxbridge1$shared_ptr$carla$rpc$WeatherParameters$get(::std::shared_ptr<::carla::rpc::WeatherParameters> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$WeatherParameters$drop(::std::shared_ptr<::carla::rpc::WeatherParameters> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::WeatherParameters>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::WeatherParameters>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$WeatherParameters$null(::std::weak_ptr<::carla::rpc::WeatherParameters> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::WeatherParameters>();
}
void cxxbridge1$weak_ptr$carla$rpc$WeatherParameters$clone(::std::weak_ptr<::carla::rpc::WeatherParameters> const &self, ::std::weak_ptr<::carla::rpc::WeatherParameters> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::WeatherParameters>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$WeatherParameters$downgrade(::std::shared_ptr<::carla::rpc::WeatherParameters> const &shared, ::std::weak_ptr<::carla::rpc::WeatherParameters> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::WeatherParameters>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$WeatherParameters$upgrade(::std::weak_ptr<::carla::rpc::WeatherParameters> const &weak, ::std::shared_ptr<::carla::rpc::WeatherParameters> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::WeatherParameters>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$WeatherParameters$drop(::std::weak_ptr<::carla::rpc::WeatherParameters> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::WeatherParameters> *cxxbridge1$std$vector$carla$rpc$WeatherParameters$new() noexcept {
  return new ::std::vector<::carla::rpc::WeatherParameters>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$WeatherParameters$size(::std::vector<::carla::rpc::WeatherParameters> const &s) noexcept {
  return s.size();
}
::carla::rpc::WeatherParameters *cxxbridge1$std$vector$carla$rpc$WeatherParameters$get_unchecked(::std::vector<::carla::rpc::WeatherParameters> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$WeatherParameters$push_back(::std::vector<::carla::rpc::WeatherParameters> *v, ::carla::rpc::WeatherParameters *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$WeatherParameters$pop_back(::std::vector<::carla::rpc::WeatherParameters> *v, ::carla::rpc::WeatherParameters *out) noexcept {
  ::new (out) ::carla::rpc::WeatherParameters(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::WeatherParameters>>::value, "definition of `::std::vector<::carla::rpc::WeatherParameters>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::WeatherParameters>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::WeatherParameters>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WeatherParameters$null(::std::unique_ptr<::std::vector<::carla::rpc::WeatherParameters>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::WeatherParameters>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WeatherParameters$raw(::std::unique_ptr<::std::vector<::carla::rpc::WeatherParameters>> *ptr, ::std::vector<::carla::rpc::WeatherParameters> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::WeatherParameters>>(raw);
}
::std::vector<::carla::rpc::WeatherParameters> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$WeatherParameters$get(::std::unique_ptr<::std::vector<::carla::rpc::WeatherParameters>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::WeatherParameters> *cxxbridge1$unique_ptr$std$vector$carla$rpc$WeatherParameters$release(::std::unique_ptr<::std::vector<::carla::rpc::WeatherParameters>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WeatherParameters$drop(::std::unique_ptr<::std::vector<::carla::rpc::WeatherParameters>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::WeatherParameters>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::VehicleLightState>::value, "definition of `::carla::rpc::VehicleLightState` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::VehicleLightState>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::VehicleLightState>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$VehicleLightState$null(::std::unique_ptr<::carla::rpc::VehicleLightState> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleLightState>();
}
::carla::rpc::VehicleLightState *cxxbridge1$unique_ptr$carla$rpc$VehicleLightState$uninit(::std::unique_ptr<::carla::rpc::VehicleLightState> *ptr) noexcept {
  ::carla::rpc::VehicleLightState *uninit = reinterpret_cast<::carla::rpc::VehicleLightState *>(new ::rust::MaybeUninit<::carla::rpc::VehicleLightState>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleLightState>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleLightState$raw(::std::unique_ptr<::carla::rpc::VehicleLightState> *ptr, ::carla::rpc::VehicleLightState *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleLightState>(raw);
}
::carla::rpc::VehicleLightState const *cxxbridge1$unique_ptr$carla$rpc$VehicleLightState$get(::std::unique_ptr<::carla::rpc::VehicleLightState> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::VehicleLightState *cxxbridge1$unique_ptr$carla$rpc$VehicleLightState$release(::std::unique_ptr<::carla::rpc::VehicleLightState> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleLightState$drop(::std::unique_ptr<::carla::rpc::VehicleLightState> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::VehicleLightState>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::VehicleLightState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::VehicleLightState>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$VehicleLightState$null(::std::shared_ptr<::carla::rpc::VehicleLightState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleLightState>();
}
::carla::rpc::VehicleLightState *cxxbridge1$shared_ptr$carla$rpc$VehicleLightState$uninit(::std::shared_ptr<::carla::rpc::VehicleLightState> *ptr) noexcept {
  ::carla::rpc::VehicleLightState *uninit = reinterpret_cast<::carla::rpc::VehicleLightState *>(new ::rust::MaybeUninit<::carla::rpc::VehicleLightState>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleLightState>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleLightState$clone(::std::shared_ptr<::carla::rpc::VehicleLightState> const &self, ::std::shared_ptr<::carla::rpc::VehicleLightState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleLightState>(self);
}
::carla::rpc::VehicleLightState const *cxxbridge1$shared_ptr$carla$rpc$VehicleLightState$get(::std::shared_ptr<::carla::rpc::VehicleLightState> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleLightState$drop(::std::shared_ptr<::carla::rpc::VehicleLightState> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::VehicleLightState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::VehicleLightState>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$VehicleLightState$null(::std::weak_ptr<::carla::rpc::VehicleLightState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleLightState>();
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleLightState$clone(::std::weak_ptr<::carla::rpc::VehicleLightState> const &self, ::std::weak_ptr<::carla::rpc::VehicleLightState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleLightState>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleLightState$downgrade(::std::shared_ptr<::carla::rpc::VehicleLightState> const &shared, ::std::weak_ptr<::carla::rpc::VehicleLightState> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::VehicleLightState>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleLightState$upgrade(::std::weak_ptr<::carla::rpc::VehicleLightState> const &weak, ::std::shared_ptr<::carla::rpc::VehicleLightState> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::VehicleLightState>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleLightState$drop(::std::weak_ptr<::carla::rpc::VehicleLightState> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::VehicleLightState> *cxxbridge1$std$vector$carla$rpc$VehicleLightState$new() noexcept {
  return new ::std::vector<::carla::rpc::VehicleLightState>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$VehicleLightState$size(::std::vector<::carla::rpc::VehicleLightState> const &s) noexcept {
  return s.size();
}
::carla::rpc::VehicleLightState *cxxbridge1$std$vector$carla$rpc$VehicleLightState$get_unchecked(::std::vector<::carla::rpc::VehicleLightState> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$VehicleLightState$push_back(::std::vector<::carla::rpc::VehicleLightState> *v, ::carla::rpc::VehicleLightState *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$VehicleLightState$pop_back(::std::vector<::carla::rpc::VehicleLightState> *v, ::carla::rpc::VehicleLightState *out) noexcept {
  ::new (out) ::carla::rpc::VehicleLightState(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleLightState>>::value, "definition of `::std::vector<::carla::rpc::VehicleLightState>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleLightState$null(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleLightState$raw(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState>> *ptr, ::std::vector<::carla::rpc::VehicleLightState> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState>>(raw);
}
::std::vector<::carla::rpc::VehicleLightState> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleLightState$get(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::VehicleLightState> *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleLightState$release(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleLightState$drop(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleLightState>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::AckermannControllerSettings>::value, "definition of `::carla::rpc::AckermannControllerSettings` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::AckermannControllerSettings>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::AckermannControllerSettings>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$AckermannControllerSettings$null(::std::unique_ptr<::carla::rpc::AckermannControllerSettings> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::AckermannControllerSettings>();
}
::carla::rpc::AckermannControllerSettings *cxxbridge1$unique_ptr$carla$rpc$AckermannControllerSettings$uninit(::std::unique_ptr<::carla::rpc::AckermannControllerSettings> *ptr) noexcept {
  ::carla::rpc::AckermannControllerSettings *uninit = reinterpret_cast<::carla::rpc::AckermannControllerSettings *>(new ::rust::MaybeUninit<::carla::rpc::AckermannControllerSettings>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::AckermannControllerSettings>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$AckermannControllerSettings$raw(::std::unique_ptr<::carla::rpc::AckermannControllerSettings> *ptr, ::carla::rpc::AckermannControllerSettings *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::AckermannControllerSettings>(raw);
}
::carla::rpc::AckermannControllerSettings const *cxxbridge1$unique_ptr$carla$rpc$AckermannControllerSettings$get(::std::unique_ptr<::carla::rpc::AckermannControllerSettings> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::AckermannControllerSettings *cxxbridge1$unique_ptr$carla$rpc$AckermannControllerSettings$release(::std::unique_ptr<::carla::rpc::AckermannControllerSettings> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$AckermannControllerSettings$drop(::std::unique_ptr<::carla::rpc::AckermannControllerSettings> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::AckermannControllerSettings>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::AckermannControllerSettings>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::AckermannControllerSettings>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$AckermannControllerSettings$null(::std::shared_ptr<::carla::rpc::AckermannControllerSettings> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::AckermannControllerSettings>();
}
::carla::rpc::AckermannControllerSettings *cxxbridge1$shared_ptr$carla$rpc$AckermannControllerSettings$uninit(::std::shared_ptr<::carla::rpc::AckermannControllerSettings> *ptr) noexcept {
  ::carla::rpc::AckermannControllerSettings *uninit = reinterpret_cast<::carla::rpc::AckermannControllerSettings *>(new ::rust::MaybeUninit<::carla::rpc::AckermannControllerSettings>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::AckermannControllerSettings>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$AckermannControllerSettings$clone(::std::shared_ptr<::carla::rpc::AckermannControllerSettings> const &self, ::std::shared_ptr<::carla::rpc::AckermannControllerSettings> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::AckermannControllerSettings>(self);
}
::carla::rpc::AckermannControllerSettings const *cxxbridge1$shared_ptr$carla$rpc$AckermannControllerSettings$get(::std::shared_ptr<::carla::rpc::AckermannControllerSettings> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$AckermannControllerSettings$drop(::std::shared_ptr<::carla::rpc::AckermannControllerSettings> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::AckermannControllerSettings>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::AckermannControllerSettings>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$AckermannControllerSettings$null(::std::weak_ptr<::carla::rpc::AckermannControllerSettings> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::AckermannControllerSettings>();
}
void cxxbridge1$weak_ptr$carla$rpc$AckermannControllerSettings$clone(::std::weak_ptr<::carla::rpc::AckermannControllerSettings> const &self, ::std::weak_ptr<::carla::rpc::AckermannControllerSettings> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::AckermannControllerSettings>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$AckermannControllerSettings$downgrade(::std::shared_ptr<::carla::rpc::AckermannControllerSettings> const &shared, ::std::weak_ptr<::carla::rpc::AckermannControllerSettings> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::AckermannControllerSettings>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$AckermannControllerSettings$upgrade(::std::weak_ptr<::carla::rpc::AckermannControllerSettings> const &weak, ::std::shared_ptr<::carla::rpc::AckermannControllerSettings> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::AckermannControllerSettings>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$AckermannControllerSettings$drop(::std::weak_ptr<::carla::rpc::AckermannControllerSettings> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::AckermannControllerSettings> *cxxbridge1$std$vector$carla$rpc$AckermannControllerSettings$new() noexcept {
  return new ::std::vector<::carla::rpc::AckermannControllerSettings>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$AckermannControllerSettings$size(::std::vector<::carla::rpc::AckermannControllerSettings> const &s) noexcept {
  return s.size();
}
::carla::rpc::AckermannControllerSettings *cxxbridge1$std$vector$carla$rpc$AckermannControllerSettings$get_unchecked(::std::vector<::carla::rpc::AckermannControllerSettings> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$AckermannControllerSettings$push_back(::std::vector<::carla::rpc::AckermannControllerSettings> *v, ::carla::rpc::AckermannControllerSettings *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$AckermannControllerSettings$pop_back(::std::vector<::carla::rpc::AckermannControllerSettings> *v, ::carla::rpc::AckermannControllerSettings *out) noexcept {
  ::new (out) ::carla::rpc::AckermannControllerSettings(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::AckermannControllerSettings>>::value, "definition of `::std::vector<::carla::rpc::AckermannControllerSettings>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::AckermannControllerSettings>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::AckermannControllerSettings>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$AckermannControllerSettings$null(::std::unique_ptr<::std::vector<::carla::rpc::AckermannControllerSettings>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::AckermannControllerSettings>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$AckermannControllerSettings$raw(::std::unique_ptr<::std::vector<::carla::rpc::AckermannControllerSettings>> *ptr, ::std::vector<::carla::rpc::AckermannControllerSettings> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::AckermannControllerSettings>>(raw);
}
::std::vector<::carla::rpc::AckermannControllerSettings> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$AckermannControllerSettings$get(::std::unique_ptr<::std::vector<::carla::rpc::AckermannControllerSettings>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::AckermannControllerSettings> *cxxbridge1$unique_ptr$std$vector$carla$rpc$AckermannControllerSettings$release(::std::unique_ptr<::std::vector<::carla::rpc::AckermannControllerSettings>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$AckermannControllerSettings$drop(::std::unique_ptr<::std::vector<::carla::rpc::AckermannControllerSettings>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::AckermannControllerSettings>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::VehicleAckermannControl>::value, "definition of `::carla::rpc::VehicleAckermannControl` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::VehicleAckermannControl>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::VehicleAckermannControl>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$VehicleAckermannControl$null(::std::unique_ptr<::carla::rpc::VehicleAckermannControl> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleAckermannControl>();
}
::carla::rpc::VehicleAckermannControl *cxxbridge1$unique_ptr$carla$rpc$VehicleAckermannControl$uninit(::std::unique_ptr<::carla::rpc::VehicleAckermannControl> *ptr) noexcept {
  ::carla::rpc::VehicleAckermannControl *uninit = reinterpret_cast<::carla::rpc::VehicleAckermannControl *>(new ::rust::MaybeUninit<::carla::rpc::VehicleAckermannControl>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleAckermannControl>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleAckermannControl$raw(::std::unique_ptr<::carla::rpc::VehicleAckermannControl> *ptr, ::carla::rpc::VehicleAckermannControl *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleAckermannControl>(raw);
}
::carla::rpc::VehicleAckermannControl const *cxxbridge1$unique_ptr$carla$rpc$VehicleAckermannControl$get(::std::unique_ptr<::carla::rpc::VehicleAckermannControl> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::VehicleAckermannControl *cxxbridge1$unique_ptr$carla$rpc$VehicleAckermannControl$release(::std::unique_ptr<::carla::rpc::VehicleAckermannControl> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleAckermannControl$drop(::std::unique_ptr<::carla::rpc::VehicleAckermannControl> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::VehicleAckermannControl>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::VehicleAckermannControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::VehicleAckermannControl>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$VehicleAckermannControl$null(::std::shared_ptr<::carla::rpc::VehicleAckermannControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleAckermannControl>();
}
::carla::rpc::VehicleAckermannControl *cxxbridge1$shared_ptr$carla$rpc$VehicleAckermannControl$uninit(::std::shared_ptr<::carla::rpc::VehicleAckermannControl> *ptr) noexcept {
  ::carla::rpc::VehicleAckermannControl *uninit = reinterpret_cast<::carla::rpc::VehicleAckermannControl *>(new ::rust::MaybeUninit<::carla::rpc::VehicleAckermannControl>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleAckermannControl>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleAckermannControl$clone(::std::shared_ptr<::carla::rpc::VehicleAckermannControl> const &self, ::std::shared_ptr<::carla::rpc::VehicleAckermannControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleAckermannControl>(self);
}
::carla::rpc::VehicleAckermannControl const *cxxbridge1$shared_ptr$carla$rpc$VehicleAckermannControl$get(::std::shared_ptr<::carla::rpc::VehicleAckermannControl> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleAckermannControl$drop(::std::shared_ptr<::carla::rpc::VehicleAckermannControl> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::VehicleAckermannControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::VehicleAckermannControl>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$VehicleAckermannControl$null(::std::weak_ptr<::carla::rpc::VehicleAckermannControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleAckermannControl>();
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleAckermannControl$clone(::std::weak_ptr<::carla::rpc::VehicleAckermannControl> const &self, ::std::weak_ptr<::carla::rpc::VehicleAckermannControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleAckermannControl>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleAckermannControl$downgrade(::std::shared_ptr<::carla::rpc::VehicleAckermannControl> const &shared, ::std::weak_ptr<::carla::rpc::VehicleAckermannControl> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::VehicleAckermannControl>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleAckermannControl$upgrade(::std::weak_ptr<::carla::rpc::VehicleAckermannControl> const &weak, ::std::shared_ptr<::carla::rpc::VehicleAckermannControl> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::VehicleAckermannControl>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleAckermannControl$drop(::std::weak_ptr<::carla::rpc::VehicleAckermannControl> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::VehicleAckermannControl> *cxxbridge1$std$vector$carla$rpc$VehicleAckermannControl$new() noexcept {
  return new ::std::vector<::carla::rpc::VehicleAckermannControl>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$VehicleAckermannControl$size(::std::vector<::carla::rpc::VehicleAckermannControl> const &s) noexcept {
  return s.size();
}
::carla::rpc::VehicleAckermannControl *cxxbridge1$std$vector$carla$rpc$VehicleAckermannControl$get_unchecked(::std::vector<::carla::rpc::VehicleAckermannControl> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$VehicleAckermannControl$push_back(::std::vector<::carla::rpc::VehicleAckermannControl> *v, ::carla::rpc::VehicleAckermannControl *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$VehicleAckermannControl$pop_back(::std::vector<::carla::rpc::VehicleAckermannControl> *v, ::carla::rpc::VehicleAckermannControl *out) noexcept {
  ::new (out) ::carla::rpc::VehicleAckermannControl(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleAckermannControl>>::value, "definition of `::std::vector<::carla::rpc::VehicleAckermannControl>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleAckermannControl>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleAckermannControl>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleAckermannControl$null(::std::unique_ptr<::std::vector<::carla::rpc::VehicleAckermannControl>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleAckermannControl>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleAckermannControl$raw(::std::unique_ptr<::std::vector<::carla::rpc::VehicleAckermannControl>> *ptr, ::std::vector<::carla::rpc::VehicleAckermannControl> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleAckermannControl>>(raw);
}
::std::vector<::carla::rpc::VehicleAckermannControl> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleAckermannControl$get(::std::unique_ptr<::std::vector<::carla::rpc::VehicleAckermannControl>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::VehicleAckermannControl> *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleAckermannControl$release(::std::unique_ptr<::std::vector<::carla::rpc::VehicleAckermannControl>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleAckermannControl$drop(::std::unique_ptr<::std::vector<::carla::rpc::VehicleAckermannControl>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleAckermannControl>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::VehicleDoor>::value, "definition of `::carla::rpc::VehicleDoor` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::VehicleDoor>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::VehicleDoor>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$VehicleDoor$null(::std::unique_ptr<::carla::rpc::VehicleDoor> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleDoor>();
}
::carla::rpc::VehicleDoor *cxxbridge1$unique_ptr$carla$rpc$VehicleDoor$uninit(::std::unique_ptr<::carla::rpc::VehicleDoor> *ptr) noexcept {
  ::carla::rpc::VehicleDoor *uninit = reinterpret_cast<::carla::rpc::VehicleDoor *>(new ::rust::MaybeUninit<::carla::rpc::VehicleDoor>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleDoor>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleDoor$raw(::std::unique_ptr<::carla::rpc::VehicleDoor> *ptr, ::carla::rpc::VehicleDoor *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleDoor>(raw);
}
::carla::rpc::VehicleDoor const *cxxbridge1$unique_ptr$carla$rpc$VehicleDoor$get(::std::unique_ptr<::carla::rpc::VehicleDoor> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::VehicleDoor *cxxbridge1$unique_ptr$carla$rpc$VehicleDoor$release(::std::unique_ptr<::carla::rpc::VehicleDoor> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleDoor$drop(::std::unique_ptr<::carla::rpc::VehicleDoor> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::VehicleDoor>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::VehicleDoor>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::VehicleDoor>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$VehicleDoor$null(::std::shared_ptr<::carla::rpc::VehicleDoor> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleDoor>();
}
::carla::rpc::VehicleDoor *cxxbridge1$shared_ptr$carla$rpc$VehicleDoor$uninit(::std::shared_ptr<::carla::rpc::VehicleDoor> *ptr) noexcept {
  ::carla::rpc::VehicleDoor *uninit = reinterpret_cast<::carla::rpc::VehicleDoor *>(new ::rust::MaybeUninit<::carla::rpc::VehicleDoor>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleDoor>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleDoor$clone(::std::shared_ptr<::carla::rpc::VehicleDoor> const &self, ::std::shared_ptr<::carla::rpc::VehicleDoor> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleDoor>(self);
}
::carla::rpc::VehicleDoor const *cxxbridge1$shared_ptr$carla$rpc$VehicleDoor$get(::std::shared_ptr<::carla::rpc::VehicleDoor> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleDoor$drop(::std::shared_ptr<::carla::rpc::VehicleDoor> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::VehicleDoor>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::VehicleDoor>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$VehicleDoor$null(::std::weak_ptr<::carla::rpc::VehicleDoor> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleDoor>();
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleDoor$clone(::std::weak_ptr<::carla::rpc::VehicleDoor> const &self, ::std::weak_ptr<::carla::rpc::VehicleDoor> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleDoor>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleDoor$downgrade(::std::shared_ptr<::carla::rpc::VehicleDoor> const &shared, ::std::weak_ptr<::carla::rpc::VehicleDoor> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::VehicleDoor>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleDoor$upgrade(::std::weak_ptr<::carla::rpc::VehicleDoor> const &weak, ::std::shared_ptr<::carla::rpc::VehicleDoor> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::VehicleDoor>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleDoor$drop(::std::weak_ptr<::carla::rpc::VehicleDoor> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::VehicleDoor> *cxxbridge1$std$vector$carla$rpc$VehicleDoor$new() noexcept {
  return new ::std::vector<::carla::rpc::VehicleDoor>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$VehicleDoor$size(::std::vector<::carla::rpc::VehicleDoor> const &s) noexcept {
  return s.size();
}
::carla::rpc::VehicleDoor *cxxbridge1$std$vector$carla$rpc$VehicleDoor$get_unchecked(::std::vector<::carla::rpc::VehicleDoor> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$VehicleDoor$push_back(::std::vector<::carla::rpc::VehicleDoor> *v, ::carla::rpc::VehicleDoor *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$VehicleDoor$pop_back(::std::vector<::carla::rpc::VehicleDoor> *v, ::carla::rpc::VehicleDoor *out) noexcept {
  ::new (out) ::carla::rpc::VehicleDoor(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleDoor>>::value, "definition of `::std::vector<::carla::rpc::VehicleDoor>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleDoor>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleDoor>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleDoor$null(::std::unique_ptr<::std::vector<::carla::rpc::VehicleDoor>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleDoor>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleDoor$raw(::std::unique_ptr<::std::vector<::carla::rpc::VehicleDoor>> *ptr, ::std::vector<::carla::rpc::VehicleDoor> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleDoor>>(raw);
}
::std::vector<::carla::rpc::VehicleDoor> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleDoor$get(::std::unique_ptr<::std::vector<::carla::rpc::VehicleDoor>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::VehicleDoor> *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleDoor$release(::std::unique_ptr<::std::vector<::carla::rpc::VehicleDoor>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleDoor$drop(::std::unique_ptr<::std::vector<::carla::rpc::VehicleDoor>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleDoor>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::VehicleWheelLocation>::value, "definition of `::carla::rpc::VehicleWheelLocation` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::VehicleWheelLocation>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::VehicleWheelLocation>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$VehicleWheelLocation$null(::std::unique_ptr<::carla::rpc::VehicleWheelLocation> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleWheelLocation>();
}
::carla::rpc::VehicleWheelLocation *cxxbridge1$unique_ptr$carla$rpc$VehicleWheelLocation$uninit(::std::unique_ptr<::carla::rpc::VehicleWheelLocation> *ptr) noexcept {
  ::carla::rpc::VehicleWheelLocation *uninit = reinterpret_cast<::carla::rpc::VehicleWheelLocation *>(new ::rust::MaybeUninit<::carla::rpc::VehicleWheelLocation>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleWheelLocation>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleWheelLocation$raw(::std::unique_ptr<::carla::rpc::VehicleWheelLocation> *ptr, ::carla::rpc::VehicleWheelLocation *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleWheelLocation>(raw);
}
::carla::rpc::VehicleWheelLocation const *cxxbridge1$unique_ptr$carla$rpc$VehicleWheelLocation$get(::std::unique_ptr<::carla::rpc::VehicleWheelLocation> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::VehicleWheelLocation *cxxbridge1$unique_ptr$carla$rpc$VehicleWheelLocation$release(::std::unique_ptr<::carla::rpc::VehicleWheelLocation> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleWheelLocation$drop(::std::unique_ptr<::carla::rpc::VehicleWheelLocation> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::VehicleWheelLocation>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::VehicleWheelLocation>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::VehicleWheelLocation>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$VehicleWheelLocation$null(::std::shared_ptr<::carla::rpc::VehicleWheelLocation> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleWheelLocation>();
}
::carla::rpc::VehicleWheelLocation *cxxbridge1$shared_ptr$carla$rpc$VehicleWheelLocation$uninit(::std::shared_ptr<::carla::rpc::VehicleWheelLocation> *ptr) noexcept {
  ::carla::rpc::VehicleWheelLocation *uninit = reinterpret_cast<::carla::rpc::VehicleWheelLocation *>(new ::rust::MaybeUninit<::carla::rpc::VehicleWheelLocation>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleWheelLocation>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleWheelLocation$clone(::std::shared_ptr<::carla::rpc::VehicleWheelLocation> const &self, ::std::shared_ptr<::carla::rpc::VehicleWheelLocation> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleWheelLocation>(self);
}
::carla::rpc::VehicleWheelLocation const *cxxbridge1$shared_ptr$carla$rpc$VehicleWheelLocation$get(::std::shared_ptr<::carla::rpc::VehicleWheelLocation> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleWheelLocation$drop(::std::shared_ptr<::carla::rpc::VehicleWheelLocation> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::VehicleWheelLocation>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::VehicleWheelLocation>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$VehicleWheelLocation$null(::std::weak_ptr<::carla::rpc::VehicleWheelLocation> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleWheelLocation>();
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleWheelLocation$clone(::std::weak_ptr<::carla::rpc::VehicleWheelLocation> const &self, ::std::weak_ptr<::carla::rpc::VehicleWheelLocation> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleWheelLocation>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleWheelLocation$downgrade(::std::shared_ptr<::carla::rpc::VehicleWheelLocation> const &shared, ::std::weak_ptr<::carla::rpc::VehicleWheelLocation> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::VehicleWheelLocation>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleWheelLocation$upgrade(::std::weak_ptr<::carla::rpc::VehicleWheelLocation> const &weak, ::std::shared_ptr<::carla::rpc::VehicleWheelLocation> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::VehicleWheelLocation>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleWheelLocation$drop(::std::weak_ptr<::carla::rpc::VehicleWheelLocation> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::VehicleWheelLocation> *cxxbridge1$std$vector$carla$rpc$VehicleWheelLocation$new() noexcept {
  return new ::std::vector<::carla::rpc::VehicleWheelLocation>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$VehicleWheelLocation$size(::std::vector<::carla::rpc::VehicleWheelLocation> const &s) noexcept {
  return s.size();
}
::carla::rpc::VehicleWheelLocation *cxxbridge1$std$vector$carla$rpc$VehicleWheelLocation$get_unchecked(::std::vector<::carla::rpc::VehicleWheelLocation> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$VehicleWheelLocation$push_back(::std::vector<::carla::rpc::VehicleWheelLocation> *v, ::carla::rpc::VehicleWheelLocation *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$VehicleWheelLocation$pop_back(::std::vector<::carla::rpc::VehicleWheelLocation> *v, ::carla::rpc::VehicleWheelLocation *out) noexcept {
  ::new (out) ::carla::rpc::VehicleWheelLocation(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleWheelLocation>>::value, "definition of `::std::vector<::carla::rpc::VehicleWheelLocation>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleWheelLocation>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleWheelLocation>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleWheelLocation$null(::std::unique_ptr<::std::vector<::carla::rpc::VehicleWheelLocation>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleWheelLocation>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleWheelLocation$raw(::std::unique_ptr<::std::vector<::carla::rpc::VehicleWheelLocation>> *ptr, ::std::vector<::carla::rpc::VehicleWheelLocation> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleWheelLocation>>(raw);
}
::std::vector<::carla::rpc::VehicleWheelLocation> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleWheelLocation$get(::std::unique_ptr<::std::vector<::carla::rpc::VehicleWheelLocation>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::VehicleWheelLocation> *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleWheelLocation$release(::std::unique_ptr<::std::vector<::carla::rpc::VehicleWheelLocation>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleWheelLocation$drop(::std::unique_ptr<::std::vector<::carla::rpc::VehicleWheelLocation>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleWheelLocation>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::OpendriveGenerationParameters>::value, "definition of `::carla::rpc::OpendriveGenerationParameters` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::OpendriveGenerationParameters>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::OpendriveGenerationParameters>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$OpendriveGenerationParameters$null(::std::unique_ptr<::carla::rpc::OpendriveGenerationParameters> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::OpendriveGenerationParameters>();
}
::carla::rpc::OpendriveGenerationParameters *cxxbridge1$unique_ptr$carla$rpc$OpendriveGenerationParameters$uninit(::std::unique_ptr<::carla::rpc::OpendriveGenerationParameters> *ptr) noexcept {
  ::carla::rpc::OpendriveGenerationParameters *uninit = reinterpret_cast<::carla::rpc::OpendriveGenerationParameters *>(new ::rust::MaybeUninit<::carla::rpc::OpendriveGenerationParameters>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::OpendriveGenerationParameters>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$OpendriveGenerationParameters$raw(::std::unique_ptr<::carla::rpc::OpendriveGenerationParameters> *ptr, ::carla::rpc::OpendriveGenerationParameters *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::OpendriveGenerationParameters>(raw);
}
::carla::rpc::OpendriveGenerationParameters const *cxxbridge1$unique_ptr$carla$rpc$OpendriveGenerationParameters$get(::std::unique_ptr<::carla::rpc::OpendriveGenerationParameters> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::OpendriveGenerationParameters *cxxbridge1$unique_ptr$carla$rpc$OpendriveGenerationParameters$release(::std::unique_ptr<::carla::rpc::OpendriveGenerationParameters> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$OpendriveGenerationParameters$drop(::std::unique_ptr<::carla::rpc::OpendriveGenerationParameters> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::OpendriveGenerationParameters>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$OpendriveGenerationParameters$null(::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters>();
}
::carla::rpc::OpendriveGenerationParameters *cxxbridge1$shared_ptr$carla$rpc$OpendriveGenerationParameters$uninit(::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters> *ptr) noexcept {
  ::carla::rpc::OpendriveGenerationParameters *uninit = reinterpret_cast<::carla::rpc::OpendriveGenerationParameters *>(new ::rust::MaybeUninit<::carla::rpc::OpendriveGenerationParameters>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$OpendriveGenerationParameters$clone(::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters> const &self, ::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters>(self);
}
::carla::rpc::OpendriveGenerationParameters const *cxxbridge1$shared_ptr$carla$rpc$OpendriveGenerationParameters$get(::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$OpendriveGenerationParameters$drop(::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::OpendriveGenerationParameters>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::OpendriveGenerationParameters>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$OpendriveGenerationParameters$null(::std::weak_ptr<::carla::rpc::OpendriveGenerationParameters> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::OpendriveGenerationParameters>();
}
void cxxbridge1$weak_ptr$carla$rpc$OpendriveGenerationParameters$clone(::std::weak_ptr<::carla::rpc::OpendriveGenerationParameters> const &self, ::std::weak_ptr<::carla::rpc::OpendriveGenerationParameters> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::OpendriveGenerationParameters>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$OpendriveGenerationParameters$downgrade(::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters> const &shared, ::std::weak_ptr<::carla::rpc::OpendriveGenerationParameters> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::OpendriveGenerationParameters>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$OpendriveGenerationParameters$upgrade(::std::weak_ptr<::carla::rpc::OpendriveGenerationParameters> const &weak, ::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::OpendriveGenerationParameters>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$OpendriveGenerationParameters$drop(::std::weak_ptr<::carla::rpc::OpendriveGenerationParameters> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::OpendriveGenerationParameters> *cxxbridge1$std$vector$carla$rpc$OpendriveGenerationParameters$new() noexcept {
  return new ::std::vector<::carla::rpc::OpendriveGenerationParameters>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$OpendriveGenerationParameters$size(::std::vector<::carla::rpc::OpendriveGenerationParameters> const &s) noexcept {
  return s.size();
}
::carla::rpc::OpendriveGenerationParameters *cxxbridge1$std$vector$carla$rpc$OpendriveGenerationParameters$get_unchecked(::std::vector<::carla::rpc::OpendriveGenerationParameters> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$OpendriveGenerationParameters$push_back(::std::vector<::carla::rpc::OpendriveGenerationParameters> *v, ::carla::rpc::OpendriveGenerationParameters *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$OpendriveGenerationParameters$pop_back(::std::vector<::carla::rpc::OpendriveGenerationParameters> *v, ::carla::rpc::OpendriveGenerationParameters *out) noexcept {
  ::new (out) ::carla::rpc::OpendriveGenerationParameters(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::OpendriveGenerationParameters>>::value, "definition of `::std::vector<::carla::rpc::OpendriveGenerationParameters>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::OpendriveGenerationParameters>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::OpendriveGenerationParameters>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$OpendriveGenerationParameters$null(::std::unique_ptr<::std::vector<::carla::rpc::OpendriveGenerationParameters>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::OpendriveGenerationParameters>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$OpendriveGenerationParameters$raw(::std::unique_ptr<::std::vector<::carla::rpc::OpendriveGenerationParameters>> *ptr, ::std::vector<::carla::rpc::OpendriveGenerationParameters> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::OpendriveGenerationParameters>>(raw);
}
::std::vector<::carla::rpc::OpendriveGenerationParameters> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$OpendriveGenerationParameters$get(::std::unique_ptr<::std::vector<::carla::rpc::OpendriveGenerationParameters>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::OpendriveGenerationParameters> *cxxbridge1$unique_ptr$std$vector$carla$rpc$OpendriveGenerationParameters$release(::std::unique_ptr<::std::vector<::carla::rpc::OpendriveGenerationParameters>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$OpendriveGenerationParameters$drop(::std::unique_ptr<::std::vector<::carla::rpc::OpendriveGenerationParameters>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::OpendriveGenerationParameters>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::sensor::data::SemanticLidarDetection>::value, "definition of `::carla::sensor::data::SemanticLidarDetection` is required");
static_assert(sizeof(::std::unique_ptr<::carla::sensor::data::SemanticLidarDetection>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::sensor::data::SemanticLidarDetection>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarDetection$null(::std::unique_ptr<::carla::sensor::data::SemanticLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::SemanticLidarDetection>();
}
::carla::sensor::data::SemanticLidarDetection *cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarDetection$uninit(::std::unique_ptr<::carla::sensor::data::SemanticLidarDetection> *ptr) noexcept {
  ::carla::sensor::data::SemanticLidarDetection *uninit = reinterpret_cast<::carla::sensor::data::SemanticLidarDetection *>(new ::rust::MaybeUninit<::carla::sensor::data::SemanticLidarDetection>);
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::SemanticLidarDetection>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarDetection$raw(::std::unique_ptr<::carla::sensor::data::SemanticLidarDetection> *ptr, ::carla::sensor::data::SemanticLidarDetection *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::SemanticLidarDetection>(raw);
}
::carla::sensor::data::SemanticLidarDetection const *cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarDetection$get(::std::unique_ptr<::carla::sensor::data::SemanticLidarDetection> const &ptr) noexcept {
  return ptr.get();
}
::carla::sensor::data::SemanticLidarDetection *cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarDetection$release(::std::unique_ptr<::carla::sensor::data::SemanticLidarDetection> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarDetection$drop(::std::unique_ptr<::carla::sensor::data::SemanticLidarDetection> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::sensor::data::SemanticLidarDetection>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarDetection$null(::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection>();
}
::carla::sensor::data::SemanticLidarDetection *cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarDetection$uninit(::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection> *ptr) noexcept {
  ::carla::sensor::data::SemanticLidarDetection *uninit = reinterpret_cast<::carla::sensor::data::SemanticLidarDetection *>(new ::rust::MaybeUninit<::carla::sensor::data::SemanticLidarDetection>);
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarDetection$clone(::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection> const &self, ::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection>(self);
}
::carla::sensor::data::SemanticLidarDetection const *cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarDetection$get(::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarDetection$drop(::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::sensor::data::SemanticLidarDetection>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::sensor::data::SemanticLidarDetection>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarDetection$null(::std::weak_ptr<::carla::sensor::data::SemanticLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::SemanticLidarDetection>();
}
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarDetection$clone(::std::weak_ptr<::carla::sensor::data::SemanticLidarDetection> const &self, ::std::weak_ptr<::carla::sensor::data::SemanticLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::SemanticLidarDetection>(self);
}
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarDetection$downgrade(::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection> const &shared, ::std::weak_ptr<::carla::sensor::data::SemanticLidarDetection> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::sensor::data::SemanticLidarDetection>(shared);
}
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarDetection$upgrade(::std::weak_ptr<::carla::sensor::data::SemanticLidarDetection> const &weak, ::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::sensor::data::SemanticLidarDetection>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarDetection$drop(::std::weak_ptr<::carla::sensor::data::SemanticLidarDetection> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::sensor::data::SemanticLidarDetection> *cxxbridge1$std$vector$carla$sensor$data$SemanticLidarDetection$new() noexcept {
  return new ::std::vector<::carla::sensor::data::SemanticLidarDetection>();
}
::std::size_t cxxbridge1$std$vector$carla$sensor$data$SemanticLidarDetection$size(::std::vector<::carla::sensor::data::SemanticLidarDetection> const &s) noexcept {
  return s.size();
}
::carla::sensor::data::SemanticLidarDetection *cxxbridge1$std$vector$carla$sensor$data$SemanticLidarDetection$get_unchecked(::std::vector<::carla::sensor::data::SemanticLidarDetection> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$sensor$data$SemanticLidarDetection$push_back(::std::vector<::carla::sensor::data::SemanticLidarDetection> *v, ::carla::sensor::data::SemanticLidarDetection *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$sensor$data$SemanticLidarDetection$pop_back(::std::vector<::carla::sensor::data::SemanticLidarDetection> *v, ::carla::sensor::data::SemanticLidarDetection *out) noexcept {
  ::new (out) ::carla::sensor::data::SemanticLidarDetection(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::sensor::data::SemanticLidarDetection>>::value, "definition of `::std::vector<::carla::sensor::data::SemanticLidarDetection>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::sensor::data::SemanticLidarDetection>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::sensor::data::SemanticLidarDetection>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$sensor$data$SemanticLidarDetection$null(::std::unique_ptr<::std::vector<::carla::sensor::data::SemanticLidarDetection>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::sensor::data::SemanticLidarDetection>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$sensor$data$SemanticLidarDetection$raw(::std::unique_ptr<::std::vector<::carla::sensor::data::SemanticLidarDetection>> *ptr, ::std::vector<::carla::sensor::data::SemanticLidarDetection> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::sensor::data::SemanticLidarDetection>>(raw);
}
::std::vector<::carla::sensor::data::SemanticLidarDetection> const *cxxbridge1$unique_ptr$std$vector$carla$sensor$data$SemanticLidarDetection$get(::std::unique_ptr<::std::vector<::carla::sensor::data::SemanticLidarDetection>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::sensor::data::SemanticLidarDetection> *cxxbridge1$unique_ptr$std$vector$carla$sensor$data$SemanticLidarDetection$release(::std::unique_ptr<::std::vector<::carla::sensor::data::SemanticLidarDetection>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$sensor$data$SemanticLidarDetection$drop(::std::unique_ptr<::std::vector<::carla::sensor::data::SemanticLidarDetection>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::sensor::data::SemanticLidarDetection>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::sensor::data::SemanticLidarData>::value, "definition of `::carla::sensor::data::SemanticLidarData` is required");
static_assert(sizeof(::std::unique_ptr<::carla::sensor::data::SemanticLidarData>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::sensor::data::SemanticLidarData>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarData$null(::std::unique_ptr<::carla::sensor::data::SemanticLidarData> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::SemanticLidarData>();
}
::carla::sensor::data::SemanticLidarData *cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarData$uninit(::std::unique_ptr<::carla::sensor::data::SemanticLidarData> *ptr) noexcept {
  ::carla::sensor::data::SemanticLidarData *uninit = reinterpret_cast<::carla::sensor::data::SemanticLidarData *>(new ::rust::MaybeUninit<::carla::sensor::data::SemanticLidarData>);
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::SemanticLidarData>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarData$raw(::std::unique_ptr<::carla::sensor::data::SemanticLidarData> *ptr, ::carla::sensor::data::SemanticLidarData *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::SemanticLidarData>(raw);
}
::carla::sensor::data::SemanticLidarData const *cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarData$get(::std::unique_ptr<::carla::sensor::data::SemanticLidarData> const &ptr) noexcept {
  return ptr.get();
}
::carla::sensor::data::SemanticLidarData *cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarData$release(::std::unique_ptr<::carla::sensor::data::SemanticLidarData> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarData$drop(::std::unique_ptr<::carla::sensor::data::SemanticLidarData> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::sensor::data::SemanticLidarData>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::sensor::data::SemanticLidarData>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::sensor::data::SemanticLidarData>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarData$null(::std::shared_ptr<::carla::sensor::data::SemanticLidarData> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::SemanticLidarData>();
}
::carla::sensor::data::SemanticLidarData *cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarData$uninit(::std::shared_ptr<::carla::sensor::data::SemanticLidarData> *ptr) noexcept {
  ::carla::sensor::data::SemanticLidarData *uninit = reinterpret_cast<::carla::sensor::data::SemanticLidarData *>(new ::rust::MaybeUninit<::carla::sensor::data::SemanticLidarData>);
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::SemanticLidarData>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarData$clone(::std::shared_ptr<::carla::sensor::data::SemanticLidarData> const &self, ::std::shared_ptr<::carla::sensor::data::SemanticLidarData> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::SemanticLidarData>(self);
}
::carla::sensor::data::SemanticLidarData const *cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarData$get(::std::shared_ptr<::carla::sensor::data::SemanticLidarData> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarData$drop(::std::shared_ptr<::carla::sensor::data::SemanticLidarData> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::sensor::data::SemanticLidarData>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::sensor::data::SemanticLidarData>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarData$null(::std::weak_ptr<::carla::sensor::data::SemanticLidarData> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::SemanticLidarData>();
}
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarData$clone(::std::weak_ptr<::carla::sensor::data::SemanticLidarData> const &self, ::std::weak_ptr<::carla::sensor::data::SemanticLidarData> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::SemanticLidarData>(self);
}
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarData$downgrade(::std::shared_ptr<::carla::sensor::data::SemanticLidarData> const &shared, ::std::weak_ptr<::carla::sensor::data::SemanticLidarData> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::sensor::data::SemanticLidarData>(shared);
}
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarData$upgrade(::std::weak_ptr<::carla::sensor::data::SemanticLidarData> const &weak, ::std::shared_ptr<::carla::sensor::data::SemanticLidarData> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::sensor::data::SemanticLidarData>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarData$drop(::std::weak_ptr<::carla::sensor::data::SemanticLidarData> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::sensor::data::LidarDetection>::value, "definition of `::carla::sensor::data::LidarDetection` is required");
static_assert(sizeof(::std::unique_ptr<::carla::sensor::data::LidarDetection>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::sensor::data::LidarDetection>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$sensor$data$LidarDetection$null(::std::unique_ptr<::carla::sensor::data::LidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::LidarDetection>();
}
::carla::sensor::data::LidarDetection *cxxbridge1$unique_ptr$carla$sensor$data$LidarDetection$uninit(::std::unique_ptr<::carla::sensor::data::LidarDetection> *ptr) noexcept {
  ::carla::sensor::data::LidarDetection *uninit = reinterpret_cast<::carla::sensor::data::LidarDetection *>(new ::rust::MaybeUninit<::carla::sensor::data::LidarDetection>);
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::LidarDetection>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$sensor$data$LidarDetection$raw(::std::unique_ptr<::carla::sensor::data::LidarDetection> *ptr, ::carla::sensor::data::LidarDetection *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::LidarDetection>(raw);
}
::carla::sensor::data::LidarDetection const *cxxbridge1$unique_ptr$carla$sensor$data$LidarDetection$get(::std::unique_ptr<::carla::sensor::data::LidarDetection> const &ptr) noexcept {
  return ptr.get();
}
::carla::sensor::data::LidarDetection *cxxbridge1$unique_ptr$carla$sensor$data$LidarDetection$release(::std::unique_ptr<::carla::sensor::data::LidarDetection> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$sensor$data$LidarDetection$drop(::std::unique_ptr<::carla::sensor::data::LidarDetection> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::sensor::data::LidarDetection>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::sensor::data::LidarDetection>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::sensor::data::LidarDetection>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$sensor$data$LidarDetection$null(::std::shared_ptr<::carla::sensor::data::LidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::LidarDetection>();
}
::carla::sensor::data::LidarDetection *cxxbridge1$shared_ptr$carla$sensor$data$LidarDetection$uninit(::std::shared_ptr<::carla::sensor::data::LidarDetection> *ptr) noexcept {
  ::carla::sensor::data::LidarDetection *uninit = reinterpret_cast<::carla::sensor::data::LidarDetection *>(new ::rust::MaybeUninit<::carla::sensor::data::LidarDetection>);
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::LidarDetection>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$sensor$data$LidarDetection$clone(::std::shared_ptr<::carla::sensor::data::LidarDetection> const &self, ::std::shared_ptr<::carla::sensor::data::LidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::LidarDetection>(self);
}
::carla::sensor::data::LidarDetection const *cxxbridge1$shared_ptr$carla$sensor$data$LidarDetection$get(::std::shared_ptr<::carla::sensor::data::LidarDetection> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$sensor$data$LidarDetection$drop(::std::shared_ptr<::carla::sensor::data::LidarDetection> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::sensor::data::LidarDetection>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::sensor::data::LidarDetection>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$sensor$data$LidarDetection$null(::std::weak_ptr<::carla::sensor::data::LidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::LidarDetection>();
}
void cxxbridge1$weak_ptr$carla$sensor$data$LidarDetection$clone(::std::weak_ptr<::carla::sensor::data::LidarDetection> const &self, ::std::weak_ptr<::carla::sensor::data::LidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::LidarDetection>(self);
}
void cxxbridge1$weak_ptr$carla$sensor$data$LidarDetection$downgrade(::std::shared_ptr<::carla::sensor::data::LidarDetection> const &shared, ::std::weak_ptr<::carla::sensor::data::LidarDetection> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::sensor::data::LidarDetection>(shared);
}
void cxxbridge1$weak_ptr$carla$sensor$data$LidarDetection$upgrade(::std::weak_ptr<::carla::sensor::data::LidarDetection> const &weak, ::std::shared_ptr<::carla::sensor::data::LidarDetection> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::sensor::data::LidarDetection>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$sensor$data$LidarDetection$drop(::std::weak_ptr<::carla::sensor::data::LidarDetection> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::sensor::data::LidarDetection> *cxxbridge1$std$vector$carla$sensor$data$LidarDetection$new() noexcept {
  return new ::std::vector<::carla::sensor::data::LidarDetection>();
}
::std::size_t cxxbridge1$std$vector$carla$sensor$data$LidarDetection$size(::std::vector<::carla::sensor::data::LidarDetection> const &s) noexcept {
  return s.size();
}
::carla::sensor::data::LidarDetection *cxxbridge1$std$vector$carla$sensor$data$LidarDetection$get_unchecked(::std::vector<::carla::sensor::data::LidarDetection> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$sensor$data$LidarDetection$push_back(::std::vector<::carla::sensor::data::LidarDetection> *v, ::carla::sensor::data::LidarDetection *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$sensor$data$LidarDetection$pop_back(::std::vector<::carla::sensor::data::LidarDetection> *v, ::carla::sensor::data::LidarDetection *out) noexcept {
  ::new (out) ::carla::sensor::data::LidarDetection(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::sensor::data::LidarDetection>>::value, "definition of `::std::vector<::carla::sensor::data::LidarDetection>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::sensor::data::LidarDetection>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::sensor::data::LidarDetection>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$sensor$data$LidarDetection$null(::std::unique_ptr<::std::vector<::carla::sensor::data::LidarDetection>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::sensor::data::LidarDetection>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$sensor$data$LidarDetection$raw(::std::unique_ptr<::std::vector<::carla::sensor::data::LidarDetection>> *ptr, ::std::vector<::carla::sensor::data::LidarDetection> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::sensor::data::LidarDetection>>(raw);
}
::std::vector<::carla::sensor::data::LidarDetection> const *cxxbridge1$unique_ptr$std$vector$carla$sensor$data$LidarDetection$get(::std::unique_ptr<::std::vector<::carla::sensor::data::LidarDetection>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::sensor::data::LidarDetection> *cxxbridge1$unique_ptr$std$vector$carla$sensor$data$LidarDetection$release(::std::unique_ptr<::std::vector<::carla::sensor::data::LidarDetection>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$sensor$data$LidarDetection$drop(::std::unique_ptr<::std::vector<::carla::sensor::data::LidarDetection>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::sensor::data::LidarDetection>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::sensor::data::LidarData>::value, "definition of `::carla::sensor::data::LidarData` is required");
static_assert(sizeof(::std::unique_ptr<::carla::sensor::data::LidarData>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::sensor::data::LidarData>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$sensor$data$LidarData$null(::std::unique_ptr<::carla::sensor::data::LidarData> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::LidarData>();
}
::carla::sensor::data::LidarData *cxxbridge1$unique_ptr$carla$sensor$data$LidarData$uninit(::std::unique_ptr<::carla::sensor::data::LidarData> *ptr) noexcept {
  ::carla::sensor::data::LidarData *uninit = reinterpret_cast<::carla::sensor::data::LidarData *>(new ::rust::MaybeUninit<::carla::sensor::data::LidarData>);
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::LidarData>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$sensor$data$LidarData$raw(::std::unique_ptr<::carla::sensor::data::LidarData> *ptr, ::carla::sensor::data::LidarData *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::LidarData>(raw);
}
::carla::sensor::data::LidarData const *cxxbridge1$unique_ptr$carla$sensor$data$LidarData$get(::std::unique_ptr<::carla::sensor::data::LidarData> const &ptr) noexcept {
  return ptr.get();
}
::carla::sensor::data::LidarData *cxxbridge1$unique_ptr$carla$sensor$data$LidarData$release(::std::unique_ptr<::carla::sensor::data::LidarData> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$sensor$data$LidarData$drop(::std::unique_ptr<::carla::sensor::data::LidarData> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::sensor::data::LidarData>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::sensor::data::LidarData>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::sensor::data::LidarData>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$sensor$data$LidarData$null(::std::shared_ptr<::carla::sensor::data::LidarData> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::LidarData>();
}
::carla::sensor::data::LidarData *cxxbridge1$shared_ptr$carla$sensor$data$LidarData$uninit(::std::shared_ptr<::carla::sensor::data::LidarData> *ptr) noexcept {
  ::carla::sensor::data::LidarData *uninit = reinterpret_cast<::carla::sensor::data::LidarData *>(new ::rust::MaybeUninit<::carla::sensor::data::LidarData>);
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::LidarData>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$sensor$data$LidarData$clone(::std::shared_ptr<::carla::sensor::data::LidarData> const &self, ::std::shared_ptr<::carla::sensor::data::LidarData> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::LidarData>(self);
}
::carla::sensor::data::LidarData const *cxxbridge1$shared_ptr$carla$sensor$data$LidarData$get(::std::shared_ptr<::carla::sensor::data::LidarData> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$sensor$data$LidarData$drop(::std::shared_ptr<::carla::sensor::data::LidarData> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::sensor::data::LidarData>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::sensor::data::LidarData>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$sensor$data$LidarData$null(::std::weak_ptr<::carla::sensor::data::LidarData> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::LidarData>();
}
void cxxbridge1$weak_ptr$carla$sensor$data$LidarData$clone(::std::weak_ptr<::carla::sensor::data::LidarData> const &self, ::std::weak_ptr<::carla::sensor::data::LidarData> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::LidarData>(self);
}
void cxxbridge1$weak_ptr$carla$sensor$data$LidarData$downgrade(::std::shared_ptr<::carla::sensor::data::LidarData> const &shared, ::std::weak_ptr<::carla::sensor::data::LidarData> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::sensor::data::LidarData>(shared);
}
void cxxbridge1$weak_ptr$carla$sensor$data$LidarData$upgrade(::std::weak_ptr<::carla::sensor::data::LidarData> const &weak, ::std::shared_ptr<::carla::sensor::data::LidarData> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::sensor::data::LidarData>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$sensor$data$LidarData$drop(::std::weak_ptr<::carla::sensor::data::LidarData> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::sensor::data::IMUMeasurement>::value, "definition of `::carla::sensor::data::IMUMeasurement` is required");
static_assert(sizeof(::std::unique_ptr<::carla::sensor::data::IMUMeasurement>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::sensor::data::IMUMeasurement>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$sensor$data$IMUMeasurement$null(::std::unique_ptr<::carla::sensor::data::IMUMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::IMUMeasurement>();
}
::carla::sensor::data::IMUMeasurement *cxxbridge1$unique_ptr$carla$sensor$data$IMUMeasurement$uninit(::std::unique_ptr<::carla::sensor::data::IMUMeasurement> *ptr) noexcept {
  ::carla::sensor::data::IMUMeasurement *uninit = reinterpret_cast<::carla::sensor::data::IMUMeasurement *>(new ::rust::MaybeUninit<::carla::sensor::data::IMUMeasurement>);
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::IMUMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$sensor$data$IMUMeasurement$raw(::std::unique_ptr<::carla::sensor::data::IMUMeasurement> *ptr, ::carla::sensor::data::IMUMeasurement *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::IMUMeasurement>(raw);
}
::carla::sensor::data::IMUMeasurement const *cxxbridge1$unique_ptr$carla$sensor$data$IMUMeasurement$get(::std::unique_ptr<::carla::sensor::data::IMUMeasurement> const &ptr) noexcept {
  return ptr.get();
}
::carla::sensor::data::IMUMeasurement *cxxbridge1$unique_ptr$carla$sensor$data$IMUMeasurement$release(::std::unique_ptr<::carla::sensor::data::IMUMeasurement> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$sensor$data$IMUMeasurement$drop(::std::unique_ptr<::carla::sensor::data::IMUMeasurement> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::sensor::data::IMUMeasurement>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::sensor::data::IMUMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::sensor::data::IMUMeasurement>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$sensor$data$IMUMeasurement$null(::std::shared_ptr<::carla::sensor::data::IMUMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::IMUMeasurement>();
}
::carla::sensor::data::IMUMeasurement *cxxbridge1$shared_ptr$carla$sensor$data$IMUMeasurement$uninit(::std::shared_ptr<::carla::sensor::data::IMUMeasurement> *ptr) noexcept {
  ::carla::sensor::data::IMUMeasurement *uninit = reinterpret_cast<::carla::sensor::data::IMUMeasurement *>(new ::rust::MaybeUninit<::carla::sensor::data::IMUMeasurement>);
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::IMUMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$sensor$data$IMUMeasurement$clone(::std::shared_ptr<::carla::sensor::data::IMUMeasurement> const &self, ::std::shared_ptr<::carla::sensor::data::IMUMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::IMUMeasurement>(self);
}
::carla::sensor::data::IMUMeasurement const *cxxbridge1$shared_ptr$carla$sensor$data$IMUMeasurement$get(::std::shared_ptr<::carla::sensor::data::IMUMeasurement> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$sensor$data$IMUMeasurement$drop(::std::shared_ptr<::carla::sensor::data::IMUMeasurement> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::sensor::data::IMUMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::sensor::data::IMUMeasurement>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$sensor$data$IMUMeasurement$null(::std::weak_ptr<::carla::sensor::data::IMUMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::IMUMeasurement>();
}
void cxxbridge1$weak_ptr$carla$sensor$data$IMUMeasurement$clone(::std::weak_ptr<::carla::sensor::data::IMUMeasurement> const &self, ::std::weak_ptr<::carla::sensor::data::IMUMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::IMUMeasurement>(self);
}
void cxxbridge1$weak_ptr$carla$sensor$data$IMUMeasurement$downgrade(::std::shared_ptr<::carla::sensor::data::IMUMeasurement> const &shared, ::std::weak_ptr<::carla::sensor::data::IMUMeasurement> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::sensor::data::IMUMeasurement>(shared);
}
void cxxbridge1$weak_ptr$carla$sensor$data$IMUMeasurement$upgrade(::std::weak_ptr<::carla::sensor::data::IMUMeasurement> const &weak, ::std::shared_ptr<::carla::sensor::data::IMUMeasurement> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::sensor::data::IMUMeasurement>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$sensor$data$IMUMeasurement$drop(::std::weak_ptr<::carla::sensor::data::IMUMeasurement> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::sensor::data::GnssMeasurement>::value, "definition of `::carla::sensor::data::GnssMeasurement` is required");
static_assert(sizeof(::std::unique_ptr<::carla::sensor::data::GnssMeasurement>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::sensor::data::GnssMeasurement>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$sensor$data$GnssMeasurement$null(::std::unique_ptr<::carla::sensor::data::GnssMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::GnssMeasurement>();
}
::carla::sensor::data::GnssMeasurement *cxxbridge1$unique_ptr$carla$sensor$data$GnssMeasurement$uninit(::std::unique_ptr<::carla::sensor::data::GnssMeasurement> *ptr) noexcept {
  ::carla::sensor::data::GnssMeasurement *uninit = reinterpret_cast<::carla::sensor::data::GnssMeasurement *>(new ::rust::MaybeUninit<::carla::sensor::data::GnssMeasurement>);
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::GnssMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$sensor$data$GnssMeasurement$raw(::std::unique_ptr<::carla::sensor::data::GnssMeasurement> *ptr, ::carla::sensor::data::GnssMeasurement *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::GnssMeasurement>(raw);
}
::carla::sensor::data::GnssMeasurement const *cxxbridge1$unique_ptr$carla$sensor$data$GnssMeasurement$get(::std::unique_ptr<::carla::sensor::data::GnssMeasurement> const &ptr) noexcept {
  return ptr.get();
}
::carla::sensor::data::GnssMeasurement *cxxbridge1$unique_ptr$carla$sensor$data$GnssMeasurement$release(::std::unique_ptr<::carla::sensor::data::GnssMeasurement> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$sensor$data$GnssMeasurement$drop(::std::unique_ptr<::carla::sensor::data::GnssMeasurement> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::sensor::data::GnssMeasurement>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::sensor::data::GnssMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::sensor::data::GnssMeasurement>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$sensor$data$GnssMeasurement$null(::std::shared_ptr<::carla::sensor::data::GnssMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::GnssMeasurement>();
}
::carla::sensor::data::GnssMeasurement *cxxbridge1$shared_ptr$carla$sensor$data$GnssMeasurement$uninit(::std::shared_ptr<::carla::sensor::data::GnssMeasurement> *ptr) noexcept {
  ::carla::sensor::data::GnssMeasurement *uninit = reinterpret_cast<::carla::sensor::data::GnssMeasurement *>(new ::rust::MaybeUninit<::carla::sensor::data::GnssMeasurement>);
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::GnssMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$sensor$data$GnssMeasurement$clone(::std::shared_ptr<::carla::sensor::data::GnssMeasurement> const &self, ::std::shared_ptr<::carla::sensor::data::GnssMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::GnssMeasurement>(self);
}
::carla::sensor::data::GnssMeasurement const *cxxbridge1$shared_ptr$carla$sensor$data$GnssMeasurement$get(::std::shared_ptr<::carla::sensor::data::GnssMeasurement> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$sensor$data$GnssMeasurement$drop(::std::shared_ptr<::carla::sensor::data::GnssMeasurement> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::sensor::data::GnssMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::sensor::data::GnssMeasurement>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$sensor$data$GnssMeasurement$null(::std::weak_ptr<::carla::sensor::data::GnssMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::GnssMeasurement>();
}
void cxxbridge1$weak_ptr$carla$sensor$data$GnssMeasurement$clone(::std::weak_ptr<::carla::sensor::data::GnssMeasurement> const &self, ::std::weak_ptr<::carla::sensor::data::GnssMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::GnssMeasurement>(self);
}
void cxxbridge1$weak_ptr$carla$sensor$data$GnssMeasurement$downgrade(::std::shared_ptr<::carla::sensor::data::GnssMeasurement> const &shared, ::std::weak_ptr<::carla::sensor::data::GnssMeasurement> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::sensor::data::GnssMeasurement>(shared);
}
void cxxbridge1$weak_ptr$carla$sensor$data$GnssMeasurement$upgrade(::std::weak_ptr<::carla::sensor::data::GnssMeasurement> const &weak, ::std::shared_ptr<::carla::sensor::data::GnssMeasurement> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::sensor::data::GnssMeasurement>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$sensor$data$GnssMeasurement$drop(::std::weak_ptr<::carla::sensor::data::GnssMeasurement> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::sensor::data::LidarMeasurement>::value, "definition of `::carla::sensor::data::LidarMeasurement` is required");
static_assert(sizeof(::std::unique_ptr<::carla::sensor::data::LidarMeasurement>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::sensor::data::LidarMeasurement>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$sensor$data$LidarMeasurement$null(::std::unique_ptr<::carla::sensor::data::LidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::LidarMeasurement>();
}
::carla::sensor::data::LidarMeasurement *cxxbridge1$unique_ptr$carla$sensor$data$LidarMeasurement$uninit(::std::unique_ptr<::carla::sensor::data::LidarMeasurement> *ptr) noexcept {
  ::carla::sensor::data::LidarMeasurement *uninit = reinterpret_cast<::carla::sensor::data::LidarMeasurement *>(new ::rust::MaybeUninit<::carla::sensor::data::LidarMeasurement>);
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::LidarMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$sensor$data$LidarMeasurement$raw(::std::unique_ptr<::carla::sensor::data::LidarMeasurement> *ptr, ::carla::sensor::data::LidarMeasurement *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::LidarMeasurement>(raw);
}
::carla::sensor::data::LidarMeasurement const *cxxbridge1$unique_ptr$carla$sensor$data$LidarMeasurement$get(::std::unique_ptr<::carla::sensor::data::LidarMeasurement> const &ptr) noexcept {
  return ptr.get();
}
::carla::sensor::data::LidarMeasurement *cxxbridge1$unique_ptr$carla$sensor$data$LidarMeasurement$release(::std::unique_ptr<::carla::sensor::data::LidarMeasurement> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$sensor$data$LidarMeasurement$drop(::std::unique_ptr<::carla::sensor::data::LidarMeasurement> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::sensor::data::LidarMeasurement>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::sensor::data::LidarMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::sensor::data::LidarMeasurement>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$sensor$data$LidarMeasurement$null(::std::shared_ptr<::carla::sensor::data::LidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::LidarMeasurement>();
}
::carla::sensor::data::LidarMeasurement *cxxbridge1$shared_ptr$carla$sensor$data$LidarMeasurement$uninit(::std::shared_ptr<::carla::sensor::data::LidarMeasurement> *ptr) noexcept {
  ::carla::sensor::data::LidarMeasurement *uninit = reinterpret_cast<::carla::sensor::data::LidarMeasurement *>(new ::rust::MaybeUninit<::carla::sensor::data::LidarMeasurement>);
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::LidarMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$sensor$data$LidarMeasurement$clone(::std::shared_ptr<::carla::sensor::data::LidarMeasurement> const &self, ::std::shared_ptr<::carla::sensor::data::LidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::LidarMeasurement>(self);
}
::carla::sensor::data::LidarMeasurement const *cxxbridge1$shared_ptr$carla$sensor$data$LidarMeasurement$get(::std::shared_ptr<::carla::sensor::data::LidarMeasurement> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$sensor$data$LidarMeasurement$drop(::std::shared_ptr<::carla::sensor::data::LidarMeasurement> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::sensor::data::LidarMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::sensor::data::LidarMeasurement>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$sensor$data$LidarMeasurement$null(::std::weak_ptr<::carla::sensor::data::LidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::LidarMeasurement>();
}
void cxxbridge1$weak_ptr$carla$sensor$data$LidarMeasurement$clone(::std::weak_ptr<::carla::sensor::data::LidarMeasurement> const &self, ::std::weak_ptr<::carla::sensor::data::LidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::LidarMeasurement>(self);
}
void cxxbridge1$weak_ptr$carla$sensor$data$LidarMeasurement$downgrade(::std::shared_ptr<::carla::sensor::data::LidarMeasurement> const &shared, ::std::weak_ptr<::carla::sensor::data::LidarMeasurement> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::sensor::data::LidarMeasurement>(shared);
}
void cxxbridge1$weak_ptr$carla$sensor$data$LidarMeasurement$upgrade(::std::weak_ptr<::carla::sensor::data::LidarMeasurement> const &weak, ::std::shared_ptr<::carla::sensor::data::LidarMeasurement> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::sensor::data::LidarMeasurement>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$sensor$data$LidarMeasurement$drop(::std::weak_ptr<::carla::sensor::data::LidarMeasurement> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::sensor::data::SemanticLidarMeasurement>::value, "definition of `::carla::sensor::data::SemanticLidarMeasurement` is required");
static_assert(sizeof(::std::unique_ptr<::carla::sensor::data::SemanticLidarMeasurement>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::sensor::data::SemanticLidarMeasurement>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarMeasurement$null(::std::unique_ptr<::carla::sensor::data::SemanticLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::SemanticLidarMeasurement>();
}
::carla::sensor::data::SemanticLidarMeasurement *cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarMeasurement$uninit(::std::unique_ptr<::carla::sensor::data::SemanticLidarMeasurement> *ptr) noexcept {
  ::carla::sensor::data::SemanticLidarMeasurement *uninit = reinterpret_cast<::carla::sensor::data::SemanticLidarMeasurement *>(new ::rust::MaybeUninit<::carla::sensor::data::SemanticLidarMeasurement>);
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::SemanticLidarMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarMeasurement$raw(::std::unique_ptr<::carla::sensor::data::SemanticLidarMeasurement> *ptr, ::carla::sensor::data::SemanticLidarMeasurement *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::SemanticLidarMeasurement>(raw);
}
::carla::sensor::data::SemanticLidarMeasurement const *cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarMeasurement$get(::std::unique_ptr<::carla::sensor::data::SemanticLidarMeasurement> const &ptr) noexcept {
  return ptr.get();
}
::carla::sensor::data::SemanticLidarMeasurement *cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarMeasurement$release(::std::unique_ptr<::carla::sensor::data::SemanticLidarMeasurement> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$sensor$data$SemanticLidarMeasurement$drop(::std::unique_ptr<::carla::sensor::data::SemanticLidarMeasurement> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::sensor::data::SemanticLidarMeasurement>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarMeasurement$null(::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement>();
}
::carla::sensor::data::SemanticLidarMeasurement *cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarMeasurement$uninit(::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement> *ptr) noexcept {
  ::carla::sensor::data::SemanticLidarMeasurement *uninit = reinterpret_cast<::carla::sensor::data::SemanticLidarMeasurement *>(new ::rust::MaybeUninit<::carla::sensor::data::SemanticLidarMeasurement>);
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarMeasurement$clone(::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement> const &self, ::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement>(self);
}
::carla::sensor::data::SemanticLidarMeasurement const *cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarMeasurement$get(::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$sensor$data$SemanticLidarMeasurement$drop(::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::sensor::data::SemanticLidarMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::sensor::data::SemanticLidarMeasurement>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarMeasurement$null(::std::weak_ptr<::carla::sensor::data::SemanticLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::SemanticLidarMeasurement>();
}
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarMeasurement$clone(::std::weak_ptr<::carla::sensor::data::SemanticLidarMeasurement> const &self, ::std::weak_ptr<::carla::sensor::data::SemanticLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::SemanticLidarMeasurement>(self);
}
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarMeasurement$downgrade(::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement> const &shared, ::std::weak_ptr<::carla::sensor::data::SemanticLidarMeasurement> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::sensor::data::SemanticLidarMeasurement>(shared);
}
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarMeasurement$upgrade(::std::weak_ptr<::carla::sensor::data::SemanticLidarMeasurement> const &weak, ::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::sensor::data::SemanticLidarMeasurement>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$sensor$data$SemanticLidarMeasurement$drop(::std::weak_ptr<::carla::sensor::data::SemanticLidarMeasurement> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::sensor::data::RadarDetection>::value, "definition of `::carla::sensor::data::RadarDetection` is required");
static_assert(sizeof(::std::unique_ptr<::carla::sensor::data::RadarDetection>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::sensor::data::RadarDetection>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$sensor$data$RadarDetection$null(::std::unique_ptr<::carla::sensor::data::RadarDetection> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::RadarDetection>();
}
::carla::sensor::data::RadarDetection *cxxbridge1$unique_ptr$carla$sensor$data$RadarDetection$uninit(::std::unique_ptr<::carla::sensor::data::RadarDetection> *ptr) noexcept {
  ::carla::sensor::data::RadarDetection *uninit = reinterpret_cast<::carla::sensor::data::RadarDetection *>(new ::rust::MaybeUninit<::carla::sensor::data::RadarDetection>);
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::RadarDetection>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$sensor$data$RadarDetection$raw(::std::unique_ptr<::carla::sensor::data::RadarDetection> *ptr, ::carla::sensor::data::RadarDetection *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::RadarDetection>(raw);
}
::carla::sensor::data::RadarDetection const *cxxbridge1$unique_ptr$carla$sensor$data$RadarDetection$get(::std::unique_ptr<::carla::sensor::data::RadarDetection> const &ptr) noexcept {
  return ptr.get();
}
::carla::sensor::data::RadarDetection *cxxbridge1$unique_ptr$carla$sensor$data$RadarDetection$release(::std::unique_ptr<::carla::sensor::data::RadarDetection> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$sensor$data$RadarDetection$drop(::std::unique_ptr<::carla::sensor::data::RadarDetection> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::sensor::data::RadarDetection>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::sensor::data::RadarDetection>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::sensor::data::RadarDetection>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$sensor$data$RadarDetection$null(::std::shared_ptr<::carla::sensor::data::RadarDetection> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::RadarDetection>();
}
::carla::sensor::data::RadarDetection *cxxbridge1$shared_ptr$carla$sensor$data$RadarDetection$uninit(::std::shared_ptr<::carla::sensor::data::RadarDetection> *ptr) noexcept {
  ::carla::sensor::data::RadarDetection *uninit = reinterpret_cast<::carla::sensor::data::RadarDetection *>(new ::rust::MaybeUninit<::carla::sensor::data::RadarDetection>);
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::RadarDetection>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$sensor$data$RadarDetection$clone(::std::shared_ptr<::carla::sensor::data::RadarDetection> const &self, ::std::shared_ptr<::carla::sensor::data::RadarDetection> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::RadarDetection>(self);
}
::carla::sensor::data::RadarDetection const *cxxbridge1$shared_ptr$carla$sensor$data$RadarDetection$get(::std::shared_ptr<::carla::sensor::data::RadarDetection> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$sensor$data$RadarDetection$drop(::std::shared_ptr<::carla::sensor::data::RadarDetection> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::sensor::data::RadarDetection>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::sensor::data::RadarDetection>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$sensor$data$RadarDetection$null(::std::weak_ptr<::carla::sensor::data::RadarDetection> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::RadarDetection>();
}
void cxxbridge1$weak_ptr$carla$sensor$data$RadarDetection$clone(::std::weak_ptr<::carla::sensor::data::RadarDetection> const &self, ::std::weak_ptr<::carla::sensor::data::RadarDetection> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::RadarDetection>(self);
}
void cxxbridge1$weak_ptr$carla$sensor$data$RadarDetection$downgrade(::std::shared_ptr<::carla::sensor::data::RadarDetection> const &shared, ::std::weak_ptr<::carla::sensor::data::RadarDetection> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::sensor::data::RadarDetection>(shared);
}
void cxxbridge1$weak_ptr$carla$sensor$data$RadarDetection$upgrade(::std::weak_ptr<::carla::sensor::data::RadarDetection> const &weak, ::std::shared_ptr<::carla::sensor::data::RadarDetection> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::sensor::data::RadarDetection>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$sensor$data$RadarDetection$drop(::std::weak_ptr<::carla::sensor::data::RadarDetection> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::sensor::data::RadarDetection> *cxxbridge1$std$vector$carla$sensor$data$RadarDetection$new() noexcept {
  return new ::std::vector<::carla::sensor::data::RadarDetection>();
}
::std::size_t cxxbridge1$std$vector$carla$sensor$data$RadarDetection$size(::std::vector<::carla::sensor::data::RadarDetection> const &s) noexcept {
  return s.size();
}
::carla::sensor::data::RadarDetection *cxxbridge1$std$vector$carla$sensor$data$RadarDetection$get_unchecked(::std::vector<::carla::sensor::data::RadarDetection> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$sensor$data$RadarDetection$push_back(::std::vector<::carla::sensor::data::RadarDetection> *v, ::carla::sensor::data::RadarDetection *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$sensor$data$RadarDetection$pop_back(::std::vector<::carla::sensor::data::RadarDetection> *v, ::carla::sensor::data::RadarDetection *out) noexcept {
  ::new (out) ::carla::sensor::data::RadarDetection(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::sensor::data::RadarDetection>>::value, "definition of `::std::vector<::carla::sensor::data::RadarDetection>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::sensor::data::RadarDetection>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::sensor::data::RadarDetection>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$sensor$data$RadarDetection$null(::std::unique_ptr<::std::vector<::carla::sensor::data::RadarDetection>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::sensor::data::RadarDetection>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$sensor$data$RadarDetection$raw(::std::unique_ptr<::std::vector<::carla::sensor::data::RadarDetection>> *ptr, ::std::vector<::carla::sensor::data::RadarDetection> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::sensor::data::RadarDetection>>(raw);
}
::std::vector<::carla::sensor::data::RadarDetection> const *cxxbridge1$unique_ptr$std$vector$carla$sensor$data$RadarDetection$get(::std::unique_ptr<::std::vector<::carla::sensor::data::RadarDetection>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::sensor::data::RadarDetection> *cxxbridge1$unique_ptr$std$vector$carla$sensor$data$RadarDetection$release(::std::unique_ptr<::std::vector<::carla::sensor::data::RadarDetection>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$sensor$data$RadarDetection$drop(::std::unique_ptr<::std::vector<::carla::sensor::data::RadarDetection>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::sensor::data::RadarDetection>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::sensor::data::RadarData>::value, "definition of `::carla::sensor::data::RadarData` is required");
static_assert(sizeof(::std::unique_ptr<::carla::sensor::data::RadarData>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::sensor::data::RadarData>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$sensor$data$RadarData$null(::std::unique_ptr<::carla::sensor::data::RadarData> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::RadarData>();
}
::carla::sensor::data::RadarData *cxxbridge1$unique_ptr$carla$sensor$data$RadarData$uninit(::std::unique_ptr<::carla::sensor::data::RadarData> *ptr) noexcept {
  ::carla::sensor::data::RadarData *uninit = reinterpret_cast<::carla::sensor::data::RadarData *>(new ::rust::MaybeUninit<::carla::sensor::data::RadarData>);
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::RadarData>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$sensor$data$RadarData$raw(::std::unique_ptr<::carla::sensor::data::RadarData> *ptr, ::carla::sensor::data::RadarData *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::RadarData>(raw);
}
::carla::sensor::data::RadarData const *cxxbridge1$unique_ptr$carla$sensor$data$RadarData$get(::std::unique_ptr<::carla::sensor::data::RadarData> const &ptr) noexcept {
  return ptr.get();
}
::carla::sensor::data::RadarData *cxxbridge1$unique_ptr$carla$sensor$data$RadarData$release(::std::unique_ptr<::carla::sensor::data::RadarData> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$sensor$data$RadarData$drop(::std::unique_ptr<::carla::sensor::data::RadarData> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::sensor::data::RadarData>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::sensor::data::RadarData>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::sensor::data::RadarData>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$sensor$data$RadarData$null(::std::shared_ptr<::carla::sensor::data::RadarData> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::RadarData>();
}
::carla::sensor::data::RadarData *cxxbridge1$shared_ptr$carla$sensor$data$RadarData$uninit(::std::shared_ptr<::carla::sensor::data::RadarData> *ptr) noexcept {
  ::carla::sensor::data::RadarData *uninit = reinterpret_cast<::carla::sensor::data::RadarData *>(new ::rust::MaybeUninit<::carla::sensor::data::RadarData>);
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::RadarData>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$sensor$data$RadarData$clone(::std::shared_ptr<::carla::sensor::data::RadarData> const &self, ::std::shared_ptr<::carla::sensor::data::RadarData> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::RadarData>(self);
}
::carla::sensor::data::RadarData const *cxxbridge1$shared_ptr$carla$sensor$data$RadarData$get(::std::shared_ptr<::carla::sensor::data::RadarData> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$sensor$data$RadarData$drop(::std::shared_ptr<::carla::sensor::data::RadarData> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::sensor::data::RadarData>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::sensor::data::RadarData>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$sensor$data$RadarData$null(::std::weak_ptr<::carla::sensor::data::RadarData> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::RadarData>();
}
void cxxbridge1$weak_ptr$carla$sensor$data$RadarData$clone(::std::weak_ptr<::carla::sensor::data::RadarData> const &self, ::std::weak_ptr<::carla::sensor::data::RadarData> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::RadarData>(self);
}
void cxxbridge1$weak_ptr$carla$sensor$data$RadarData$downgrade(::std::shared_ptr<::carla::sensor::data::RadarData> const &shared, ::std::weak_ptr<::carla::sensor::data::RadarData> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::sensor::data::RadarData>(shared);
}
void cxxbridge1$weak_ptr$carla$sensor$data$RadarData$upgrade(::std::weak_ptr<::carla::sensor::data::RadarData> const &weak, ::std::shared_ptr<::carla::sensor::data::RadarData> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::sensor::data::RadarData>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$sensor$data$RadarData$drop(::std::weak_ptr<::carla::sensor::data::RadarData> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::sensor::data::RadarMeasurement>::value, "definition of `::carla::sensor::data::RadarMeasurement` is required");
static_assert(sizeof(::std::unique_ptr<::carla::sensor::data::RadarMeasurement>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::sensor::data::RadarMeasurement>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$sensor$data$RadarMeasurement$null(::std::unique_ptr<::carla::sensor::data::RadarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::RadarMeasurement>();
}
::carla::sensor::data::RadarMeasurement *cxxbridge1$unique_ptr$carla$sensor$data$RadarMeasurement$uninit(::std::unique_ptr<::carla::sensor::data::RadarMeasurement> *ptr) noexcept {
  ::carla::sensor::data::RadarMeasurement *uninit = reinterpret_cast<::carla::sensor::data::RadarMeasurement *>(new ::rust::MaybeUninit<::carla::sensor::data::RadarMeasurement>);
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::RadarMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$sensor$data$RadarMeasurement$raw(::std::unique_ptr<::carla::sensor::data::RadarMeasurement> *ptr, ::carla::sensor::data::RadarMeasurement *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::data::RadarMeasurement>(raw);
}
::carla::sensor::data::RadarMeasurement const *cxxbridge1$unique_ptr$carla$sensor$data$RadarMeasurement$get(::std::unique_ptr<::carla::sensor::data::RadarMeasurement> const &ptr) noexcept {
  return ptr.get();
}
::carla::sensor::data::RadarMeasurement *cxxbridge1$unique_ptr$carla$sensor$data$RadarMeasurement$release(::std::unique_ptr<::carla::sensor::data::RadarMeasurement> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$sensor$data$RadarMeasurement$drop(::std::unique_ptr<::carla::sensor::data::RadarMeasurement> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::sensor::data::RadarMeasurement>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::sensor::data::RadarMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::sensor::data::RadarMeasurement>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$sensor$data$RadarMeasurement$null(::std::shared_ptr<::carla::sensor::data::RadarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::RadarMeasurement>();
}
::carla::sensor::data::RadarMeasurement *cxxbridge1$shared_ptr$carla$sensor$data$RadarMeasurement$uninit(::std::shared_ptr<::carla::sensor::data::RadarMeasurement> *ptr) noexcept {
  ::carla::sensor::data::RadarMeasurement *uninit = reinterpret_cast<::carla::sensor::data::RadarMeasurement *>(new ::rust::MaybeUninit<::carla::sensor::data::RadarMeasurement>);
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::RadarMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$sensor$data$RadarMeasurement$clone(::std::shared_ptr<::carla::sensor::data::RadarMeasurement> const &self, ::std::shared_ptr<::carla::sensor::data::RadarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::data::RadarMeasurement>(self);
}
::carla::sensor::data::RadarMeasurement const *cxxbridge1$shared_ptr$carla$sensor$data$RadarMeasurement$get(::std::shared_ptr<::carla::sensor::data::RadarMeasurement> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$sensor$data$RadarMeasurement$drop(::std::shared_ptr<::carla::sensor::data::RadarMeasurement> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::sensor::data::RadarMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::sensor::data::RadarMeasurement>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$sensor$data$RadarMeasurement$null(::std::weak_ptr<::carla::sensor::data::RadarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::RadarMeasurement>();
}
void cxxbridge1$weak_ptr$carla$sensor$data$RadarMeasurement$clone(::std::weak_ptr<::carla::sensor::data::RadarMeasurement> const &self, ::std::weak_ptr<::carla::sensor::data::RadarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::data::RadarMeasurement>(self);
}
void cxxbridge1$weak_ptr$carla$sensor$data$RadarMeasurement$downgrade(::std::shared_ptr<::carla::sensor::data::RadarMeasurement> const &shared, ::std::weak_ptr<::carla::sensor::data::RadarMeasurement> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::sensor::data::RadarMeasurement>(shared);
}
void cxxbridge1$weak_ptr$carla$sensor$data$RadarMeasurement$upgrade(::std::weak_ptr<::carla::sensor::data::RadarMeasurement> const &weak, ::std::shared_ptr<::carla::sensor::data::RadarMeasurement> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::sensor::data::RadarMeasurement>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$sensor$data$RadarMeasurement$drop(::std::weak_ptr<::carla::sensor::data::RadarMeasurement> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::sensor::SensorData>::value, "definition of `::carla::sensor::SensorData` is required");
static_assert(sizeof(::std::unique_ptr<::carla::sensor::SensorData>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::sensor::SensorData>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$sensor$SensorData$null(::std::unique_ptr<::carla::sensor::SensorData> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::SensorData>();
}
::carla::sensor::SensorData *cxxbridge1$unique_ptr$carla$sensor$SensorData$uninit(::std::unique_ptr<::carla::sensor::SensorData> *ptr) noexcept {
  ::carla::sensor::SensorData *uninit = reinterpret_cast<::carla::sensor::SensorData *>(new ::rust::MaybeUninit<::carla::sensor::SensorData>);
  ::new (ptr) ::std::unique_ptr<::carla::sensor::SensorData>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$sensor$SensorData$raw(::std::unique_ptr<::carla::sensor::SensorData> *ptr, ::carla::sensor::SensorData *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::SensorData>(raw);
}
::carla::sensor::SensorData const *cxxbridge1$unique_ptr$carla$sensor$SensorData$get(::std::unique_ptr<::carla::sensor::SensorData> const &ptr) noexcept {
  return ptr.get();
}
::carla::sensor::SensorData *cxxbridge1$unique_ptr$carla$sensor$SensorData$release(::std::unique_ptr<::carla::sensor::SensorData> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$sensor$SensorData$drop(::std::unique_ptr<::carla::sensor::SensorData> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::sensor::SensorData>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::sensor::SensorData>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::sensor::SensorData>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$sensor$SensorData$null(::std::shared_ptr<::carla::sensor::SensorData> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::SensorData>();
}
::carla::sensor::SensorData *cxxbridge1$shared_ptr$carla$sensor$SensorData$uninit(::std::shared_ptr<::carla::sensor::SensorData> *ptr) noexcept {
  ::carla::sensor::SensorData *uninit = reinterpret_cast<::carla::sensor::SensorData *>(new ::rust::MaybeUninit<::carla::sensor::SensorData>);
  ::new (ptr) ::std::shared_ptr<::carla::sensor::SensorData>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$sensor$SensorData$clone(::std::shared_ptr<::carla::sensor::SensorData> const &self, ::std::shared_ptr<::carla::sensor::SensorData> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::SensorData>(self);
}
::carla::sensor::SensorData const *cxxbridge1$shared_ptr$carla$sensor$SensorData$get(::std::shared_ptr<::carla::sensor::SensorData> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$sensor$SensorData$drop(::std::shared_ptr<::carla::sensor::SensorData> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::sensor::SensorData>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::sensor::SensorData>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$sensor$SensorData$null(::std::weak_ptr<::carla::sensor::SensorData> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::SensorData>();
}
void cxxbridge1$weak_ptr$carla$sensor$SensorData$clone(::std::weak_ptr<::carla::sensor::SensorData> const &self, ::std::weak_ptr<::carla::sensor::SensorData> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::SensorData>(self);
}
void cxxbridge1$weak_ptr$carla$sensor$SensorData$downgrade(::std::shared_ptr<::carla::sensor::SensorData> const &shared, ::std::weak_ptr<::carla::sensor::SensorData> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::sensor::SensorData>(shared);
}
void cxxbridge1$weak_ptr$carla$sensor$SensorData$upgrade(::std::weak_ptr<::carla::sensor::SensorData> const &weak, ::std::shared_ptr<::carla::sensor::SensorData> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::sensor::SensorData>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$sensor$SensorData$drop(::std::weak_ptr<::carla::sensor::SensorData> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::client::Landmark>::value, "definition of `::carla::client::Landmark` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::Landmark>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::Landmark>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$Landmark$null(::std::unique_ptr<::carla::client::Landmark> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::Landmark>();
}
::carla::client::Landmark *cxxbridge1$unique_ptr$carla$client$Landmark$uninit(::std::unique_ptr<::carla::client::Landmark> *ptr) noexcept {
  ::carla::client::Landmark *uninit = reinterpret_cast<::carla::client::Landmark *>(new ::rust::MaybeUninit<::carla::client::Landmark>);
  ::new (ptr) ::std::unique_ptr<::carla::client::Landmark>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$Landmark$raw(::std::unique_ptr<::carla::client::Landmark> *ptr, ::carla::client::Landmark *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::Landmark>(raw);
}
::carla::client::Landmark const *cxxbridge1$unique_ptr$carla$client$Landmark$get(::std::unique_ptr<::carla::client::Landmark> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::Landmark *cxxbridge1$unique_ptr$carla$client$Landmark$release(::std::unique_ptr<::carla::client::Landmark> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$Landmark$drop(::std::unique_ptr<::carla::client::Landmark> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::Landmark>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::Landmark>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::Landmark>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$Landmark$null(::std::shared_ptr<::carla::client::Landmark> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::Landmark>();
}
::carla::client::Landmark *cxxbridge1$shared_ptr$carla$client$Landmark$uninit(::std::shared_ptr<::carla::client::Landmark> *ptr) noexcept {
  ::carla::client::Landmark *uninit = reinterpret_cast<::carla::client::Landmark *>(new ::rust::MaybeUninit<::carla::client::Landmark>);
  ::new (ptr) ::std::shared_ptr<::carla::client::Landmark>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$Landmark$clone(::std::shared_ptr<::carla::client::Landmark> const &self, ::std::shared_ptr<::carla::client::Landmark> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::Landmark>(self);
}
::carla::client::Landmark const *cxxbridge1$shared_ptr$carla$client$Landmark$get(::std::shared_ptr<::carla::client::Landmark> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$Landmark$drop(::std::shared_ptr<::carla::client::Landmark> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::Landmark>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::Landmark>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$Landmark$null(::std::weak_ptr<::carla::client::Landmark> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::Landmark>();
}
void cxxbridge1$weak_ptr$carla$client$Landmark$clone(::std::weak_ptr<::carla::client::Landmark> const &self, ::std::weak_ptr<::carla::client::Landmark> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::Landmark>(self);
}
void cxxbridge1$weak_ptr$carla$client$Landmark$downgrade(::std::shared_ptr<::carla::client::Landmark> const &shared, ::std::weak_ptr<::carla::client::Landmark> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::Landmark>(shared);
}
void cxxbridge1$weak_ptr$carla$client$Landmark$upgrade(::std::weak_ptr<::carla::client::Landmark> const &weak, ::std::shared_ptr<::carla::client::Landmark> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::Landmark>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$Landmark$drop(::std::weak_ptr<::carla::client::Landmark> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::client::Timestamp>::value, "definition of `::carla::client::Timestamp` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::Timestamp>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::Timestamp>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$Timestamp$null(::std::unique_ptr<::carla::client::Timestamp> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::Timestamp>();
}
::carla::client::Timestamp *cxxbridge1$unique_ptr$carla$client$Timestamp$uninit(::std::unique_ptr<::carla::client::Timestamp> *ptr) noexcept {
  ::carla::client::Timestamp *uninit = reinterpret_cast<::carla::client::Timestamp *>(new ::rust::MaybeUninit<::carla::client::Timestamp>);
  ::new (ptr) ::std::unique_ptr<::carla::client::Timestamp>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$Timestamp$raw(::std::unique_ptr<::carla::client::Timestamp> *ptr, ::carla::client::Timestamp *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::Timestamp>(raw);
}
::carla::client::Timestamp const *cxxbridge1$unique_ptr$carla$client$Timestamp$get(::std::unique_ptr<::carla::client::Timestamp> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::Timestamp *cxxbridge1$unique_ptr$carla$client$Timestamp$release(::std::unique_ptr<::carla::client::Timestamp> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$Timestamp$drop(::std::unique_ptr<::carla::client::Timestamp> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::Timestamp>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::Timestamp>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::Timestamp>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$Timestamp$null(::std::shared_ptr<::carla::client::Timestamp> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::Timestamp>();
}
::carla::client::Timestamp *cxxbridge1$shared_ptr$carla$client$Timestamp$uninit(::std::shared_ptr<::carla::client::Timestamp> *ptr) noexcept {
  ::carla::client::Timestamp *uninit = reinterpret_cast<::carla::client::Timestamp *>(new ::rust::MaybeUninit<::carla::client::Timestamp>);
  ::new (ptr) ::std::shared_ptr<::carla::client::Timestamp>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$Timestamp$clone(::std::shared_ptr<::carla::client::Timestamp> const &self, ::std::shared_ptr<::carla::client::Timestamp> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::Timestamp>(self);
}
::carla::client::Timestamp const *cxxbridge1$shared_ptr$carla$client$Timestamp$get(::std::shared_ptr<::carla::client::Timestamp> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$Timestamp$drop(::std::shared_ptr<::carla::client::Timestamp> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::Timestamp>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::Timestamp>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$Timestamp$null(::std::weak_ptr<::carla::client::Timestamp> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::Timestamp>();
}
void cxxbridge1$weak_ptr$carla$client$Timestamp$clone(::std::weak_ptr<::carla::client::Timestamp> const &self, ::std::weak_ptr<::carla::client::Timestamp> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::Timestamp>(self);
}
void cxxbridge1$weak_ptr$carla$client$Timestamp$downgrade(::std::shared_ptr<::carla::client::Timestamp> const &shared, ::std::weak_ptr<::carla::client::Timestamp> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::Timestamp>(shared);
}
void cxxbridge1$weak_ptr$carla$client$Timestamp$upgrade(::std::weak_ptr<::carla::client::Timestamp> const &weak, ::std::shared_ptr<::carla::client::Timestamp> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::Timestamp>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$Timestamp$drop(::std::weak_ptr<::carla::client::Timestamp> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::client::Timestamp> *cxxbridge1$std$vector$carla$client$Timestamp$new() noexcept {
  return new ::std::vector<::carla::client::Timestamp>();
}
::std::size_t cxxbridge1$std$vector$carla$client$Timestamp$size(::std::vector<::carla::client::Timestamp> const &s) noexcept {
  return s.size();
}
::carla::client::Timestamp *cxxbridge1$std$vector$carla$client$Timestamp$get_unchecked(::std::vector<::carla::client::Timestamp> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$client$Timestamp$push_back(::std::vector<::carla::client::Timestamp> *v, ::carla::client::Timestamp *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$client$Timestamp$pop_back(::std::vector<::carla::client::Timestamp> *v, ::carla::client::Timestamp *out) noexcept {
  ::new (out) ::carla::client::Timestamp(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::client::Timestamp>>::value, "definition of `::std::vector<::carla::client::Timestamp>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::client::Timestamp>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::client::Timestamp>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$client$Timestamp$null(::std::unique_ptr<::std::vector<::carla::client::Timestamp>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::client::Timestamp>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$client$Timestamp$raw(::std::unique_ptr<::std::vector<::carla::client::Timestamp>> *ptr, ::std::vector<::carla::client::Timestamp> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::client::Timestamp>>(raw);
}
::std::vector<::carla::client::Timestamp> const *cxxbridge1$unique_ptr$std$vector$carla$client$Timestamp$get(::std::unique_ptr<::std::vector<::carla::client::Timestamp>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::client::Timestamp> *cxxbridge1$unique_ptr$std$vector$carla$client$Timestamp$release(::std::unique_ptr<::std::vector<::carla::client::Timestamp>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$client$Timestamp$drop(::std::unique_ptr<::std::vector<::carla::client::Timestamp>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::client::Timestamp>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::client::WorldSnapshot>::value, "definition of `::carla::client::WorldSnapshot` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::WorldSnapshot>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::WorldSnapshot>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$WorldSnapshot$null(::std::unique_ptr<::carla::client::WorldSnapshot> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::WorldSnapshot>();
}
::carla::client::WorldSnapshot *cxxbridge1$unique_ptr$carla$client$WorldSnapshot$uninit(::std::unique_ptr<::carla::client::WorldSnapshot> *ptr) noexcept {
  ::carla::client::WorldSnapshot *uninit = reinterpret_cast<::carla::client::WorldSnapshot *>(new ::rust::MaybeUninit<::carla::client::WorldSnapshot>);
  ::new (ptr) ::std::unique_ptr<::carla::client::WorldSnapshot>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$WorldSnapshot$raw(::std::unique_ptr<::carla::client::WorldSnapshot> *ptr, ::carla::client::WorldSnapshot *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::WorldSnapshot>(raw);
}
::carla::client::WorldSnapshot const *cxxbridge1$unique_ptr$carla$client$WorldSnapshot$get(::std::unique_ptr<::carla::client::WorldSnapshot> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::WorldSnapshot *cxxbridge1$unique_ptr$carla$client$WorldSnapshot$release(::std::unique_ptr<::carla::client::WorldSnapshot> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$WorldSnapshot$drop(::std::unique_ptr<::carla::client::WorldSnapshot> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::WorldSnapshot>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::WorldSnapshot>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::WorldSnapshot>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$WorldSnapshot$null(::std::shared_ptr<::carla::client::WorldSnapshot> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::WorldSnapshot>();
}
::carla::client::WorldSnapshot *cxxbridge1$shared_ptr$carla$client$WorldSnapshot$uninit(::std::shared_ptr<::carla::client::WorldSnapshot> *ptr) noexcept {
  ::carla::client::WorldSnapshot *uninit = reinterpret_cast<::carla::client::WorldSnapshot *>(new ::rust::MaybeUninit<::carla::client::WorldSnapshot>);
  ::new (ptr) ::std::shared_ptr<::carla::client::WorldSnapshot>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$WorldSnapshot$clone(::std::shared_ptr<::carla::client::WorldSnapshot> const &self, ::std::shared_ptr<::carla::client::WorldSnapshot> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::WorldSnapshot>(self);
}
::carla::client::WorldSnapshot const *cxxbridge1$shared_ptr$carla$client$WorldSnapshot$get(::std::shared_ptr<::carla::client::WorldSnapshot> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$WorldSnapshot$drop(::std::shared_ptr<::carla::client::WorldSnapshot> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::WorldSnapshot>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::WorldSnapshot>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$WorldSnapshot$null(::std::weak_ptr<::carla::client::WorldSnapshot> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::WorldSnapshot>();
}
void cxxbridge1$weak_ptr$carla$client$WorldSnapshot$clone(::std::weak_ptr<::carla::client::WorldSnapshot> const &self, ::std::weak_ptr<::carla::client::WorldSnapshot> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::WorldSnapshot>(self);
}
void cxxbridge1$weak_ptr$carla$client$WorldSnapshot$downgrade(::std::shared_ptr<::carla::client::WorldSnapshot> const &shared, ::std::weak_ptr<::carla::client::WorldSnapshot> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::WorldSnapshot>(shared);
}
void cxxbridge1$weak_ptr$carla$client$WorldSnapshot$upgrade(::std::weak_ptr<::carla::client::WorldSnapshot> const &weak, ::std::shared_ptr<::carla::client::WorldSnapshot> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::WorldSnapshot>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$WorldSnapshot$drop(::std::weak_ptr<::carla::client::WorldSnapshot> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::client::WorldSnapshot> *cxxbridge1$std$vector$carla$client$WorldSnapshot$new() noexcept {
  return new ::std::vector<::carla::client::WorldSnapshot>();
}
::std::size_t cxxbridge1$std$vector$carla$client$WorldSnapshot$size(::std::vector<::carla::client::WorldSnapshot> const &s) noexcept {
  return s.size();
}
::carla::client::WorldSnapshot *cxxbridge1$std$vector$carla$client$WorldSnapshot$get_unchecked(::std::vector<::carla::client::WorldSnapshot> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$client$WorldSnapshot$push_back(::std::vector<::carla::client::WorldSnapshot> *v, ::carla::client::WorldSnapshot *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$client$WorldSnapshot$pop_back(::std::vector<::carla::client::WorldSnapshot> *v, ::carla::client::WorldSnapshot *out) noexcept {
  ::new (out) ::carla::client::WorldSnapshot(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::client::WorldSnapshot>>::value, "definition of `::std::vector<::carla::client::WorldSnapshot>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::client::WorldSnapshot>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::client::WorldSnapshot>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$client$WorldSnapshot$null(::std::unique_ptr<::std::vector<::carla::client::WorldSnapshot>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::client::WorldSnapshot>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$client$WorldSnapshot$raw(::std::unique_ptr<::std::vector<::carla::client::WorldSnapshot>> *ptr, ::std::vector<::carla::client::WorldSnapshot> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::client::WorldSnapshot>>(raw);
}
::std::vector<::carla::client::WorldSnapshot> const *cxxbridge1$unique_ptr$std$vector$carla$client$WorldSnapshot$get(::std::unique_ptr<::std::vector<::carla::client::WorldSnapshot>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::client::WorldSnapshot> *cxxbridge1$unique_ptr$std$vector$carla$client$WorldSnapshot$release(::std::unique_ptr<::std::vector<::carla::client::WorldSnapshot>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$client$WorldSnapshot$drop(::std::unique_ptr<::std::vector<::carla::client::WorldSnapshot>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::client::WorldSnapshot>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::client::Light>::value, "definition of `::carla::client::Light` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::Light>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::Light>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$Light$null(::std::unique_ptr<::carla::client::Light> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::Light>();
}
::carla::client::Light *cxxbridge1$unique_ptr$carla$client$Light$uninit(::std::unique_ptr<::carla::client::Light> *ptr) noexcept {
  ::carla::client::Light *uninit = reinterpret_cast<::carla::client::Light *>(new ::rust::MaybeUninit<::carla::client::Light>);
  ::new (ptr) ::std::unique_ptr<::carla::client::Light>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$Light$raw(::std::unique_ptr<::carla::client::Light> *ptr, ::carla::client::Light *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::Light>(raw);
}
::carla::client::Light const *cxxbridge1$unique_ptr$carla$client$Light$get(::std::unique_ptr<::carla::client::Light> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::Light *cxxbridge1$unique_ptr$carla$client$Light$release(::std::unique_ptr<::carla::client::Light> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$Light$drop(::std::unique_ptr<::carla::client::Light> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::Light>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::Light>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::Light>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$Light$null(::std::shared_ptr<::carla::client::Light> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::Light>();
}
::carla::client::Light *cxxbridge1$shared_ptr$carla$client$Light$uninit(::std::shared_ptr<::carla::client::Light> *ptr) noexcept {
  ::carla::client::Light *uninit = reinterpret_cast<::carla::client::Light *>(new ::rust::MaybeUninit<::carla::client::Light>);
  ::new (ptr) ::std::shared_ptr<::carla::client::Light>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$Light$clone(::std::shared_ptr<::carla::client::Light> const &self, ::std::shared_ptr<::carla::client::Light> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::Light>(self);
}
::carla::client::Light const *cxxbridge1$shared_ptr$carla$client$Light$get(::std::shared_ptr<::carla::client::Light> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$Light$drop(::std::shared_ptr<::carla::client::Light> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::Light>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::Light>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$Light$null(::std::weak_ptr<::carla::client::Light> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::Light>();
}
void cxxbridge1$weak_ptr$carla$client$Light$clone(::std::weak_ptr<::carla::client::Light> const &self, ::std::weak_ptr<::carla::client::Light> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::Light>(self);
}
void cxxbridge1$weak_ptr$carla$client$Light$downgrade(::std::shared_ptr<::carla::client::Light> const &shared, ::std::weak_ptr<::carla::client::Light> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::Light>(shared);
}
void cxxbridge1$weak_ptr$carla$client$Light$upgrade(::std::weak_ptr<::carla::client::Light> const &weak, ::std::shared_ptr<::carla::client::Light> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::Light>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$Light$drop(::std::weak_ptr<::carla::client::Light> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::client::Vehicle>::value, "definition of `::carla::client::Vehicle` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::Vehicle>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::Vehicle>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$Vehicle$null(::std::unique_ptr<::carla::client::Vehicle> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::Vehicle>();
}
::carla::client::Vehicle *cxxbridge1$unique_ptr$carla$client$Vehicle$uninit(::std::unique_ptr<::carla::client::Vehicle> *ptr) noexcept {
  ::carla::client::Vehicle *uninit = reinterpret_cast<::carla::client::Vehicle *>(new ::rust::MaybeUninit<::carla::client::Vehicle>);
  ::new (ptr) ::std::unique_ptr<::carla::client::Vehicle>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$Vehicle$raw(::std::unique_ptr<::carla::client::Vehicle> *ptr, ::carla::client::Vehicle *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::Vehicle>(raw);
}
::carla::client::Vehicle const *cxxbridge1$unique_ptr$carla$client$Vehicle$get(::std::unique_ptr<::carla::client::Vehicle> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::Vehicle *cxxbridge1$unique_ptr$carla$client$Vehicle$release(::std::unique_ptr<::carla::client::Vehicle> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$Vehicle$drop(::std::unique_ptr<::carla::client::Vehicle> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::Vehicle>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::Vehicle>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::Vehicle>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$Vehicle$null(::std::shared_ptr<::carla::client::Vehicle> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::Vehicle>();
}
::carla::client::Vehicle *cxxbridge1$shared_ptr$carla$client$Vehicle$uninit(::std::shared_ptr<::carla::client::Vehicle> *ptr) noexcept {
  ::carla::client::Vehicle *uninit = reinterpret_cast<::carla::client::Vehicle *>(new ::rust::MaybeUninit<::carla::client::Vehicle>);
  ::new (ptr) ::std::shared_ptr<::carla::client::Vehicle>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$Vehicle$clone(::std::shared_ptr<::carla::client::Vehicle> const &self, ::std::shared_ptr<::carla::client::Vehicle> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::Vehicle>(self);
}
::carla::client::Vehicle const *cxxbridge1$shared_ptr$carla$client$Vehicle$get(::std::shared_ptr<::carla::client::Vehicle> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$Vehicle$drop(::std::shared_ptr<::carla::client::Vehicle> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::Vehicle>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::Vehicle>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$Vehicle$null(::std::weak_ptr<::carla::client::Vehicle> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::Vehicle>();
}
void cxxbridge1$weak_ptr$carla$client$Vehicle$clone(::std::weak_ptr<::carla::client::Vehicle> const &self, ::std::weak_ptr<::carla::client::Vehicle> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::Vehicle>(self);
}
void cxxbridge1$weak_ptr$carla$client$Vehicle$downgrade(::std::shared_ptr<::carla::client::Vehicle> const &shared, ::std::weak_ptr<::carla::client::Vehicle> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::Vehicle>(shared);
}
void cxxbridge1$weak_ptr$carla$client$Vehicle$upgrade(::std::weak_ptr<::carla::client::Vehicle> const &weak, ::std::shared_ptr<::carla::client::Vehicle> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::Vehicle>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$Vehicle$drop(::std::weak_ptr<::carla::client::Vehicle> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::client::TrafficSign>::value, "definition of `::carla::client::TrafficSign` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::TrafficSign>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::TrafficSign>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$TrafficSign$null(::std::unique_ptr<::carla::client::TrafficSign> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::TrafficSign>();
}
::carla::client::TrafficSign *cxxbridge1$unique_ptr$carla$client$TrafficSign$uninit(::std::unique_ptr<::carla::client::TrafficSign> *ptr) noexcept {
  ::carla::client::TrafficSign *uninit = reinterpret_cast<::carla::client::TrafficSign *>(new ::rust::MaybeUninit<::carla::client::TrafficSign>);
  ::new (ptr) ::std::unique_ptr<::carla::client::TrafficSign>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$TrafficSign$raw(::std::unique_ptr<::carla::client::TrafficSign> *ptr, ::carla::client::TrafficSign *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::TrafficSign>(raw);
}
::carla::client::TrafficSign const *cxxbridge1$unique_ptr$carla$client$TrafficSign$get(::std::unique_ptr<::carla::client::TrafficSign> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::TrafficSign *cxxbridge1$unique_ptr$carla$client$TrafficSign$release(::std::unique_ptr<::carla::client::TrafficSign> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$TrafficSign$drop(::std::unique_ptr<::carla::client::TrafficSign> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::TrafficSign>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::TrafficSign>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::TrafficSign>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$TrafficSign$null(::std::shared_ptr<::carla::client::TrafficSign> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::TrafficSign>();
}
::carla::client::TrafficSign *cxxbridge1$shared_ptr$carla$client$TrafficSign$uninit(::std::shared_ptr<::carla::client::TrafficSign> *ptr) noexcept {
  ::carla::client::TrafficSign *uninit = reinterpret_cast<::carla::client::TrafficSign *>(new ::rust::MaybeUninit<::carla::client::TrafficSign>);
  ::new (ptr) ::std::shared_ptr<::carla::client::TrafficSign>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$TrafficSign$clone(::std::shared_ptr<::carla::client::TrafficSign> const &self, ::std::shared_ptr<::carla::client::TrafficSign> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::TrafficSign>(self);
}
::carla::client::TrafficSign const *cxxbridge1$shared_ptr$carla$client$TrafficSign$get(::std::shared_ptr<::carla::client::TrafficSign> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$TrafficSign$drop(::std::shared_ptr<::carla::client::TrafficSign> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::TrafficSign>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::TrafficSign>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$TrafficSign$null(::std::weak_ptr<::carla::client::TrafficSign> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::TrafficSign>();
}
void cxxbridge1$weak_ptr$carla$client$TrafficSign$clone(::std::weak_ptr<::carla::client::TrafficSign> const &self, ::std::weak_ptr<::carla::client::TrafficSign> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::TrafficSign>(self);
}
void cxxbridge1$weak_ptr$carla$client$TrafficSign$downgrade(::std::shared_ptr<::carla::client::TrafficSign> const &shared, ::std::weak_ptr<::carla::client::TrafficSign> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::TrafficSign>(shared);
}
void cxxbridge1$weak_ptr$carla$client$TrafficSign$upgrade(::std::weak_ptr<::carla::client::TrafficSign> const &weak, ::std::shared_ptr<::carla::client::TrafficSign> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::TrafficSign>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$TrafficSign$drop(::std::weak_ptr<::carla::client::TrafficSign> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::client::TrafficLight>::value, "definition of `::carla::client::TrafficLight` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::TrafficLight>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::TrafficLight>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$TrafficLight$null(::std::unique_ptr<::carla::client::TrafficLight> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::TrafficLight>();
}
::carla::client::TrafficLight *cxxbridge1$unique_ptr$carla$client$TrafficLight$uninit(::std::unique_ptr<::carla::client::TrafficLight> *ptr) noexcept {
  ::carla::client::TrafficLight *uninit = reinterpret_cast<::carla::client::TrafficLight *>(new ::rust::MaybeUninit<::carla::client::TrafficLight>);
  ::new (ptr) ::std::unique_ptr<::carla::client::TrafficLight>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$TrafficLight$raw(::std::unique_ptr<::carla::client::TrafficLight> *ptr, ::carla::client::TrafficLight *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::TrafficLight>(raw);
}
::carla::client::TrafficLight const *cxxbridge1$unique_ptr$carla$client$TrafficLight$get(::std::unique_ptr<::carla::client::TrafficLight> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::TrafficLight *cxxbridge1$unique_ptr$carla$client$TrafficLight$release(::std::unique_ptr<::carla::client::TrafficLight> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$TrafficLight$drop(::std::unique_ptr<::carla::client::TrafficLight> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::TrafficLight>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::TrafficLight>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::TrafficLight>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$TrafficLight$null(::std::shared_ptr<::carla::client::TrafficLight> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::TrafficLight>();
}
::carla::client::TrafficLight *cxxbridge1$shared_ptr$carla$client$TrafficLight$uninit(::std::shared_ptr<::carla::client::TrafficLight> *ptr) noexcept {
  ::carla::client::TrafficLight *uninit = reinterpret_cast<::carla::client::TrafficLight *>(new ::rust::MaybeUninit<::carla::client::TrafficLight>);
  ::new (ptr) ::std::shared_ptr<::carla::client::TrafficLight>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$TrafficLight$clone(::std::shared_ptr<::carla::client::TrafficLight> const &self, ::std::shared_ptr<::carla::client::TrafficLight> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::TrafficLight>(self);
}
::carla::client::TrafficLight const *cxxbridge1$shared_ptr$carla$client$TrafficLight$get(::std::shared_ptr<::carla::client::TrafficLight> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$TrafficLight$drop(::std::shared_ptr<::carla::client::TrafficLight> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::TrafficLight>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::TrafficLight>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$TrafficLight$null(::std::weak_ptr<::carla::client::TrafficLight> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::TrafficLight>();
}
void cxxbridge1$weak_ptr$carla$client$TrafficLight$clone(::std::weak_ptr<::carla::client::TrafficLight> const &self, ::std::weak_ptr<::carla::client::TrafficLight> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::TrafficLight>(self);
}
void cxxbridge1$weak_ptr$carla$client$TrafficLight$downgrade(::std::shared_ptr<::carla::client::TrafficLight> const &shared, ::std::weak_ptr<::carla::client::TrafficLight> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::TrafficLight>(shared);
}
void cxxbridge1$weak_ptr$carla$client$TrafficLight$upgrade(::std::weak_ptr<::carla::client::TrafficLight> const &weak, ::std::shared_ptr<::carla::client::TrafficLight> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::TrafficLight>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$TrafficLight$drop(::std::weak_ptr<::carla::client::TrafficLight> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::client::Walker>::value, "definition of `::carla::client::Walker` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::Walker>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::Walker>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$Walker$null(::std::unique_ptr<::carla::client::Walker> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::Walker>();
}
::carla::client::Walker *cxxbridge1$unique_ptr$carla$client$Walker$uninit(::std::unique_ptr<::carla::client::Walker> *ptr) noexcept {
  ::carla::client::Walker *uninit = reinterpret_cast<::carla::client::Walker *>(new ::rust::MaybeUninit<::carla::client::Walker>);
  ::new (ptr) ::std::unique_ptr<::carla::client::Walker>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$Walker$raw(::std::unique_ptr<::carla::client::Walker> *ptr, ::carla::client::Walker *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::Walker>(raw);
}
::carla::client::Walker const *cxxbridge1$unique_ptr$carla$client$Walker$get(::std::unique_ptr<::carla::client::Walker> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::Walker *cxxbridge1$unique_ptr$carla$client$Walker$release(::std::unique_ptr<::carla::client::Walker> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$Walker$drop(::std::unique_ptr<::carla::client::Walker> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::Walker>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::Walker>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::Walker>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$Walker$null(::std::shared_ptr<::carla::client::Walker> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::Walker>();
}
::carla::client::Walker *cxxbridge1$shared_ptr$carla$client$Walker$uninit(::std::shared_ptr<::carla::client::Walker> *ptr) noexcept {
  ::carla::client::Walker *uninit = reinterpret_cast<::carla::client::Walker *>(new ::rust::MaybeUninit<::carla::client::Walker>);
  ::new (ptr) ::std::shared_ptr<::carla::client::Walker>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$Walker$clone(::std::shared_ptr<::carla::client::Walker> const &self, ::std::shared_ptr<::carla::client::Walker> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::Walker>(self);
}
::carla::client::Walker const *cxxbridge1$shared_ptr$carla$client$Walker$get(::std::shared_ptr<::carla::client::Walker> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$Walker$drop(::std::shared_ptr<::carla::client::Walker> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::Walker>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::Walker>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$Walker$null(::std::weak_ptr<::carla::client::Walker> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::Walker>();
}
void cxxbridge1$weak_ptr$carla$client$Walker$clone(::std::weak_ptr<::carla::client::Walker> const &self, ::std::weak_ptr<::carla::client::Walker> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::Walker>(self);
}
void cxxbridge1$weak_ptr$carla$client$Walker$downgrade(::std::shared_ptr<::carla::client::Walker> const &shared, ::std::weak_ptr<::carla::client::Walker> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::Walker>(shared);
}
void cxxbridge1$weak_ptr$carla$client$Walker$upgrade(::std::weak_ptr<::carla::client::Walker> const &weak, ::std::shared_ptr<::carla::client::Walker> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::Walker>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$Walker$drop(::std::weak_ptr<::carla::client::Walker> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::client::ActorBlueprint>::value, "definition of `::carla::client::ActorBlueprint` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::ActorBlueprint>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::ActorBlueprint>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$ActorBlueprint$null(::std::unique_ptr<::carla::client::ActorBlueprint> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::ActorBlueprint>();
}
::carla::client::ActorBlueprint *cxxbridge1$unique_ptr$carla$client$ActorBlueprint$uninit(::std::unique_ptr<::carla::client::ActorBlueprint> *ptr) noexcept {
  ::carla::client::ActorBlueprint *uninit = reinterpret_cast<::carla::client::ActorBlueprint *>(new ::rust::MaybeUninit<::carla::client::ActorBlueprint>);
  ::new (ptr) ::std::unique_ptr<::carla::client::ActorBlueprint>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$ActorBlueprint$raw(::std::unique_ptr<::carla::client::ActorBlueprint> *ptr, ::carla::client::ActorBlueprint *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::ActorBlueprint>(raw);
}
::carla::client::ActorBlueprint const *cxxbridge1$unique_ptr$carla$client$ActorBlueprint$get(::std::unique_ptr<::carla::client::ActorBlueprint> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::ActorBlueprint *cxxbridge1$unique_ptr$carla$client$ActorBlueprint$release(::std::unique_ptr<::carla::client::ActorBlueprint> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$ActorBlueprint$drop(::std::unique_ptr<::carla::client::ActorBlueprint> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::ActorBlueprint>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::ActorBlueprint>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::ActorBlueprint>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$ActorBlueprint$null(::std::shared_ptr<::carla::client::ActorBlueprint> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::ActorBlueprint>();
}
::carla::client::ActorBlueprint *cxxbridge1$shared_ptr$carla$client$ActorBlueprint$uninit(::std::shared_ptr<::carla::client::ActorBlueprint> *ptr) noexcept {
  ::carla::client::ActorBlueprint *uninit = reinterpret_cast<::carla::client::ActorBlueprint *>(new ::rust::MaybeUninit<::carla::client::ActorBlueprint>);
  ::new (ptr) ::std::shared_ptr<::carla::client::ActorBlueprint>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$ActorBlueprint$clone(::std::shared_ptr<::carla::client::ActorBlueprint> const &self, ::std::shared_ptr<::carla::client::ActorBlueprint> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::ActorBlueprint>(self);
}
::carla::client::ActorBlueprint const *cxxbridge1$shared_ptr$carla$client$ActorBlueprint$get(::std::shared_ptr<::carla::client::ActorBlueprint> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$ActorBlueprint$drop(::std::shared_ptr<::carla::client::ActorBlueprint> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::ActorBlueprint>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::ActorBlueprint>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$ActorBlueprint$null(::std::weak_ptr<::carla::client::ActorBlueprint> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::ActorBlueprint>();
}
void cxxbridge1$weak_ptr$carla$client$ActorBlueprint$clone(::std::weak_ptr<::carla::client::ActorBlueprint> const &self, ::std::weak_ptr<::carla::client::ActorBlueprint> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::ActorBlueprint>(self);
}
void cxxbridge1$weak_ptr$carla$client$ActorBlueprint$downgrade(::std::shared_ptr<::carla::client::ActorBlueprint> const &shared, ::std::weak_ptr<::carla::client::ActorBlueprint> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::ActorBlueprint>(shared);
}
void cxxbridge1$weak_ptr$carla$client$ActorBlueprint$upgrade(::std::weak_ptr<::carla::client::ActorBlueprint> const &weak, ::std::shared_ptr<::carla::client::ActorBlueprint> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::ActorBlueprint>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$ActorBlueprint$drop(::std::weak_ptr<::carla::client::ActorBlueprint> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::client::ActorList>::value, "definition of `::carla::client::ActorList` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::ActorList>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::ActorList>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$ActorList$null(::std::unique_ptr<::carla::client::ActorList> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::ActorList>();
}
::carla::client::ActorList *cxxbridge1$unique_ptr$carla$client$ActorList$uninit(::std::unique_ptr<::carla::client::ActorList> *ptr) noexcept {
  ::carla::client::ActorList *uninit = reinterpret_cast<::carla::client::ActorList *>(new ::rust::MaybeUninit<::carla::client::ActorList>);
  ::new (ptr) ::std::unique_ptr<::carla::client::ActorList>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$ActorList$raw(::std::unique_ptr<::carla::client::ActorList> *ptr, ::carla::client::ActorList *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::ActorList>(raw);
}
::carla::client::ActorList const *cxxbridge1$unique_ptr$carla$client$ActorList$get(::std::unique_ptr<::carla::client::ActorList> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::ActorList *cxxbridge1$unique_ptr$carla$client$ActorList$release(::std::unique_ptr<::carla::client::ActorList> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$ActorList$drop(::std::unique_ptr<::carla::client::ActorList> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::ActorList>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::ActorList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::ActorList>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$ActorList$null(::std::shared_ptr<::carla::client::ActorList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::ActorList>();
}
::carla::client::ActorList *cxxbridge1$shared_ptr$carla$client$ActorList$uninit(::std::shared_ptr<::carla::client::ActorList> *ptr) noexcept {
  ::carla::client::ActorList *uninit = reinterpret_cast<::carla::client::ActorList *>(new ::rust::MaybeUninit<::carla::client::ActorList>);
  ::new (ptr) ::std::shared_ptr<::carla::client::ActorList>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$ActorList$clone(::std::shared_ptr<::carla::client::ActorList> const &self, ::std::shared_ptr<::carla::client::ActorList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::ActorList>(self);
}
::carla::client::ActorList const *cxxbridge1$shared_ptr$carla$client$ActorList$get(::std::shared_ptr<::carla::client::ActorList> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$ActorList$drop(::std::shared_ptr<::carla::client::ActorList> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::ActorList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::ActorList>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$ActorList$null(::std::weak_ptr<::carla::client::ActorList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::ActorList>();
}
void cxxbridge1$weak_ptr$carla$client$ActorList$clone(::std::weak_ptr<::carla::client::ActorList> const &self, ::std::weak_ptr<::carla::client::ActorList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::ActorList>(self);
}
void cxxbridge1$weak_ptr$carla$client$ActorList$downgrade(::std::shared_ptr<::carla::client::ActorList> const &shared, ::std::weak_ptr<::carla::client::ActorList> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::ActorList>(shared);
}
void cxxbridge1$weak_ptr$carla$client$ActorList$upgrade(::std::weak_ptr<::carla::client::ActorList> const &weak, ::std::shared_ptr<::carla::client::ActorList> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::ActorList>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$ActorList$drop(::std::weak_ptr<::carla::client::ActorList> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::client::LaneInvasionSensor>::value, "definition of `::carla::client::LaneInvasionSensor` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::LaneInvasionSensor>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::LaneInvasionSensor>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$LaneInvasionSensor$null(::std::unique_ptr<::carla::client::LaneInvasionSensor> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::LaneInvasionSensor>();
}
::carla::client::LaneInvasionSensor *cxxbridge1$unique_ptr$carla$client$LaneInvasionSensor$uninit(::std::unique_ptr<::carla::client::LaneInvasionSensor> *ptr) noexcept {
  ::carla::client::LaneInvasionSensor *uninit = reinterpret_cast<::carla::client::LaneInvasionSensor *>(new ::rust::MaybeUninit<::carla::client::LaneInvasionSensor>);
  ::new (ptr) ::std::unique_ptr<::carla::client::LaneInvasionSensor>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$LaneInvasionSensor$raw(::std::unique_ptr<::carla::client::LaneInvasionSensor> *ptr, ::carla::client::LaneInvasionSensor *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::LaneInvasionSensor>(raw);
}
::carla::client::LaneInvasionSensor const *cxxbridge1$unique_ptr$carla$client$LaneInvasionSensor$get(::std::unique_ptr<::carla::client::LaneInvasionSensor> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::LaneInvasionSensor *cxxbridge1$unique_ptr$carla$client$LaneInvasionSensor$release(::std::unique_ptr<::carla::client::LaneInvasionSensor> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$LaneInvasionSensor$drop(::std::unique_ptr<::carla::client::LaneInvasionSensor> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::LaneInvasionSensor>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::LaneInvasionSensor>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::LaneInvasionSensor>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$LaneInvasionSensor$null(::std::shared_ptr<::carla::client::LaneInvasionSensor> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::LaneInvasionSensor>();
}
::carla::client::LaneInvasionSensor *cxxbridge1$shared_ptr$carla$client$LaneInvasionSensor$uninit(::std::shared_ptr<::carla::client::LaneInvasionSensor> *ptr) noexcept {
  ::carla::client::LaneInvasionSensor *uninit = reinterpret_cast<::carla::client::LaneInvasionSensor *>(new ::rust::MaybeUninit<::carla::client::LaneInvasionSensor>);
  ::new (ptr) ::std::shared_ptr<::carla::client::LaneInvasionSensor>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$LaneInvasionSensor$clone(::std::shared_ptr<::carla::client::LaneInvasionSensor> const &self, ::std::shared_ptr<::carla::client::LaneInvasionSensor> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::LaneInvasionSensor>(self);
}
::carla::client::LaneInvasionSensor const *cxxbridge1$shared_ptr$carla$client$LaneInvasionSensor$get(::std::shared_ptr<::carla::client::LaneInvasionSensor> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$LaneInvasionSensor$drop(::std::shared_ptr<::carla::client::LaneInvasionSensor> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::LaneInvasionSensor>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::LaneInvasionSensor>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$LaneInvasionSensor$null(::std::weak_ptr<::carla::client::LaneInvasionSensor> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::LaneInvasionSensor>();
}
void cxxbridge1$weak_ptr$carla$client$LaneInvasionSensor$clone(::std::weak_ptr<::carla::client::LaneInvasionSensor> const &self, ::std::weak_ptr<::carla::client::LaneInvasionSensor> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::LaneInvasionSensor>(self);
}
void cxxbridge1$weak_ptr$carla$client$LaneInvasionSensor$downgrade(::std::shared_ptr<::carla::client::LaneInvasionSensor> const &shared, ::std::weak_ptr<::carla::client::LaneInvasionSensor> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::LaneInvasionSensor>(shared);
}
void cxxbridge1$weak_ptr$carla$client$LaneInvasionSensor$upgrade(::std::weak_ptr<::carla::client::LaneInvasionSensor> const &weak, ::std::shared_ptr<::carla::client::LaneInvasionSensor> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::LaneInvasionSensor>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$LaneInvasionSensor$drop(::std::weak_ptr<::carla::client::LaneInvasionSensor> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::road::element::LaneMarking::Type>::value, "definition of `::carla::road::element::LaneMarking::Type` is required");
static_assert(sizeof(::std::unique_ptr<::carla::road::element::LaneMarking::Type>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::road::element::LaneMarking::Type>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$road$element$LaneMarking$Type$null(::std::unique_ptr<::carla::road::element::LaneMarking::Type> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::element::LaneMarking::Type>();
}
::carla::road::element::LaneMarking::Type *cxxbridge1$unique_ptr$carla$road$element$LaneMarking$Type$uninit(::std::unique_ptr<::carla::road::element::LaneMarking::Type> *ptr) noexcept {
  ::carla::road::element::LaneMarking::Type *uninit = reinterpret_cast<::carla::road::element::LaneMarking::Type *>(new ::rust::MaybeUninit<::carla::road::element::LaneMarking::Type>);
  ::new (ptr) ::std::unique_ptr<::carla::road::element::LaneMarking::Type>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$road$element$LaneMarking$Type$raw(::std::unique_ptr<::carla::road::element::LaneMarking::Type> *ptr, ::carla::road::element::LaneMarking::Type *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::element::LaneMarking::Type>(raw);
}
::carla::road::element::LaneMarking::Type const *cxxbridge1$unique_ptr$carla$road$element$LaneMarking$Type$get(::std::unique_ptr<::carla::road::element::LaneMarking::Type> const &ptr) noexcept {
  return ptr.get();
}
::carla::road::element::LaneMarking::Type *cxxbridge1$unique_ptr$carla$road$element$LaneMarking$Type$release(::std::unique_ptr<::carla::road::element::LaneMarking::Type> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$road$element$LaneMarking$Type$drop(::std::unique_ptr<::carla::road::element::LaneMarking::Type> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::road::element::LaneMarking::Type>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::road::element::LaneMarking::Type>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::road::element::LaneMarking::Type>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$road$element$LaneMarking$Type$null(::std::shared_ptr<::carla::road::element::LaneMarking::Type> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::element::LaneMarking::Type>();
}
::carla::road::element::LaneMarking::Type *cxxbridge1$shared_ptr$carla$road$element$LaneMarking$Type$uninit(::std::shared_ptr<::carla::road::element::LaneMarking::Type> *ptr) noexcept {
  ::carla::road::element::LaneMarking::Type *uninit = reinterpret_cast<::carla::road::element::LaneMarking::Type *>(new ::rust::MaybeUninit<::carla::road::element::LaneMarking::Type>);
  ::new (ptr) ::std::shared_ptr<::carla::road::element::LaneMarking::Type>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$road$element$LaneMarking$Type$clone(::std::shared_ptr<::carla::road::element::LaneMarking::Type> const &self, ::std::shared_ptr<::carla::road::element::LaneMarking::Type> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::element::LaneMarking::Type>(self);
}
::carla::road::element::LaneMarking::Type const *cxxbridge1$shared_ptr$carla$road$element$LaneMarking$Type$get(::std::shared_ptr<::carla::road::element::LaneMarking::Type> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$road$element$LaneMarking$Type$drop(::std::shared_ptr<::carla::road::element::LaneMarking::Type> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::road::element::LaneMarking::Type>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::road::element::LaneMarking::Type>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$Type$null(::std::weak_ptr<::carla::road::element::LaneMarking::Type> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::element::LaneMarking::Type>();
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$Type$clone(::std::weak_ptr<::carla::road::element::LaneMarking::Type> const &self, ::std::weak_ptr<::carla::road::element::LaneMarking::Type> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::element::LaneMarking::Type>(self);
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$Type$downgrade(::std::shared_ptr<::carla::road::element::LaneMarking::Type> const &shared, ::std::weak_ptr<::carla::road::element::LaneMarking::Type> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::road::element::LaneMarking::Type>(shared);
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$Type$upgrade(::std::weak_ptr<::carla::road::element::LaneMarking::Type> const &weak, ::std::shared_ptr<::carla::road::element::LaneMarking::Type> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::road::element::LaneMarking::Type>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$Type$drop(::std::weak_ptr<::carla::road::element::LaneMarking::Type> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::road::element::LaneMarking::Type> *cxxbridge1$std$vector$carla$road$element$LaneMarking$Type$new() noexcept {
  return new ::std::vector<::carla::road::element::LaneMarking::Type>();
}
::std::size_t cxxbridge1$std$vector$carla$road$element$LaneMarking$Type$size(::std::vector<::carla::road::element::LaneMarking::Type> const &s) noexcept {
  return s.size();
}
::carla::road::element::LaneMarking::Type *cxxbridge1$std$vector$carla$road$element$LaneMarking$Type$get_unchecked(::std::vector<::carla::road::element::LaneMarking::Type> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$road$element$LaneMarking$Type$push_back(::std::vector<::carla::road::element::LaneMarking::Type> *v, ::carla::road::element::LaneMarking::Type *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$road$element$LaneMarking$Type$pop_back(::std::vector<::carla::road::element::LaneMarking::Type> *v, ::carla::road::element::LaneMarking::Type *out) noexcept {
  ::new (out) ::carla::road::element::LaneMarking::Type(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::road::element::LaneMarking::Type>>::value, "definition of `::std::vector<::carla::road::element::LaneMarking::Type>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Type>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Type>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$Type$null(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Type>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Type>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$Type$raw(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Type>> *ptr, ::std::vector<::carla::road::element::LaneMarking::Type> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Type>>(raw);
}
::std::vector<::carla::road::element::LaneMarking::Type> const *cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$Type$get(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Type>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::road::element::LaneMarking::Type> *cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$Type$release(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Type>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$Type$drop(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Type>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::road::element::LaneMarking::Type>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::road::element::LaneMarking::Color>::value, "definition of `::carla::road::element::LaneMarking::Color` is required");
static_assert(sizeof(::std::unique_ptr<::carla::road::element::LaneMarking::Color>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::road::element::LaneMarking::Color>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$road$element$LaneMarking$Color$null(::std::unique_ptr<::carla::road::element::LaneMarking::Color> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::element::LaneMarking::Color>();
}
::carla::road::element::LaneMarking::Color *cxxbridge1$unique_ptr$carla$road$element$LaneMarking$Color$uninit(::std::unique_ptr<::carla::road::element::LaneMarking::Color> *ptr) noexcept {
  ::carla::road::element::LaneMarking::Color *uninit = reinterpret_cast<::carla::road::element::LaneMarking::Color *>(new ::rust::MaybeUninit<::carla::road::element::LaneMarking::Color>);
  ::new (ptr) ::std::unique_ptr<::carla::road::element::LaneMarking::Color>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$road$element$LaneMarking$Color$raw(::std::unique_ptr<::carla::road::element::LaneMarking::Color> *ptr, ::carla::road::element::LaneMarking::Color *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::element::LaneMarking::Color>(raw);
}
::carla::road::element::LaneMarking::Color const *cxxbridge1$unique_ptr$carla$road$element$LaneMarking$Color$get(::std::unique_ptr<::carla::road::element::LaneMarking::Color> const &ptr) noexcept {
  return ptr.get();
}
::carla::road::element::LaneMarking::Color *cxxbridge1$unique_ptr$carla$road$element$LaneMarking$Color$release(::std::unique_ptr<::carla::road::element::LaneMarking::Color> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$road$element$LaneMarking$Color$drop(::std::unique_ptr<::carla::road::element::LaneMarking::Color> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::road::element::LaneMarking::Color>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::road::element::LaneMarking::Color>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::road::element::LaneMarking::Color>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$road$element$LaneMarking$Color$null(::std::shared_ptr<::carla::road::element::LaneMarking::Color> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::element::LaneMarking::Color>();
}
::carla::road::element::LaneMarking::Color *cxxbridge1$shared_ptr$carla$road$element$LaneMarking$Color$uninit(::std::shared_ptr<::carla::road::element::LaneMarking::Color> *ptr) noexcept {
  ::carla::road::element::LaneMarking::Color *uninit = reinterpret_cast<::carla::road::element::LaneMarking::Color *>(new ::rust::MaybeUninit<::carla::road::element::LaneMarking::Color>);
  ::new (ptr) ::std::shared_ptr<::carla::road::element::LaneMarking::Color>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$road$element$LaneMarking$Color$clone(::std::shared_ptr<::carla::road::element::LaneMarking::Color> const &self, ::std::shared_ptr<::carla::road::element::LaneMarking::Color> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::element::LaneMarking::Color>(self);
}
::carla::road::element::LaneMarking::Color const *cxxbridge1$shared_ptr$carla$road$element$LaneMarking$Color$get(::std::shared_ptr<::carla::road::element::LaneMarking::Color> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$road$element$LaneMarking$Color$drop(::std::shared_ptr<::carla::road::element::LaneMarking::Color> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::road::element::LaneMarking::Color>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::road::element::LaneMarking::Color>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$Color$null(::std::weak_ptr<::carla::road::element::LaneMarking::Color> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::element::LaneMarking::Color>();
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$Color$clone(::std::weak_ptr<::carla::road::element::LaneMarking::Color> const &self, ::std::weak_ptr<::carla::road::element::LaneMarking::Color> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::element::LaneMarking::Color>(self);
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$Color$downgrade(::std::shared_ptr<::carla::road::element::LaneMarking::Color> const &shared, ::std::weak_ptr<::carla::road::element::LaneMarking::Color> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::road::element::LaneMarking::Color>(shared);
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$Color$upgrade(::std::weak_ptr<::carla::road::element::LaneMarking::Color> const &weak, ::std::shared_ptr<::carla::road::element::LaneMarking::Color> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::road::element::LaneMarking::Color>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$Color$drop(::std::weak_ptr<::carla::road::element::LaneMarking::Color> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::road::element::LaneMarking::Color> *cxxbridge1$std$vector$carla$road$element$LaneMarking$Color$new() noexcept {
  return new ::std::vector<::carla::road::element::LaneMarking::Color>();
}
::std::size_t cxxbridge1$std$vector$carla$road$element$LaneMarking$Color$size(::std::vector<::carla::road::element::LaneMarking::Color> const &s) noexcept {
  return s.size();
}
::carla::road::element::LaneMarking::Color *cxxbridge1$std$vector$carla$road$element$LaneMarking$Color$get_unchecked(::std::vector<::carla::road::element::LaneMarking::Color> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$road$element$LaneMarking$Color$push_back(::std::vector<::carla::road::element::LaneMarking::Color> *v, ::carla::road::element::LaneMarking::Color *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$road$element$LaneMarking$Color$pop_back(::std::vector<::carla::road::element::LaneMarking::Color> *v, ::carla::road::element::LaneMarking::Color *out) noexcept {
  ::new (out) ::carla::road::element::LaneMarking::Color(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::road::element::LaneMarking::Color>>::value, "definition of `::std::vector<::carla::road::element::LaneMarking::Color>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Color>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Color>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$Color$null(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Color>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Color>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$Color$raw(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Color>> *ptr, ::std::vector<::carla::road::element::LaneMarking::Color> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Color>>(raw);
}
::std::vector<::carla::road::element::LaneMarking::Color> const *cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$Color$get(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Color>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::road::element::LaneMarking::Color> *cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$Color$release(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Color>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$Color$drop(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::Color>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::road::element::LaneMarking::Color>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::road::element::LaneMarking::LaneChange>::value, "definition of `::carla::road::element::LaneMarking::LaneChange` is required");
static_assert(sizeof(::std::unique_ptr<::carla::road::element::LaneMarking::LaneChange>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::road::element::LaneMarking::LaneChange>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$road$element$LaneMarking$LaneChange$null(::std::unique_ptr<::carla::road::element::LaneMarking::LaneChange> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::element::LaneMarking::LaneChange>();
}
::carla::road::element::LaneMarking::LaneChange *cxxbridge1$unique_ptr$carla$road$element$LaneMarking$LaneChange$uninit(::std::unique_ptr<::carla::road::element::LaneMarking::LaneChange> *ptr) noexcept {
  ::carla::road::element::LaneMarking::LaneChange *uninit = reinterpret_cast<::carla::road::element::LaneMarking::LaneChange *>(new ::rust::MaybeUninit<::carla::road::element::LaneMarking::LaneChange>);
  ::new (ptr) ::std::unique_ptr<::carla::road::element::LaneMarking::LaneChange>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$road$element$LaneMarking$LaneChange$raw(::std::unique_ptr<::carla::road::element::LaneMarking::LaneChange> *ptr, ::carla::road::element::LaneMarking::LaneChange *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::element::LaneMarking::LaneChange>(raw);
}
::carla::road::element::LaneMarking::LaneChange const *cxxbridge1$unique_ptr$carla$road$element$LaneMarking$LaneChange$get(::std::unique_ptr<::carla::road::element::LaneMarking::LaneChange> const &ptr) noexcept {
  return ptr.get();
}
::carla::road::element::LaneMarking::LaneChange *cxxbridge1$unique_ptr$carla$road$element$LaneMarking$LaneChange$release(::std::unique_ptr<::carla::road::element::LaneMarking::LaneChange> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$road$element$LaneMarking$LaneChange$drop(::std::unique_ptr<::carla::road::element::LaneMarking::LaneChange> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::road::element::LaneMarking::LaneChange>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$road$element$LaneMarking$LaneChange$null(::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange>();
}
::carla::road::element::LaneMarking::LaneChange *cxxbridge1$shared_ptr$carla$road$element$LaneMarking$LaneChange$uninit(::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange> *ptr) noexcept {
  ::carla::road::element::LaneMarking::LaneChange *uninit = reinterpret_cast<::carla::road::element::LaneMarking::LaneChange *>(new ::rust::MaybeUninit<::carla::road::element::LaneMarking::LaneChange>);
  ::new (ptr) ::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$road$element$LaneMarking$LaneChange$clone(::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange> const &self, ::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange>(self);
}
::carla::road::element::LaneMarking::LaneChange const *cxxbridge1$shared_ptr$carla$road$element$LaneMarking$LaneChange$get(::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$road$element$LaneMarking$LaneChange$drop(::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::road::element::LaneMarking::LaneChange>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::road::element::LaneMarking::LaneChange>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$LaneChange$null(::std::weak_ptr<::carla::road::element::LaneMarking::LaneChange> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::element::LaneMarking::LaneChange>();
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$LaneChange$clone(::std::weak_ptr<::carla::road::element::LaneMarking::LaneChange> const &self, ::std::weak_ptr<::carla::road::element::LaneMarking::LaneChange> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::element::LaneMarking::LaneChange>(self);
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$LaneChange$downgrade(::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange> const &shared, ::std::weak_ptr<::carla::road::element::LaneMarking::LaneChange> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::road::element::LaneMarking::LaneChange>(shared);
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$LaneChange$upgrade(::std::weak_ptr<::carla::road::element::LaneMarking::LaneChange> const &weak, ::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::road::element::LaneMarking::LaneChange>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$LaneChange$drop(::std::weak_ptr<::carla::road::element::LaneMarking::LaneChange> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::road::element::LaneMarking::LaneChange> *cxxbridge1$std$vector$carla$road$element$LaneMarking$LaneChange$new() noexcept {
  return new ::std::vector<::carla::road::element::LaneMarking::LaneChange>();
}
::std::size_t cxxbridge1$std$vector$carla$road$element$LaneMarking$LaneChange$size(::std::vector<::carla::road::element::LaneMarking::LaneChange> const &s) noexcept {
  return s.size();
}
::carla::road::element::LaneMarking::LaneChange *cxxbridge1$std$vector$carla$road$element$LaneMarking$LaneChange$get_unchecked(::std::vector<::carla::road::element::LaneMarking::LaneChange> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$road$element$LaneMarking$LaneChange$push_back(::std::vector<::carla::road::element::LaneMarking::LaneChange> *v, ::carla::road::element::LaneMarking::LaneChange *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$road$element$LaneMarking$LaneChange$pop_back(::std::vector<::carla::road::element::LaneMarking::LaneChange> *v, ::carla::road::element::LaneMarking::LaneChange *out) noexcept {
  ::new (out) ::carla::road::element::LaneMarking::LaneChange(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::road::element::LaneMarking::LaneChange>>::value, "definition of `::std::vector<::carla::road::element::LaneMarking::LaneChange>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::LaneChange>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::LaneChange>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$LaneChange$null(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::LaneChange>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::LaneChange>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$LaneChange$raw(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::LaneChange>> *ptr, ::std::vector<::carla::road::element::LaneMarking::LaneChange> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::LaneChange>>(raw);
}
::std::vector<::carla::road::element::LaneMarking::LaneChange> const *cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$LaneChange$get(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::LaneChange>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::road::element::LaneMarking::LaneChange> *cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$LaneChange$release(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::LaneChange>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$LaneChange$drop(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking::LaneChange>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::road::element::LaneMarking::LaneChange>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::traffic_manager::RoadOption>::value, "definition of `::carla::traffic_manager::RoadOption` is required");
static_assert(sizeof(::std::unique_ptr<::carla::traffic_manager::RoadOption>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::traffic_manager::RoadOption>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$traffic_manager$RoadOption$null(::std::unique_ptr<::carla::traffic_manager::RoadOption> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::traffic_manager::RoadOption>();
}
::carla::traffic_manager::RoadOption *cxxbridge1$unique_ptr$carla$traffic_manager$RoadOption$uninit(::std::unique_ptr<::carla::traffic_manager::RoadOption> *ptr) noexcept {
  ::carla::traffic_manager::RoadOption *uninit = reinterpret_cast<::carla::traffic_manager::RoadOption *>(new ::rust::MaybeUninit<::carla::traffic_manager::RoadOption>);
  ::new (ptr) ::std::unique_ptr<::carla::traffic_manager::RoadOption>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$traffic_manager$RoadOption$raw(::std::unique_ptr<::carla::traffic_manager::RoadOption> *ptr, ::carla::traffic_manager::RoadOption *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::traffic_manager::RoadOption>(raw);
}
::carla::traffic_manager::RoadOption const *cxxbridge1$unique_ptr$carla$traffic_manager$RoadOption$get(::std::unique_ptr<::carla::traffic_manager::RoadOption> const &ptr) noexcept {
  return ptr.get();
}
::carla::traffic_manager::RoadOption *cxxbridge1$unique_ptr$carla$traffic_manager$RoadOption$release(::std::unique_ptr<::carla::traffic_manager::RoadOption> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$traffic_manager$RoadOption$drop(::std::unique_ptr<::carla::traffic_manager::RoadOption> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::traffic_manager::RoadOption>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::traffic_manager::RoadOption>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::traffic_manager::RoadOption>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$traffic_manager$RoadOption$null(::std::shared_ptr<::carla::traffic_manager::RoadOption> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::traffic_manager::RoadOption>();
}
::carla::traffic_manager::RoadOption *cxxbridge1$shared_ptr$carla$traffic_manager$RoadOption$uninit(::std::shared_ptr<::carla::traffic_manager::RoadOption> *ptr) noexcept {
  ::carla::traffic_manager::RoadOption *uninit = reinterpret_cast<::carla::traffic_manager::RoadOption *>(new ::rust::MaybeUninit<::carla::traffic_manager::RoadOption>);
  ::new (ptr) ::std::shared_ptr<::carla::traffic_manager::RoadOption>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$traffic_manager$RoadOption$clone(::std::shared_ptr<::carla::traffic_manager::RoadOption> const &self, ::std::shared_ptr<::carla::traffic_manager::RoadOption> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::traffic_manager::RoadOption>(self);
}
::carla::traffic_manager::RoadOption const *cxxbridge1$shared_ptr$carla$traffic_manager$RoadOption$get(::std::shared_ptr<::carla::traffic_manager::RoadOption> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$traffic_manager$RoadOption$drop(::std::shared_ptr<::carla::traffic_manager::RoadOption> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::traffic_manager::RoadOption>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::traffic_manager::RoadOption>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$traffic_manager$RoadOption$null(::std::weak_ptr<::carla::traffic_manager::RoadOption> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::traffic_manager::RoadOption>();
}
void cxxbridge1$weak_ptr$carla$traffic_manager$RoadOption$clone(::std::weak_ptr<::carla::traffic_manager::RoadOption> const &self, ::std::weak_ptr<::carla::traffic_manager::RoadOption> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::traffic_manager::RoadOption>(self);
}
void cxxbridge1$weak_ptr$carla$traffic_manager$RoadOption$downgrade(::std::shared_ptr<::carla::traffic_manager::RoadOption> const &shared, ::std::weak_ptr<::carla::traffic_manager::RoadOption> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::traffic_manager::RoadOption>(shared);
}
void cxxbridge1$weak_ptr$carla$traffic_manager$RoadOption$upgrade(::std::weak_ptr<::carla::traffic_manager::RoadOption> const &weak, ::std::shared_ptr<::carla::traffic_manager::RoadOption> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::traffic_manager::RoadOption>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$traffic_manager$RoadOption$drop(::std::weak_ptr<::carla::traffic_manager::RoadOption> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::traffic_manager::RoadOption> *cxxbridge1$std$vector$carla$traffic_manager$RoadOption$new() noexcept {
  return new ::std::vector<::carla::traffic_manager::RoadOption>();
}
::std::size_t cxxbridge1$std$vector$carla$traffic_manager$RoadOption$size(::std::vector<::carla::traffic_manager::RoadOption> const &s) noexcept {
  return s.size();
}
::carla::traffic_manager::RoadOption *cxxbridge1$std$vector$carla$traffic_manager$RoadOption$get_unchecked(::std::vector<::carla::traffic_manager::RoadOption> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$traffic_manager$RoadOption$push_back(::std::vector<::carla::traffic_manager::RoadOption> *v, ::carla::traffic_manager::RoadOption *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$traffic_manager$RoadOption$pop_back(::std::vector<::carla::traffic_manager::RoadOption> *v, ::carla::traffic_manager::RoadOption *out) noexcept {
  ::new (out) ::carla::traffic_manager::RoadOption(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::traffic_manager::RoadOption>>::value, "definition of `::std::vector<::carla::traffic_manager::RoadOption>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::traffic_manager::RoadOption>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::traffic_manager::RoadOption>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$traffic_manager$RoadOption$null(::std::unique_ptr<::std::vector<::carla::traffic_manager::RoadOption>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::traffic_manager::RoadOption>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$traffic_manager$RoadOption$raw(::std::unique_ptr<::std::vector<::carla::traffic_manager::RoadOption>> *ptr, ::std::vector<::carla::traffic_manager::RoadOption> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::traffic_manager::RoadOption>>(raw);
}
::std::vector<::carla::traffic_manager::RoadOption> const *cxxbridge1$unique_ptr$std$vector$carla$traffic_manager$RoadOption$get(::std::unique_ptr<::std::vector<::carla::traffic_manager::RoadOption>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::traffic_manager::RoadOption> *cxxbridge1$unique_ptr$std$vector$carla$traffic_manager$RoadOption$release(::std::unique_ptr<::std::vector<::carla::traffic_manager::RoadOption>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$traffic_manager$RoadOption$drop(::std::unique_ptr<::std::vector<::carla::traffic_manager::RoadOption>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::traffic_manager::RoadOption>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::geom::FfiLocation>::value, "definition of `::carla_rust::geom::FfiLocation` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::geom::FfiLocation>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::geom::FfiLocation>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$geom$FfiLocation$null(::std::unique_ptr<::carla_rust::geom::FfiLocation> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::geom::FfiLocation>();
}
::carla_rust::geom::FfiLocation *cxxbridge1$unique_ptr$carla_rust$geom$FfiLocation$uninit(::std::unique_ptr<::carla_rust::geom::FfiLocation> *ptr) noexcept {
  ::carla_rust::geom::FfiLocation *uninit = reinterpret_cast<::carla_rust::geom::FfiLocation *>(new ::rust::MaybeUninit<::carla_rust::geom::FfiLocation>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::geom::FfiLocation>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$geom$FfiLocation$raw(::std::unique_ptr<::carla_rust::geom::FfiLocation> *ptr, ::carla_rust::geom::FfiLocation *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::geom::FfiLocation>(raw);
}
::carla_rust::geom::FfiLocation const *cxxbridge1$unique_ptr$carla_rust$geom$FfiLocation$get(::std::unique_ptr<::carla_rust::geom::FfiLocation> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::geom::FfiLocation *cxxbridge1$unique_ptr$carla_rust$geom$FfiLocation$release(::std::unique_ptr<::carla_rust::geom::FfiLocation> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$geom$FfiLocation$drop(::std::unique_ptr<::carla_rust::geom::FfiLocation> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::geom::FfiLocation>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::geom::FfiLocation>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::geom::FfiLocation>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$geom$FfiLocation$null(::std::shared_ptr<::carla_rust::geom::FfiLocation> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::geom::FfiLocation>();
}
::carla_rust::geom::FfiLocation *cxxbridge1$shared_ptr$carla_rust$geom$FfiLocation$uninit(::std::shared_ptr<::carla_rust::geom::FfiLocation> *ptr) noexcept {
  ::carla_rust::geom::FfiLocation *uninit = reinterpret_cast<::carla_rust::geom::FfiLocation *>(new ::rust::MaybeUninit<::carla_rust::geom::FfiLocation>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::geom::FfiLocation>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$geom$FfiLocation$clone(::std::shared_ptr<::carla_rust::geom::FfiLocation> const &self, ::std::shared_ptr<::carla_rust::geom::FfiLocation> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::geom::FfiLocation>(self);
}
::carla_rust::geom::FfiLocation const *cxxbridge1$shared_ptr$carla_rust$geom$FfiLocation$get(::std::shared_ptr<::carla_rust::geom::FfiLocation> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$geom$FfiLocation$drop(::std::shared_ptr<::carla_rust::geom::FfiLocation> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::geom::FfiLocation>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::geom::FfiLocation>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$geom$FfiLocation$null(::std::weak_ptr<::carla_rust::geom::FfiLocation> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::geom::FfiLocation>();
}
void cxxbridge1$weak_ptr$carla_rust$geom$FfiLocation$clone(::std::weak_ptr<::carla_rust::geom::FfiLocation> const &self, ::std::weak_ptr<::carla_rust::geom::FfiLocation> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::geom::FfiLocation>(self);
}
void cxxbridge1$weak_ptr$carla_rust$geom$FfiLocation$downgrade(::std::shared_ptr<::carla_rust::geom::FfiLocation> const &shared, ::std::weak_ptr<::carla_rust::geom::FfiLocation> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::geom::FfiLocation>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$geom$FfiLocation$upgrade(::std::weak_ptr<::carla_rust::geom::FfiLocation> const &weak, ::std::shared_ptr<::carla_rust::geom::FfiLocation> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::geom::FfiLocation>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$geom$FfiLocation$drop(::std::weak_ptr<::carla_rust::geom::FfiLocation> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::geom::FfiLocation> *cxxbridge1$std$vector$carla_rust$geom$FfiLocation$new() noexcept {
  return new ::std::vector<::carla_rust::geom::FfiLocation>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$geom$FfiLocation$size(::std::vector<::carla_rust::geom::FfiLocation> const &s) noexcept {
  return s.size();
}
::carla_rust::geom::FfiLocation *cxxbridge1$std$vector$carla_rust$geom$FfiLocation$get_unchecked(::std::vector<::carla_rust::geom::FfiLocation> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$geom$FfiLocation$push_back(::std::vector<::carla_rust::geom::FfiLocation> *v, ::carla_rust::geom::FfiLocation *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$geom$FfiLocation$pop_back(::std::vector<::carla_rust::geom::FfiLocation> *v, ::carla_rust::geom::FfiLocation *out) noexcept {
  ::new (out) ::carla_rust::geom::FfiLocation(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::geom::FfiLocation>>::value, "definition of `::std::vector<::carla_rust::geom::FfiLocation>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiLocation>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiLocation>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiLocation$null(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiLocation>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::geom::FfiLocation>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiLocation$raw(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiLocation>> *ptr, ::std::vector<::carla_rust::geom::FfiLocation> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::geom::FfiLocation>>(raw);
}
::std::vector<::carla_rust::geom::FfiLocation> const *cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiLocation$get(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiLocation>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::geom::FfiLocation> *cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiLocation$release(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiLocation>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiLocation$drop(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiLocation>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::geom::FfiLocation>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::geom::FfiTransform>::value, "definition of `::carla_rust::geom::FfiTransform` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::geom::FfiTransform>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::geom::FfiTransform>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$geom$FfiTransform$null(::std::unique_ptr<::carla_rust::geom::FfiTransform> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::geom::FfiTransform>();
}
::carla_rust::geom::FfiTransform *cxxbridge1$unique_ptr$carla_rust$geom$FfiTransform$uninit(::std::unique_ptr<::carla_rust::geom::FfiTransform> *ptr) noexcept {
  ::carla_rust::geom::FfiTransform *uninit = reinterpret_cast<::carla_rust::geom::FfiTransform *>(new ::rust::MaybeUninit<::carla_rust::geom::FfiTransform>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::geom::FfiTransform>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$geom$FfiTransform$raw(::std::unique_ptr<::carla_rust::geom::FfiTransform> *ptr, ::carla_rust::geom::FfiTransform *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::geom::FfiTransform>(raw);
}
::carla_rust::geom::FfiTransform const *cxxbridge1$unique_ptr$carla_rust$geom$FfiTransform$get(::std::unique_ptr<::carla_rust::geom::FfiTransform> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::geom::FfiTransform *cxxbridge1$unique_ptr$carla_rust$geom$FfiTransform$release(::std::unique_ptr<::carla_rust::geom::FfiTransform> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$geom$FfiTransform$drop(::std::unique_ptr<::carla_rust::geom::FfiTransform> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::geom::FfiTransform>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::geom::FfiTransform>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::geom::FfiTransform>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$geom$FfiTransform$null(::std::shared_ptr<::carla_rust::geom::FfiTransform> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::geom::FfiTransform>();
}
::carla_rust::geom::FfiTransform *cxxbridge1$shared_ptr$carla_rust$geom$FfiTransform$uninit(::std::shared_ptr<::carla_rust::geom::FfiTransform> *ptr) noexcept {
  ::carla_rust::geom::FfiTransform *uninit = reinterpret_cast<::carla_rust::geom::FfiTransform *>(new ::rust::MaybeUninit<::carla_rust::geom::FfiTransform>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::geom::FfiTransform>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$geom$FfiTransform$clone(::std::shared_ptr<::carla_rust::geom::FfiTransform> const &self, ::std::shared_ptr<::carla_rust::geom::FfiTransform> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::geom::FfiTransform>(self);
}
::carla_rust::geom::FfiTransform const *cxxbridge1$shared_ptr$carla_rust$geom$FfiTransform$get(::std::shared_ptr<::carla_rust::geom::FfiTransform> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$geom$FfiTransform$drop(::std::shared_ptr<::carla_rust::geom::FfiTransform> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::geom::FfiTransform>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::geom::FfiTransform>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$geom$FfiTransform$null(::std::weak_ptr<::carla_rust::geom::FfiTransform> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::geom::FfiTransform>();
}
void cxxbridge1$weak_ptr$carla_rust$geom$FfiTransform$clone(::std::weak_ptr<::carla_rust::geom::FfiTransform> const &self, ::std::weak_ptr<::carla_rust::geom::FfiTransform> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::geom::FfiTransform>(self);
}
void cxxbridge1$weak_ptr$carla_rust$geom$FfiTransform$downgrade(::std::shared_ptr<::carla_rust::geom::FfiTransform> const &shared, ::std::weak_ptr<::carla_rust::geom::FfiTransform> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::geom::FfiTransform>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$geom$FfiTransform$upgrade(::std::weak_ptr<::carla_rust::geom::FfiTransform> const &weak, ::std::shared_ptr<::carla_rust::geom::FfiTransform> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::geom::FfiTransform>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$geom$FfiTransform$drop(::std::weak_ptr<::carla_rust::geom::FfiTransform> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::geom::FfiTransform> *cxxbridge1$std$vector$carla_rust$geom$FfiTransform$new() noexcept {
  return new ::std::vector<::carla_rust::geom::FfiTransform>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$geom$FfiTransform$size(::std::vector<::carla_rust::geom::FfiTransform> const &s) noexcept {
  return s.size();
}
::carla_rust::geom::FfiTransform *cxxbridge1$std$vector$carla_rust$geom$FfiTransform$get_unchecked(::std::vector<::carla_rust::geom::FfiTransform> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$geom$FfiTransform$push_back(::std::vector<::carla_rust::geom::FfiTransform> *v, ::carla_rust::geom::FfiTransform *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$geom$FfiTransform$pop_back(::std::vector<::carla_rust::geom::FfiTransform> *v, ::carla_rust::geom::FfiTransform *out) noexcept {
  ::new (out) ::carla_rust::geom::FfiTransform(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::geom::FfiTransform>>::value, "definition of `::std::vector<::carla_rust::geom::FfiTransform>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiTransform>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiTransform>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiTransform$null(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiTransform>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::geom::FfiTransform>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiTransform$raw(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiTransform>> *ptr, ::std::vector<::carla_rust::geom::FfiTransform> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::geom::FfiTransform>>(raw);
}
::std::vector<::carla_rust::geom::FfiTransform> const *cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiTransform$get(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiTransform>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::geom::FfiTransform> *cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiTransform$release(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiTransform>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiTransform$drop(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiTransform>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::geom::FfiTransform>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::geom::FfiBoundingBox>::value, "definition of `::carla_rust::geom::FfiBoundingBox` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::geom::FfiBoundingBox>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::geom::FfiBoundingBox>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$geom$FfiBoundingBox$null(::std::unique_ptr<::carla_rust::geom::FfiBoundingBox> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::geom::FfiBoundingBox>();
}
::carla_rust::geom::FfiBoundingBox *cxxbridge1$unique_ptr$carla_rust$geom$FfiBoundingBox$uninit(::std::unique_ptr<::carla_rust::geom::FfiBoundingBox> *ptr) noexcept {
  ::carla_rust::geom::FfiBoundingBox *uninit = reinterpret_cast<::carla_rust::geom::FfiBoundingBox *>(new ::rust::MaybeUninit<::carla_rust::geom::FfiBoundingBox>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::geom::FfiBoundingBox>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$geom$FfiBoundingBox$raw(::std::unique_ptr<::carla_rust::geom::FfiBoundingBox> *ptr, ::carla_rust::geom::FfiBoundingBox *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::geom::FfiBoundingBox>(raw);
}
::carla_rust::geom::FfiBoundingBox const *cxxbridge1$unique_ptr$carla_rust$geom$FfiBoundingBox$get(::std::unique_ptr<::carla_rust::geom::FfiBoundingBox> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::geom::FfiBoundingBox *cxxbridge1$unique_ptr$carla_rust$geom$FfiBoundingBox$release(::std::unique_ptr<::carla_rust::geom::FfiBoundingBox> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$geom$FfiBoundingBox$drop(::std::unique_ptr<::carla_rust::geom::FfiBoundingBox> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::geom::FfiBoundingBox>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::geom::FfiBoundingBox>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::geom::FfiBoundingBox>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$geom$FfiBoundingBox$null(::std::shared_ptr<::carla_rust::geom::FfiBoundingBox> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::geom::FfiBoundingBox>();
}
::carla_rust::geom::FfiBoundingBox *cxxbridge1$shared_ptr$carla_rust$geom$FfiBoundingBox$uninit(::std::shared_ptr<::carla_rust::geom::FfiBoundingBox> *ptr) noexcept {
  ::carla_rust::geom::FfiBoundingBox *uninit = reinterpret_cast<::carla_rust::geom::FfiBoundingBox *>(new ::rust::MaybeUninit<::carla_rust::geom::FfiBoundingBox>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::geom::FfiBoundingBox>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$geom$FfiBoundingBox$clone(::std::shared_ptr<::carla_rust::geom::FfiBoundingBox> const &self, ::std::shared_ptr<::carla_rust::geom::FfiBoundingBox> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::geom::FfiBoundingBox>(self);
}
::carla_rust::geom::FfiBoundingBox const *cxxbridge1$shared_ptr$carla_rust$geom$FfiBoundingBox$get(::std::shared_ptr<::carla_rust::geom::FfiBoundingBox> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$geom$FfiBoundingBox$drop(::std::shared_ptr<::carla_rust::geom::FfiBoundingBox> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::geom::FfiBoundingBox>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::geom::FfiBoundingBox>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$geom$FfiBoundingBox$null(::std::weak_ptr<::carla_rust::geom::FfiBoundingBox> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::geom::FfiBoundingBox>();
}
void cxxbridge1$weak_ptr$carla_rust$geom$FfiBoundingBox$clone(::std::weak_ptr<::carla_rust::geom::FfiBoundingBox> const &self, ::std::weak_ptr<::carla_rust::geom::FfiBoundingBox> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::geom::FfiBoundingBox>(self);
}
void cxxbridge1$weak_ptr$carla_rust$geom$FfiBoundingBox$downgrade(::std::shared_ptr<::carla_rust::geom::FfiBoundingBox> const &shared, ::std::weak_ptr<::carla_rust::geom::FfiBoundingBox> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::geom::FfiBoundingBox>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$geom$FfiBoundingBox$upgrade(::std::weak_ptr<::carla_rust::geom::FfiBoundingBox> const &weak, ::std::shared_ptr<::carla_rust::geom::FfiBoundingBox> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::geom::FfiBoundingBox>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$geom$FfiBoundingBox$drop(::std::weak_ptr<::carla_rust::geom::FfiBoundingBox> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::geom::FfiBoundingBox> *cxxbridge1$std$vector$carla_rust$geom$FfiBoundingBox$new() noexcept {
  return new ::std::vector<::carla_rust::geom::FfiBoundingBox>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$geom$FfiBoundingBox$size(::std::vector<::carla_rust::geom::FfiBoundingBox> const &s) noexcept {
  return s.size();
}
::carla_rust::geom::FfiBoundingBox *cxxbridge1$std$vector$carla_rust$geom$FfiBoundingBox$get_unchecked(::std::vector<::carla_rust::geom::FfiBoundingBox> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$geom$FfiBoundingBox$push_back(::std::vector<::carla_rust::geom::FfiBoundingBox> *v, ::carla_rust::geom::FfiBoundingBox *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$geom$FfiBoundingBox$pop_back(::std::vector<::carla_rust::geom::FfiBoundingBox> *v, ::carla_rust::geom::FfiBoundingBox *out) noexcept {
  ::new (out) ::carla_rust::geom::FfiBoundingBox(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::geom::FfiBoundingBox>>::value, "definition of `::std::vector<::carla_rust::geom::FfiBoundingBox>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiBoundingBox>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiBoundingBox>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiBoundingBox$null(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiBoundingBox>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::geom::FfiBoundingBox>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiBoundingBox$raw(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiBoundingBox>> *ptr, ::std::vector<::carla_rust::geom::FfiBoundingBox> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::geom::FfiBoundingBox>>(raw);
}
::std::vector<::carla_rust::geom::FfiBoundingBox> const *cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiBoundingBox$get(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiBoundingBox>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::geom::FfiBoundingBox> *cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiBoundingBox$release(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiBoundingBox>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$geom$FfiBoundingBox$drop(::std::unique_ptr<::std::vector<::carla_rust::geom::FfiBoundingBox>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::geom::FfiBoundingBox>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::rpc::FfiVehiclePhysicsControl>::value, "definition of `::carla_rust::rpc::FfiVehiclePhysicsControl` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$null(::std::unique_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>();
}
::carla_rust::rpc::FfiVehiclePhysicsControl *cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$uninit(::std::unique_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> *ptr) noexcept {
  ::carla_rust::rpc::FfiVehiclePhysicsControl *uninit = reinterpret_cast<::carla_rust::rpc::FfiVehiclePhysicsControl *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiVehiclePhysicsControl>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$raw(::std::unique_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> *ptr, ::carla_rust::rpc::FfiVehiclePhysicsControl *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>(raw);
}
::carla_rust::rpc::FfiVehiclePhysicsControl const *cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$get(::std::unique_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::rpc::FfiVehiclePhysicsControl *cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$release(::std::unique_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$drop(::std::unique_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::rpc::FfiVehiclePhysicsControl>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$null(::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>();
}
::carla_rust::rpc::FfiVehiclePhysicsControl *cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$uninit(::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> *ptr) noexcept {
  ::carla_rust::rpc::FfiVehiclePhysicsControl *uninit = reinterpret_cast<::carla_rust::rpc::FfiVehiclePhysicsControl *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiVehiclePhysicsControl>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$clone(::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> const &self, ::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>(self);
}
::carla_rust::rpc::FfiVehiclePhysicsControl const *cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$get(::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$drop(::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$null(::std::weak_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>();
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$clone(::std::weak_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> const &self, ::std::weak_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>(self);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$downgrade(::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> const &shared, ::std::weak_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$upgrade(::std::weak_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> const &weak, ::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehiclePhysicsControl$drop(::std::weak_ptr<::carla_rust::rpc::FfiVehiclePhysicsControl> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl> *cxxbridge1$std$vector$carla_rust$rpc$FfiVehiclePhysicsControl$new() noexcept {
  return new ::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$rpc$FfiVehiclePhysicsControl$size(::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl> const &s) noexcept {
  return s.size();
}
::carla_rust::rpc::FfiVehiclePhysicsControl *cxxbridge1$std$vector$carla_rust$rpc$FfiVehiclePhysicsControl$get_unchecked(::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiVehiclePhysicsControl$push_back(::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl> *v, ::carla_rust::rpc::FfiVehiclePhysicsControl *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiVehiclePhysicsControl$pop_back(::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl> *v, ::carla_rust::rpc::FfiVehiclePhysicsControl *out) noexcept {
  ::new (out) ::carla_rust::rpc::FfiVehiclePhysicsControl(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl>>::value, "definition of `::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehiclePhysicsControl$null(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehiclePhysicsControl$raw(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl>> *ptr, ::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl>>(raw);
}
::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl> const *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehiclePhysicsControl$get(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl> *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehiclePhysicsControl$release(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehiclePhysicsControl$drop(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiVehiclePhysicsControl>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::rpc::FfiEpisodeSettings>::value, "definition of `::carla_rust::rpc::FfiEpisodeSettings` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::rpc::FfiEpisodeSettings>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::rpc::FfiEpisodeSettings>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiEpisodeSettings$null(::std::unique_ptr<::carla_rust::rpc::FfiEpisodeSettings> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiEpisodeSettings>();
}
::carla_rust::rpc::FfiEpisodeSettings *cxxbridge1$unique_ptr$carla_rust$rpc$FfiEpisodeSettings$uninit(::std::unique_ptr<::carla_rust::rpc::FfiEpisodeSettings> *ptr) noexcept {
  ::carla_rust::rpc::FfiEpisodeSettings *uninit = reinterpret_cast<::carla_rust::rpc::FfiEpisodeSettings *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiEpisodeSettings>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiEpisodeSettings>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiEpisodeSettings$raw(::std::unique_ptr<::carla_rust::rpc::FfiEpisodeSettings> *ptr, ::carla_rust::rpc::FfiEpisodeSettings *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiEpisodeSettings>(raw);
}
::carla_rust::rpc::FfiEpisodeSettings const *cxxbridge1$unique_ptr$carla_rust$rpc$FfiEpisodeSettings$get(::std::unique_ptr<::carla_rust::rpc::FfiEpisodeSettings> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::rpc::FfiEpisodeSettings *cxxbridge1$unique_ptr$carla_rust$rpc$FfiEpisodeSettings$release(::std::unique_ptr<::carla_rust::rpc::FfiEpisodeSettings> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiEpisodeSettings$drop(::std::unique_ptr<::carla_rust::rpc::FfiEpisodeSettings> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::rpc::FfiEpisodeSettings>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiEpisodeSettings$null(::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings>();
}
::carla_rust::rpc::FfiEpisodeSettings *cxxbridge1$shared_ptr$carla_rust$rpc$FfiEpisodeSettings$uninit(::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings> *ptr) noexcept {
  ::carla_rust::rpc::FfiEpisodeSettings *uninit = reinterpret_cast<::carla_rust::rpc::FfiEpisodeSettings *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiEpisodeSettings>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiEpisodeSettings$clone(::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings> const &self, ::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings>(self);
}
::carla_rust::rpc::FfiEpisodeSettings const *cxxbridge1$shared_ptr$carla_rust$rpc$FfiEpisodeSettings$get(::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiEpisodeSettings$drop(::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::rpc::FfiEpisodeSettings>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::rpc::FfiEpisodeSettings>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiEpisodeSettings$null(::std::weak_ptr<::carla_rust::rpc::FfiEpisodeSettings> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiEpisodeSettings>();
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiEpisodeSettings$clone(::std::weak_ptr<::carla_rust::rpc::FfiEpisodeSettings> const &self, ::std::weak_ptr<::carla_rust::rpc::FfiEpisodeSettings> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiEpisodeSettings>(self);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiEpisodeSettings$downgrade(::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings> const &shared, ::std::weak_ptr<::carla_rust::rpc::FfiEpisodeSettings> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::rpc::FfiEpisodeSettings>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiEpisodeSettings$upgrade(::std::weak_ptr<::carla_rust::rpc::FfiEpisodeSettings> const &weak, ::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::rpc::FfiEpisodeSettings>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiEpisodeSettings$drop(::std::weak_ptr<::carla_rust::rpc::FfiEpisodeSettings> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::rpc::FfiEpisodeSettings> *cxxbridge1$std$vector$carla_rust$rpc$FfiEpisodeSettings$new() noexcept {
  return new ::std::vector<::carla_rust::rpc::FfiEpisodeSettings>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$rpc$FfiEpisodeSettings$size(::std::vector<::carla_rust::rpc::FfiEpisodeSettings> const &s) noexcept {
  return s.size();
}
::carla_rust::rpc::FfiEpisodeSettings *cxxbridge1$std$vector$carla_rust$rpc$FfiEpisodeSettings$get_unchecked(::std::vector<::carla_rust::rpc::FfiEpisodeSettings> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiEpisodeSettings$push_back(::std::vector<::carla_rust::rpc::FfiEpisodeSettings> *v, ::carla_rust::rpc::FfiEpisodeSettings *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiEpisodeSettings$pop_back(::std::vector<::carla_rust::rpc::FfiEpisodeSettings> *v, ::carla_rust::rpc::FfiEpisodeSettings *out) noexcept {
  ::new (out) ::carla_rust::rpc::FfiEpisodeSettings(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiEpisodeSettings>>::value, "definition of `::std::vector<::carla_rust::rpc::FfiEpisodeSettings>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEpisodeSettings>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEpisodeSettings>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiEpisodeSettings$null(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEpisodeSettings>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEpisodeSettings>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiEpisodeSettings$raw(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEpisodeSettings>> *ptr, ::std::vector<::carla_rust::rpc::FfiEpisodeSettings> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEpisodeSettings>>(raw);
}
::std::vector<::carla_rust::rpc::FfiEpisodeSettings> const *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiEpisodeSettings$get(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEpisodeSettings>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::rpc::FfiEpisodeSettings> *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiEpisodeSettings$release(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEpisodeSettings>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiEpisodeSettings$drop(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEpisodeSettings>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiEpisodeSettings>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::rpc::FfiLabelledPoint>::value, "definition of `::carla_rust::rpc::FfiLabelledPoint` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::rpc::FfiLabelledPoint>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::rpc::FfiLabelledPoint>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiLabelledPoint$null(::std::unique_ptr<::carla_rust::rpc::FfiLabelledPoint> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiLabelledPoint>();
}
::carla_rust::rpc::FfiLabelledPoint *cxxbridge1$unique_ptr$carla_rust$rpc$FfiLabelledPoint$uninit(::std::unique_ptr<::carla_rust::rpc::FfiLabelledPoint> *ptr) noexcept {
  ::carla_rust::rpc::FfiLabelledPoint *uninit = reinterpret_cast<::carla_rust::rpc::FfiLabelledPoint *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiLabelledPoint>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiLabelledPoint>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiLabelledPoint$raw(::std::unique_ptr<::carla_rust::rpc::FfiLabelledPoint> *ptr, ::carla_rust::rpc::FfiLabelledPoint *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiLabelledPoint>(raw);
}
::carla_rust::rpc::FfiLabelledPoint const *cxxbridge1$unique_ptr$carla_rust$rpc$FfiLabelledPoint$get(::std::unique_ptr<::carla_rust::rpc::FfiLabelledPoint> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::rpc::FfiLabelledPoint *cxxbridge1$unique_ptr$carla_rust$rpc$FfiLabelledPoint$release(::std::unique_ptr<::carla_rust::rpc::FfiLabelledPoint> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiLabelledPoint$drop(::std::unique_ptr<::carla_rust::rpc::FfiLabelledPoint> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::rpc::FfiLabelledPoint>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiLabelledPoint$null(::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint>();
}
::carla_rust::rpc::FfiLabelledPoint *cxxbridge1$shared_ptr$carla_rust$rpc$FfiLabelledPoint$uninit(::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint> *ptr) noexcept {
  ::carla_rust::rpc::FfiLabelledPoint *uninit = reinterpret_cast<::carla_rust::rpc::FfiLabelledPoint *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiLabelledPoint>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiLabelledPoint$clone(::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint> const &self, ::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint>(self);
}
::carla_rust::rpc::FfiLabelledPoint const *cxxbridge1$shared_ptr$carla_rust$rpc$FfiLabelledPoint$get(::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiLabelledPoint$drop(::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::rpc::FfiLabelledPoint>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::rpc::FfiLabelledPoint>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiLabelledPoint$null(::std::weak_ptr<::carla_rust::rpc::FfiLabelledPoint> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiLabelledPoint>();
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiLabelledPoint$clone(::std::weak_ptr<::carla_rust::rpc::FfiLabelledPoint> const &self, ::std::weak_ptr<::carla_rust::rpc::FfiLabelledPoint> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiLabelledPoint>(self);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiLabelledPoint$downgrade(::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint> const &shared, ::std::weak_ptr<::carla_rust::rpc::FfiLabelledPoint> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::rpc::FfiLabelledPoint>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiLabelledPoint$upgrade(::std::weak_ptr<::carla_rust::rpc::FfiLabelledPoint> const &weak, ::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::rpc::FfiLabelledPoint>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiLabelledPoint$drop(::std::weak_ptr<::carla_rust::rpc::FfiLabelledPoint> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::rpc::FfiLabelledPoint> *cxxbridge1$std$vector$carla_rust$rpc$FfiLabelledPoint$new() noexcept {
  return new ::std::vector<::carla_rust::rpc::FfiLabelledPoint>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$rpc$FfiLabelledPoint$size(::std::vector<::carla_rust::rpc::FfiLabelledPoint> const &s) noexcept {
  return s.size();
}
::carla_rust::rpc::FfiLabelledPoint *cxxbridge1$std$vector$carla_rust$rpc$FfiLabelledPoint$get_unchecked(::std::vector<::carla_rust::rpc::FfiLabelledPoint> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiLabelledPoint$push_back(::std::vector<::carla_rust::rpc::FfiLabelledPoint> *v, ::carla_rust::rpc::FfiLabelledPoint *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiLabelledPoint$pop_back(::std::vector<::carla_rust::rpc::FfiLabelledPoint> *v, ::carla_rust::rpc::FfiLabelledPoint *out) noexcept {
  ::new (out) ::carla_rust::rpc::FfiLabelledPoint(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiLabelledPoint>>::value, "definition of `::std::vector<::carla_rust::rpc::FfiLabelledPoint>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiLabelledPoint>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiLabelledPoint>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiLabelledPoint$null(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiLabelledPoint>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiLabelledPoint>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiLabelledPoint$raw(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiLabelledPoint>> *ptr, ::std::vector<::carla_rust::rpc::FfiLabelledPoint> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiLabelledPoint>>(raw);
}
::std::vector<::carla_rust::rpc::FfiLabelledPoint> const *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiLabelledPoint$get(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiLabelledPoint>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::rpc::FfiLabelledPoint> *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiLabelledPoint$release(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiLabelledPoint>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiLabelledPoint$drop(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiLabelledPoint>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiLabelledPoint>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::rpc::FfiVehicleLightStateElementRef>::value, "definition of `::carla_rust::rpc::FfiVehicleLightStateElementRef` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$null(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>();
}
::carla_rust::rpc::FfiVehicleLightStateElementRef *cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$uninit(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> *ptr) noexcept {
  ::carla_rust::rpc::FfiVehicleLightStateElementRef *uninit = reinterpret_cast<::carla_rust::rpc::FfiVehicleLightStateElementRef *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiVehicleLightStateElementRef>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$raw(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> *ptr, ::carla_rust::rpc::FfiVehicleLightStateElementRef *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>(raw);
}
::carla_rust::rpc::FfiVehicleLightStateElementRef const *cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$get(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::rpc::FfiVehicleLightStateElementRef *cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$release(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$drop(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::rpc::FfiVehicleLightStateElementRef>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$null(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>();
}
::carla_rust::rpc::FfiVehicleLightStateElementRef *cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$uninit(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> *ptr) noexcept {
  ::carla_rust::rpc::FfiVehicleLightStateElementRef *uninit = reinterpret_cast<::carla_rust::rpc::FfiVehicleLightStateElementRef *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiVehicleLightStateElementRef>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$clone(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> const &self, ::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>(self);
}
::carla_rust::rpc::FfiVehicleLightStateElementRef const *cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$get(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$drop(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$null(::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>();
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$clone(::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> const &self, ::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>(self);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$downgrade(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> const &shared, ::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$upgrade(::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> const &weak, ::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehicleLightStateElementRef$drop(::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateElementRef> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef> *cxxbridge1$std$vector$carla_rust$rpc$FfiVehicleLightStateElementRef$new() noexcept {
  return new ::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$rpc$FfiVehicleLightStateElementRef$size(::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef> const &s) noexcept {
  return s.size();
}
::carla_rust::rpc::FfiVehicleLightStateElementRef *cxxbridge1$std$vector$carla_rust$rpc$FfiVehicleLightStateElementRef$get_unchecked(::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiVehicleLightStateElementRef$push_back(::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef> *v, ::carla_rust::rpc::FfiVehicleLightStateElementRef *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiVehicleLightStateElementRef$pop_back(::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef> *v, ::carla_rust::rpc::FfiVehicleLightStateElementRef *out) noexcept {
  ::new (out) ::carla_rust::rpc::FfiVehicleLightStateElementRef(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef>>::value, "definition of `::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehicleLightStateElementRef$null(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehicleLightStateElementRef$raw(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef>> *ptr, ::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef>>(raw);
}
::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef> const *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehicleLightStateElementRef$get(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef> *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehicleLightStateElementRef$release(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehicleLightStateElementRef$drop(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiVehicleLightStateElementRef>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::rpc::FfiVehicleLightStateList>::value, "definition of `::carla_rust::rpc::FfiVehicleLightStateList` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateList>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateList>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehicleLightStateList$null(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateList> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateList>();
}
::carla_rust::rpc::FfiVehicleLightStateList *cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehicleLightStateList$uninit(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateList> *ptr) noexcept {
  ::carla_rust::rpc::FfiVehicleLightStateList *uninit = reinterpret_cast<::carla_rust::rpc::FfiVehicleLightStateList *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiVehicleLightStateList>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateList>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehicleLightStateList$raw(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateList> *ptr, ::carla_rust::rpc::FfiVehicleLightStateList *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateList>(raw);
}
::carla_rust::rpc::FfiVehicleLightStateList const *cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehicleLightStateList$get(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateList> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::rpc::FfiVehicleLightStateList *cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehicleLightStateList$release(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateList> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiVehicleLightStateList$drop(::std::unique_ptr<::carla_rust::rpc::FfiVehicleLightStateList> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::rpc::FfiVehicleLightStateList>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehicleLightStateList$null(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList>();
}
::carla_rust::rpc::FfiVehicleLightStateList *cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehicleLightStateList$uninit(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList> *ptr) noexcept {
  ::carla_rust::rpc::FfiVehicleLightStateList *uninit = reinterpret_cast<::carla_rust::rpc::FfiVehicleLightStateList *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiVehicleLightStateList>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehicleLightStateList$clone(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList> const &self, ::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList>(self);
}
::carla_rust::rpc::FfiVehicleLightStateList const *cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehicleLightStateList$get(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiVehicleLightStateList$drop(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateList>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehicleLightStateList$null(::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateList>();
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehicleLightStateList$clone(::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateList> const &self, ::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateList>(self);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehicleLightStateList$downgrade(::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList> const &shared, ::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateList> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateList>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehicleLightStateList$upgrade(::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateList> const &weak, ::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::rpc::FfiVehicleLightStateList>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiVehicleLightStateList$drop(::std::weak_ptr<::carla_rust::rpc::FfiVehicleLightStateList> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::rpc::FfiVehicleLightStateList> *cxxbridge1$std$vector$carla_rust$rpc$FfiVehicleLightStateList$new() noexcept {
  return new ::std::vector<::carla_rust::rpc::FfiVehicleLightStateList>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$rpc$FfiVehicleLightStateList$size(::std::vector<::carla_rust::rpc::FfiVehicleLightStateList> const &s) noexcept {
  return s.size();
}
::carla_rust::rpc::FfiVehicleLightStateList *cxxbridge1$std$vector$carla_rust$rpc$FfiVehicleLightStateList$get_unchecked(::std::vector<::carla_rust::rpc::FfiVehicleLightStateList> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiVehicleLightStateList$push_back(::std::vector<::carla_rust::rpc::FfiVehicleLightStateList> *v, ::carla_rust::rpc::FfiVehicleLightStateList *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiVehicleLightStateList$pop_back(::std::vector<::carla_rust::rpc::FfiVehicleLightStateList> *v, ::carla_rust::rpc::FfiVehicleLightStateList *out) noexcept {
  ::new (out) ::carla_rust::rpc::FfiVehicleLightStateList(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiVehicleLightStateList>>::value, "definition of `::std::vector<::carla_rust::rpc::FfiVehicleLightStateList>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateList>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateList>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehicleLightStateList$null(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateList>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateList>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehicleLightStateList$raw(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateList>> *ptr, ::std::vector<::carla_rust::rpc::FfiVehicleLightStateList> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateList>>(raw);
}
::std::vector<::carla_rust::rpc::FfiVehicleLightStateList> const *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehicleLightStateList$get(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateList>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::rpc::FfiVehicleLightStateList> *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehicleLightStateList$release(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateList>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiVehicleLightStateList$drop(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiVehicleLightStateList>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiVehicleLightStateList>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::rpc::FfiEnvironmentObjectRef>::value, "definition of `::carla_rust::rpc::FfiEnvironmentObjectRef` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$null(::std::unique_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>();
}
::carla_rust::rpc::FfiEnvironmentObjectRef *cxxbridge1$unique_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$uninit(::std::unique_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> *ptr) noexcept {
  ::carla_rust::rpc::FfiEnvironmentObjectRef *uninit = reinterpret_cast<::carla_rust::rpc::FfiEnvironmentObjectRef *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiEnvironmentObjectRef>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$raw(::std::unique_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> *ptr, ::carla_rust::rpc::FfiEnvironmentObjectRef *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>(raw);
}
::carla_rust::rpc::FfiEnvironmentObjectRef const *cxxbridge1$unique_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$get(::std::unique_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::rpc::FfiEnvironmentObjectRef *cxxbridge1$unique_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$release(::std::unique_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$drop(::std::unique_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::rpc::FfiEnvironmentObjectRef>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$null(::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>();
}
::carla_rust::rpc::FfiEnvironmentObjectRef *cxxbridge1$shared_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$uninit(::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> *ptr) noexcept {
  ::carla_rust::rpc::FfiEnvironmentObjectRef *uninit = reinterpret_cast<::carla_rust::rpc::FfiEnvironmentObjectRef *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiEnvironmentObjectRef>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$clone(::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> const &self, ::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>(self);
}
::carla_rust::rpc::FfiEnvironmentObjectRef const *cxxbridge1$shared_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$get(::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$drop(::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$null(::std::weak_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>();
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$clone(::std::weak_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> const &self, ::std::weak_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>(self);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$downgrade(::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> const &shared, ::std::weak_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$upgrade(::std::weak_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> const &weak, ::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiEnvironmentObjectRef$drop(::std::weak_ptr<::carla_rust::rpc::FfiEnvironmentObjectRef> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef> *cxxbridge1$std$vector$carla_rust$rpc$FfiEnvironmentObjectRef$new() noexcept {
  return new ::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$rpc$FfiEnvironmentObjectRef$size(::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef> const &s) noexcept {
  return s.size();
}
::carla_rust::rpc::FfiEnvironmentObjectRef *cxxbridge1$std$vector$carla_rust$rpc$FfiEnvironmentObjectRef$get_unchecked(::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiEnvironmentObjectRef$push_back(::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef> *v, ::carla_rust::rpc::FfiEnvironmentObjectRef *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiEnvironmentObjectRef$pop_back(::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef> *v, ::carla_rust::rpc::FfiEnvironmentObjectRef *out) noexcept {
  ::new (out) ::carla_rust::rpc::FfiEnvironmentObjectRef(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef>>::value, "definition of `::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiEnvironmentObjectRef$null(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiEnvironmentObjectRef$raw(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef>> *ptr, ::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef>>(raw);
}
::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef> const *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiEnvironmentObjectRef$get(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef> *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiEnvironmentObjectRef$release(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiEnvironmentObjectRef$drop(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiEnvironmentObjectRef>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::rpc::FfiRpcColor>::value, "definition of `::carla_rust::rpc::FfiRpcColor` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::rpc::FfiRpcColor>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::rpc::FfiRpcColor>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcColor$null(::std::unique_ptr<::carla_rust::rpc::FfiRpcColor> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiRpcColor>();
}
::carla_rust::rpc::FfiRpcColor *cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcColor$uninit(::std::unique_ptr<::carla_rust::rpc::FfiRpcColor> *ptr) noexcept {
  ::carla_rust::rpc::FfiRpcColor *uninit = reinterpret_cast<::carla_rust::rpc::FfiRpcColor *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiRpcColor>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiRpcColor>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcColor$raw(::std::unique_ptr<::carla_rust::rpc::FfiRpcColor> *ptr, ::carla_rust::rpc::FfiRpcColor *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiRpcColor>(raw);
}
::carla_rust::rpc::FfiRpcColor const *cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcColor$get(::std::unique_ptr<::carla_rust::rpc::FfiRpcColor> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::rpc::FfiRpcColor *cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcColor$release(::std::unique_ptr<::carla_rust::rpc::FfiRpcColor> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcColor$drop(::std::unique_ptr<::carla_rust::rpc::FfiRpcColor> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::rpc::FfiRpcColor>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::rpc::FfiRpcColor>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::rpc::FfiRpcColor>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcColor$null(::std::shared_ptr<::carla_rust::rpc::FfiRpcColor> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiRpcColor>();
}
::carla_rust::rpc::FfiRpcColor *cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcColor$uninit(::std::shared_ptr<::carla_rust::rpc::FfiRpcColor> *ptr) noexcept {
  ::carla_rust::rpc::FfiRpcColor *uninit = reinterpret_cast<::carla_rust::rpc::FfiRpcColor *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiRpcColor>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiRpcColor>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcColor$clone(::std::shared_ptr<::carla_rust::rpc::FfiRpcColor> const &self, ::std::shared_ptr<::carla_rust::rpc::FfiRpcColor> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiRpcColor>(self);
}
::carla_rust::rpc::FfiRpcColor const *cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcColor$get(::std::shared_ptr<::carla_rust::rpc::FfiRpcColor> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcColor$drop(::std::shared_ptr<::carla_rust::rpc::FfiRpcColor> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::rpc::FfiRpcColor>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::rpc::FfiRpcColor>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcColor$null(::std::weak_ptr<::carla_rust::rpc::FfiRpcColor> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiRpcColor>();
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcColor$clone(::std::weak_ptr<::carla_rust::rpc::FfiRpcColor> const &self, ::std::weak_ptr<::carla_rust::rpc::FfiRpcColor> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiRpcColor>(self);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcColor$downgrade(::std::shared_ptr<::carla_rust::rpc::FfiRpcColor> const &shared, ::std::weak_ptr<::carla_rust::rpc::FfiRpcColor> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::rpc::FfiRpcColor>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcColor$upgrade(::std::weak_ptr<::carla_rust::rpc::FfiRpcColor> const &weak, ::std::shared_ptr<::carla_rust::rpc::FfiRpcColor> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::rpc::FfiRpcColor>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcColor$drop(::std::weak_ptr<::carla_rust::rpc::FfiRpcColor> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::rpc::FfiRpcColor> *cxxbridge1$std$vector$carla_rust$rpc$FfiRpcColor$new() noexcept {
  return new ::std::vector<::carla_rust::rpc::FfiRpcColor>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$rpc$FfiRpcColor$size(::std::vector<::carla_rust::rpc::FfiRpcColor> const &s) noexcept {
  return s.size();
}
::carla_rust::rpc::FfiRpcColor *cxxbridge1$std$vector$carla_rust$rpc$FfiRpcColor$get_unchecked(::std::vector<::carla_rust::rpc::FfiRpcColor> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiRpcColor$push_back(::std::vector<::carla_rust::rpc::FfiRpcColor> *v, ::carla_rust::rpc::FfiRpcColor *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiRpcColor$pop_back(::std::vector<::carla_rust::rpc::FfiRpcColor> *v, ::carla_rust::rpc::FfiRpcColor *out) noexcept {
  ::new (out) ::carla_rust::rpc::FfiRpcColor(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiRpcColor>>::value, "definition of `::std::vector<::carla_rust::rpc::FfiRpcColor>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcColor>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcColor>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcColor$null(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcColor>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcColor>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcColor$raw(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcColor>> *ptr, ::std::vector<::carla_rust::rpc::FfiRpcColor> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcColor>>(raw);
}
::std::vector<::carla_rust::rpc::FfiRpcColor> const *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcColor$get(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcColor>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::rpc::FfiRpcColor> *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcColor$release(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcColor>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcColor$drop(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcColor>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiRpcColor>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::rpc::FfiRpcLightGroup>::value, "definition of `::carla_rust::rpc::FfiRpcLightGroup` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightGroup>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightGroup>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcLightGroup$null(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightGroup> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiRpcLightGroup>();
}
::carla_rust::rpc::FfiRpcLightGroup *cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcLightGroup$uninit(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightGroup> *ptr) noexcept {
  ::carla_rust::rpc::FfiRpcLightGroup *uninit = reinterpret_cast<::carla_rust::rpc::FfiRpcLightGroup *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiRpcLightGroup>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiRpcLightGroup>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcLightGroup$raw(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightGroup> *ptr, ::carla_rust::rpc::FfiRpcLightGroup *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiRpcLightGroup>(raw);
}
::carla_rust::rpc::FfiRpcLightGroup const *cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcLightGroup$get(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightGroup> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::rpc::FfiRpcLightGroup *cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcLightGroup$release(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightGroup> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcLightGroup$drop(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightGroup> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::rpc::FfiRpcLightGroup>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcLightGroup$null(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup>();
}
::carla_rust::rpc::FfiRpcLightGroup *cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcLightGroup$uninit(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup> *ptr) noexcept {
  ::carla_rust::rpc::FfiRpcLightGroup *uninit = reinterpret_cast<::carla_rust::rpc::FfiRpcLightGroup *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiRpcLightGroup>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcLightGroup$clone(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup> const &self, ::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup>(self);
}
::carla_rust::rpc::FfiRpcLightGroup const *cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcLightGroup$get(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcLightGroup$drop(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::rpc::FfiRpcLightGroup>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::rpc::FfiRpcLightGroup>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcLightGroup$null(::std::weak_ptr<::carla_rust::rpc::FfiRpcLightGroup> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiRpcLightGroup>();
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcLightGroup$clone(::std::weak_ptr<::carla_rust::rpc::FfiRpcLightGroup> const &self, ::std::weak_ptr<::carla_rust::rpc::FfiRpcLightGroup> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiRpcLightGroup>(self);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcLightGroup$downgrade(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup> const &shared, ::std::weak_ptr<::carla_rust::rpc::FfiRpcLightGroup> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::rpc::FfiRpcLightGroup>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcLightGroup$upgrade(::std::weak_ptr<::carla_rust::rpc::FfiRpcLightGroup> const &weak, ::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::rpc::FfiRpcLightGroup>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcLightGroup$drop(::std::weak_ptr<::carla_rust::rpc::FfiRpcLightGroup> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::rpc::FfiRpcLightGroup> *cxxbridge1$std$vector$carla_rust$rpc$FfiRpcLightGroup$new() noexcept {
  return new ::std::vector<::carla_rust::rpc::FfiRpcLightGroup>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$rpc$FfiRpcLightGroup$size(::std::vector<::carla_rust::rpc::FfiRpcLightGroup> const &s) noexcept {
  return s.size();
}
::carla_rust::rpc::FfiRpcLightGroup *cxxbridge1$std$vector$carla_rust$rpc$FfiRpcLightGroup$get_unchecked(::std::vector<::carla_rust::rpc::FfiRpcLightGroup> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiRpcLightGroup$push_back(::std::vector<::carla_rust::rpc::FfiRpcLightGroup> *v, ::carla_rust::rpc::FfiRpcLightGroup *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiRpcLightGroup$pop_back(::std::vector<::carla_rust::rpc::FfiRpcLightGroup> *v, ::carla_rust::rpc::FfiRpcLightGroup *out) noexcept {
  ::new (out) ::carla_rust::rpc::FfiRpcLightGroup(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiRpcLightGroup>>::value, "definition of `::std::vector<::carla_rust::rpc::FfiRpcLightGroup>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightGroup>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightGroup>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcLightGroup$null(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightGroup>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightGroup>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcLightGroup$raw(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightGroup>> *ptr, ::std::vector<::carla_rust::rpc::FfiRpcLightGroup> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightGroup>>(raw);
}
::std::vector<::carla_rust::rpc::FfiRpcLightGroup> const *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcLightGroup$get(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightGroup>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::rpc::FfiRpcLightGroup> *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcLightGroup$release(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightGroup>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcLightGroup$drop(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightGroup>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiRpcLightGroup>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::rpc::FfiRpcLightState>::value, "definition of `::carla_rust::rpc::FfiRpcLightState` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightState>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightState>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcLightState$null(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightState> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiRpcLightState>();
}
::carla_rust::rpc::FfiRpcLightState *cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcLightState$uninit(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightState> *ptr) noexcept {
  ::carla_rust::rpc::FfiRpcLightState *uninit = reinterpret_cast<::carla_rust::rpc::FfiRpcLightState *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiRpcLightState>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiRpcLightState>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcLightState$raw(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightState> *ptr, ::carla_rust::rpc::FfiRpcLightState *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::rpc::FfiRpcLightState>(raw);
}
::carla_rust::rpc::FfiRpcLightState const *cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcLightState$get(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightState> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::rpc::FfiRpcLightState *cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcLightState$release(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightState> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$rpc$FfiRpcLightState$drop(::std::unique_ptr<::carla_rust::rpc::FfiRpcLightState> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::rpc::FfiRpcLightState>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcLightState$null(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState>();
}
::carla_rust::rpc::FfiRpcLightState *cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcLightState$uninit(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState> *ptr) noexcept {
  ::carla_rust::rpc::FfiRpcLightState *uninit = reinterpret_cast<::carla_rust::rpc::FfiRpcLightState *>(new ::rust::MaybeUninit<::carla_rust::rpc::FfiRpcLightState>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcLightState$clone(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState> const &self, ::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState>(self);
}
::carla_rust::rpc::FfiRpcLightState const *cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcLightState$get(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$rpc$FfiRpcLightState$drop(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::rpc::FfiRpcLightState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::rpc::FfiRpcLightState>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcLightState$null(::std::weak_ptr<::carla_rust::rpc::FfiRpcLightState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiRpcLightState>();
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcLightState$clone(::std::weak_ptr<::carla_rust::rpc::FfiRpcLightState> const &self, ::std::weak_ptr<::carla_rust::rpc::FfiRpcLightState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::rpc::FfiRpcLightState>(self);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcLightState$downgrade(::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState> const &shared, ::std::weak_ptr<::carla_rust::rpc::FfiRpcLightState> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::rpc::FfiRpcLightState>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcLightState$upgrade(::std::weak_ptr<::carla_rust::rpc::FfiRpcLightState> const &weak, ::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::rpc::FfiRpcLightState>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$rpc$FfiRpcLightState$drop(::std::weak_ptr<::carla_rust::rpc::FfiRpcLightState> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::rpc::FfiRpcLightState> *cxxbridge1$std$vector$carla_rust$rpc$FfiRpcLightState$new() noexcept {
  return new ::std::vector<::carla_rust::rpc::FfiRpcLightState>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$rpc$FfiRpcLightState$size(::std::vector<::carla_rust::rpc::FfiRpcLightState> const &s) noexcept {
  return s.size();
}
::carla_rust::rpc::FfiRpcLightState *cxxbridge1$std$vector$carla_rust$rpc$FfiRpcLightState$get_unchecked(::std::vector<::carla_rust::rpc::FfiRpcLightState> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiRpcLightState$push_back(::std::vector<::carla_rust::rpc::FfiRpcLightState> *v, ::carla_rust::rpc::FfiRpcLightState *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$rpc$FfiRpcLightState$pop_back(::std::vector<::carla_rust::rpc::FfiRpcLightState> *v, ::carla_rust::rpc::FfiRpcLightState *out) noexcept {
  ::new (out) ::carla_rust::rpc::FfiRpcLightState(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiRpcLightState>>::value, "definition of `::std::vector<::carla_rust::rpc::FfiRpcLightState>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightState>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightState>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcLightState$null(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightState>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightState>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcLightState$raw(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightState>> *ptr, ::std::vector<::carla_rust::rpc::FfiRpcLightState> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightState>>(raw);
}
::std::vector<::carla_rust::rpc::FfiRpcLightState> const *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcLightState$get(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightState>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::rpc::FfiRpcLightState> *cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcLightState$release(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightState>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$rpc$FfiRpcLightState$drop(::std::unique_ptr<::std::vector<::carla_rust::rpc::FfiRpcLightState>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::rpc::FfiRpcLightState>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::sensor::data::FfiColor>::value, "definition of `::carla_rust::sensor::data::FfiColor` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::sensor::data::FfiColor>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::sensor::data::FfiColor>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiColor$null(::std::unique_ptr<::carla_rust::sensor::data::FfiColor> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiColor>();
}
::carla_rust::sensor::data::FfiColor *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiColor$uninit(::std::unique_ptr<::carla_rust::sensor::data::FfiColor> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiColor *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiColor *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiColor>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiColor>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiColor$raw(::std::unique_ptr<::carla_rust::sensor::data::FfiColor> *ptr, ::carla_rust::sensor::data::FfiColor *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiColor>(raw);
}
::carla_rust::sensor::data::FfiColor const *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiColor$get(::std::unique_ptr<::carla_rust::sensor::data::FfiColor> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::sensor::data::FfiColor *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiColor$release(::std::unique_ptr<::carla_rust::sensor::data::FfiColor> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiColor$drop(::std::unique_ptr<::carla_rust::sensor::data::FfiColor> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::sensor::data::FfiColor>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::sensor::data::FfiColor>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::sensor::data::FfiColor>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiColor$null(::std::shared_ptr<::carla_rust::sensor::data::FfiColor> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiColor>();
}
::carla_rust::sensor::data::FfiColor *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiColor$uninit(::std::shared_ptr<::carla_rust::sensor::data::FfiColor> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiColor *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiColor *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiColor>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiColor>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiColor$clone(::std::shared_ptr<::carla_rust::sensor::data::FfiColor> const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiColor> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiColor>(self);
}
::carla_rust::sensor::data::FfiColor const *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiColor$get(::std::shared_ptr<::carla_rust::sensor::data::FfiColor> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiColor$drop(::std::shared_ptr<::carla_rust::sensor::data::FfiColor> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::sensor::data::FfiColor>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::sensor::data::FfiColor>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiColor$null(::std::weak_ptr<::carla_rust::sensor::data::FfiColor> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiColor>();
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiColor$clone(::std::weak_ptr<::carla_rust::sensor::data::FfiColor> const &self, ::std::weak_ptr<::carla_rust::sensor::data::FfiColor> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiColor>(self);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiColor$downgrade(::std::shared_ptr<::carla_rust::sensor::data::FfiColor> const &shared, ::std::weak_ptr<::carla_rust::sensor::data::FfiColor> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::sensor::data::FfiColor>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiColor$upgrade(::std::weak_ptr<::carla_rust::sensor::data::FfiColor> const &weak, ::std::shared_ptr<::carla_rust::sensor::data::FfiColor> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::sensor::data::FfiColor>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiColor$drop(::std::weak_ptr<::carla_rust::sensor::data::FfiColor> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::sensor::data::FfiColor> *cxxbridge1$std$vector$carla_rust$sensor$data$FfiColor$new() noexcept {
  return new ::std::vector<::carla_rust::sensor::data::FfiColor>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$sensor$data$FfiColor$size(::std::vector<::carla_rust::sensor::data::FfiColor> const &s) noexcept {
  return s.size();
}
::carla_rust::sensor::data::FfiColor *cxxbridge1$std$vector$carla_rust$sensor$data$FfiColor$get_unchecked(::std::vector<::carla_rust::sensor::data::FfiColor> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$sensor$data$FfiColor$push_back(::std::vector<::carla_rust::sensor::data::FfiColor> *v, ::carla_rust::sensor::data::FfiColor *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$sensor$data$FfiColor$pop_back(::std::vector<::carla_rust::sensor::data::FfiColor> *v, ::carla_rust::sensor::data::FfiColor *out) noexcept {
  ::new (out) ::carla_rust::sensor::data::FfiColor(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::sensor::data::FfiColor>>::value, "definition of `::std::vector<::carla_rust::sensor::data::FfiColor>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiColor>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiColor>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiColor$null(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiColor>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiColor>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiColor$raw(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiColor>> *ptr, ::std::vector<::carla_rust::sensor::data::FfiColor> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiColor>>(raw);
}
::std::vector<::carla_rust::sensor::data::FfiColor> const *cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiColor$get(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiColor>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::sensor::data::FfiColor> *cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiColor$release(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiColor>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiColor$drop(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiColor>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::sensor::data::FfiColor>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::sensor::data::FfiCollisionEvent>::value, "definition of `::carla_rust::sensor::data::FfiCollisionEvent` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::sensor::data::FfiCollisionEvent>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::sensor::data::FfiCollisionEvent>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiCollisionEvent$null(::std::unique_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiCollisionEvent>();
}
::carla_rust::sensor::data::FfiCollisionEvent *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiCollisionEvent$uninit(::std::unique_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiCollisionEvent *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiCollisionEvent *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiCollisionEvent>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiCollisionEvent>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiCollisionEvent$raw(::std::unique_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *ptr, ::carla_rust::sensor::data::FfiCollisionEvent *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiCollisionEvent>(raw);
}
::carla_rust::sensor::data::FfiCollisionEvent const *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiCollisionEvent$get(::std::unique_ptr<::carla_rust::sensor::data::FfiCollisionEvent> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::sensor::data::FfiCollisionEvent *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiCollisionEvent$release(::std::unique_ptr<::carla_rust::sensor::data::FfiCollisionEvent> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiCollisionEvent$drop(::std::unique_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::sensor::data::FfiCollisionEvent>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiCollisionEvent$null(::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent>();
}
::carla_rust::sensor::data::FfiCollisionEvent *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiCollisionEvent$uninit(::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiCollisionEvent *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiCollisionEvent *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiCollisionEvent>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiCollisionEvent$clone(::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent> const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent>(self);
}
::carla_rust::sensor::data::FfiCollisionEvent const *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiCollisionEvent$get(::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiCollisionEvent$drop(::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::sensor::data::FfiCollisionEvent>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::sensor::data::FfiCollisionEvent>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiCollisionEvent$null(::std::weak_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiCollisionEvent>();
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiCollisionEvent$clone(::std::weak_ptr<::carla_rust::sensor::data::FfiCollisionEvent> const &self, ::std::weak_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiCollisionEvent>(self);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiCollisionEvent$downgrade(::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent> const &shared, ::std::weak_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::sensor::data::FfiCollisionEvent>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiCollisionEvent$upgrade(::std::weak_ptr<::carla_rust::sensor::data::FfiCollisionEvent> const &weak, ::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::sensor::data::FfiCollisionEvent>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiCollisionEvent$drop(::std::weak_ptr<::carla_rust::sensor::data::FfiCollisionEvent> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::sensor::data::FfiImage>::value, "definition of `::carla_rust::sensor::data::FfiImage` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::sensor::data::FfiImage>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::sensor::data::FfiImage>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiImage$null(::std::unique_ptr<::carla_rust::sensor::data::FfiImage> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiImage>();
}
::carla_rust::sensor::data::FfiImage *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiImage$uninit(::std::unique_ptr<::carla_rust::sensor::data::FfiImage> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiImage *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiImage *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiImage>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiImage>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiImage$raw(::std::unique_ptr<::carla_rust::sensor::data::FfiImage> *ptr, ::carla_rust::sensor::data::FfiImage *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiImage>(raw);
}
::carla_rust::sensor::data::FfiImage const *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiImage$get(::std::unique_ptr<::carla_rust::sensor::data::FfiImage> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::sensor::data::FfiImage *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiImage$release(::std::unique_ptr<::carla_rust::sensor::data::FfiImage> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiImage$drop(::std::unique_ptr<::carla_rust::sensor::data::FfiImage> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::sensor::data::FfiImage>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::sensor::data::FfiImage>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::sensor::data::FfiImage>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiImage$null(::std::shared_ptr<::carla_rust::sensor::data::FfiImage> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiImage>();
}
::carla_rust::sensor::data::FfiImage *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiImage$uninit(::std::shared_ptr<::carla_rust::sensor::data::FfiImage> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiImage *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiImage *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiImage>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiImage>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiImage$clone(::std::shared_ptr<::carla_rust::sensor::data::FfiImage> const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiImage> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiImage>(self);
}
::carla_rust::sensor::data::FfiImage const *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiImage$get(::std::shared_ptr<::carla_rust::sensor::data::FfiImage> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiImage$drop(::std::shared_ptr<::carla_rust::sensor::data::FfiImage> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::sensor::data::FfiImage>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::sensor::data::FfiImage>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiImage$null(::std::weak_ptr<::carla_rust::sensor::data::FfiImage> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiImage>();
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiImage$clone(::std::weak_ptr<::carla_rust::sensor::data::FfiImage> const &self, ::std::weak_ptr<::carla_rust::sensor::data::FfiImage> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiImage>(self);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiImage$downgrade(::std::shared_ptr<::carla_rust::sensor::data::FfiImage> const &shared, ::std::weak_ptr<::carla_rust::sensor::data::FfiImage> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::sensor::data::FfiImage>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiImage$upgrade(::std::weak_ptr<::carla_rust::sensor::data::FfiImage> const &weak, ::std::shared_ptr<::carla_rust::sensor::data::FfiImage> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::sensor::data::FfiImage>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiImage$drop(::std::weak_ptr<::carla_rust::sensor::data::FfiImage> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::sensor::data::FfiLaneInvasionEvent>::value, "definition of `::carla_rust::sensor::data::FfiLaneInvasionEvent` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$null(::std::unique_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>();
}
::carla_rust::sensor::data::FfiLaneInvasionEvent *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$uninit(::std::unique_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiLaneInvasionEvent *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiLaneInvasionEvent *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiLaneInvasionEvent>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$raw(::std::unique_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *ptr, ::carla_rust::sensor::data::FfiLaneInvasionEvent *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>(raw);
}
::carla_rust::sensor::data::FfiLaneInvasionEvent const *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$get(::std::unique_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::sensor::data::FfiLaneInvasionEvent *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$release(::std::unique_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$drop(::std::unique_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::sensor::data::FfiLaneInvasionEvent>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$null(::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>();
}
::carla_rust::sensor::data::FfiLaneInvasionEvent *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$uninit(::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiLaneInvasionEvent *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiLaneInvasionEvent *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiLaneInvasionEvent>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$clone(::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>(self);
}
::carla_rust::sensor::data::FfiLaneInvasionEvent const *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$get(::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$drop(::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$null(::std::weak_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>();
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$clone(::std::weak_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> const &self, ::std::weak_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>(self);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$downgrade(::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> const &shared, ::std::weak_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$upgrade(::std::weak_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> const &weak, ::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLaneInvasionEvent$drop(::std::weak_ptr<::carla_rust::sensor::data::FfiLaneInvasionEvent> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::sensor::data::FfiLidarDetection>::value, "definition of `::carla_rust::sensor::data::FfiLidarDetection` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarDetection>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarDetection>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLidarDetection$null(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiLidarDetection>();
}
::carla_rust::sensor::data::FfiLidarDetection *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLidarDetection$uninit(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarDetection> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiLidarDetection *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiLidarDetection *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiLidarDetection>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiLidarDetection>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLidarDetection$raw(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarDetection> *ptr, ::carla_rust::sensor::data::FfiLidarDetection *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiLidarDetection>(raw);
}
::carla_rust::sensor::data::FfiLidarDetection const *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLidarDetection$get(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarDetection> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::sensor::data::FfiLidarDetection *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLidarDetection$release(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarDetection> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLidarDetection$drop(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarDetection> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::sensor::data::FfiLidarDetection>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLidarDetection$null(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection>();
}
::carla_rust::sensor::data::FfiLidarDetection *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLidarDetection$uninit(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiLidarDetection *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiLidarDetection *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiLidarDetection>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLidarDetection$clone(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection> const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection>(self);
}
::carla_rust::sensor::data::FfiLidarDetection const *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLidarDetection$get(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLidarDetection$drop(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::sensor::data::FfiLidarDetection>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::sensor::data::FfiLidarDetection>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLidarDetection$null(::std::weak_ptr<::carla_rust::sensor::data::FfiLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiLidarDetection>();
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLidarDetection$clone(::std::weak_ptr<::carla_rust::sensor::data::FfiLidarDetection> const &self, ::std::weak_ptr<::carla_rust::sensor::data::FfiLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiLidarDetection>(self);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLidarDetection$downgrade(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection> const &shared, ::std::weak_ptr<::carla_rust::sensor::data::FfiLidarDetection> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::sensor::data::FfiLidarDetection>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLidarDetection$upgrade(::std::weak_ptr<::carla_rust::sensor::data::FfiLidarDetection> const &weak, ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarDetection>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLidarDetection$drop(::std::weak_ptr<::carla_rust::sensor::data::FfiLidarDetection> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::sensor::data::FfiLidarDetection> *cxxbridge1$std$vector$carla_rust$sensor$data$FfiLidarDetection$new() noexcept {
  return new ::std::vector<::carla_rust::sensor::data::FfiLidarDetection>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$sensor$data$FfiLidarDetection$size(::std::vector<::carla_rust::sensor::data::FfiLidarDetection> const &s) noexcept {
  return s.size();
}
::carla_rust::sensor::data::FfiLidarDetection *cxxbridge1$std$vector$carla_rust$sensor$data$FfiLidarDetection$get_unchecked(::std::vector<::carla_rust::sensor::data::FfiLidarDetection> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$sensor$data$FfiLidarDetection$push_back(::std::vector<::carla_rust::sensor::data::FfiLidarDetection> *v, ::carla_rust::sensor::data::FfiLidarDetection *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$sensor$data$FfiLidarDetection$pop_back(::std::vector<::carla_rust::sensor::data::FfiLidarDetection> *v, ::carla_rust::sensor::data::FfiLidarDetection *out) noexcept {
  ::new (out) ::carla_rust::sensor::data::FfiLidarDetection(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::sensor::data::FfiLidarDetection>>::value, "definition of `::std::vector<::carla_rust::sensor::data::FfiLidarDetection>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiLidarDetection>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiLidarDetection>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiLidarDetection$null(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiLidarDetection>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiLidarDetection>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiLidarDetection$raw(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiLidarDetection>> *ptr, ::std::vector<::carla_rust::sensor::data::FfiLidarDetection> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiLidarDetection>>(raw);
}
::std::vector<::carla_rust::sensor::data::FfiLidarDetection> const *cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiLidarDetection$get(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiLidarDetection>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::sensor::data::FfiLidarDetection> *cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiLidarDetection$release(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiLidarDetection>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiLidarDetection$drop(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiLidarDetection>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::sensor::data::FfiLidarDetection>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::sensor::data::FfiObstacleDetectionEvent>::value, "definition of `::carla_rust::sensor::data::FfiObstacleDetectionEvent` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$null(::std::unique_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>();
}
::carla_rust::sensor::data::FfiObstacleDetectionEvent *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$uninit(::std::unique_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiObstacleDetectionEvent *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiObstacleDetectionEvent *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiObstacleDetectionEvent>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$raw(::std::unique_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *ptr, ::carla_rust::sensor::data::FfiObstacleDetectionEvent *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>(raw);
}
::carla_rust::sensor::data::FfiObstacleDetectionEvent const *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$get(::std::unique_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::sensor::data::FfiObstacleDetectionEvent *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$release(::std::unique_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$drop(::std::unique_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::sensor::data::FfiObstacleDetectionEvent>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$null(::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>();
}
::carla_rust::sensor::data::FfiObstacleDetectionEvent *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$uninit(::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiObstacleDetectionEvent *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiObstacleDetectionEvent *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiObstacleDetectionEvent>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$clone(::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>(self);
}
::carla_rust::sensor::data::FfiObstacleDetectionEvent const *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$get(::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$drop(::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$null(::std::weak_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>();
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$clone(::std::weak_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> const &self, ::std::weak_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>(self);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$downgrade(::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> const &shared, ::std::weak_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$upgrade(::std::weak_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> const &weak, ::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiObstacleDetectionEvent$drop(::std::weak_ptr<::carla_rust::sensor::data::FfiObstacleDetectionEvent> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::sensor::data::FfiSemanticLidarDetection>::value, "definition of `::carla_rust::sensor::data::FfiSemanticLidarDetection` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$null(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>();
}
::carla_rust::sensor::data::FfiSemanticLidarDetection *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$uninit(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiSemanticLidarDetection *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiSemanticLidarDetection *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiSemanticLidarDetection>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$raw(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> *ptr, ::carla_rust::sensor::data::FfiSemanticLidarDetection *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>(raw);
}
::carla_rust::sensor::data::FfiSemanticLidarDetection const *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$get(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::sensor::data::FfiSemanticLidarDetection *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$release(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$drop(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::sensor::data::FfiSemanticLidarDetection>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$null(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>();
}
::carla_rust::sensor::data::FfiSemanticLidarDetection *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$uninit(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiSemanticLidarDetection *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiSemanticLidarDetection *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiSemanticLidarDetection>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$clone(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>(self);
}
::carla_rust::sensor::data::FfiSemanticLidarDetection const *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$get(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$drop(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$null(::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>();
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$clone(::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> const &self, ::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>(self);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$downgrade(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> const &shared, ::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$upgrade(::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> const &weak, ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiSemanticLidarDetection$drop(::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarDetection> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection> *cxxbridge1$std$vector$carla_rust$sensor$data$FfiSemanticLidarDetection$new() noexcept {
  return new ::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$sensor$data$FfiSemanticLidarDetection$size(::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection> const &s) noexcept {
  return s.size();
}
::carla_rust::sensor::data::FfiSemanticLidarDetection *cxxbridge1$std$vector$carla_rust$sensor$data$FfiSemanticLidarDetection$get_unchecked(::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$sensor$data$FfiSemanticLidarDetection$push_back(::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection> *v, ::carla_rust::sensor::data::FfiSemanticLidarDetection *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$sensor$data$FfiSemanticLidarDetection$pop_back(::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection> *v, ::carla_rust::sensor::data::FfiSemanticLidarDetection *out) noexcept {
  ::new (out) ::carla_rust::sensor::data::FfiSemanticLidarDetection(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection>>::value, "definition of `::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiSemanticLidarDetection$null(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiSemanticLidarDetection$raw(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection>> *ptr, ::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection>>(raw);
}
::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection> const *cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiSemanticLidarDetection$get(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection> *cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiSemanticLidarDetection$release(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$sensor$data$FfiSemanticLidarDetection$drop(::std::unique_ptr<::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::sensor::data::FfiSemanticLidarDetection>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::sensor::data::FfiLidarMeasurement>::value, "definition of `::carla_rust::sensor::data::FfiLidarMeasurement` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLidarMeasurement$null(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>();
}
::carla_rust::sensor::data::FfiLidarMeasurement *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLidarMeasurement$uninit(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiLidarMeasurement *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiLidarMeasurement *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiLidarMeasurement>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLidarMeasurement$raw(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *ptr, ::carla_rust::sensor::data::FfiLidarMeasurement *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>(raw);
}
::carla_rust::sensor::data::FfiLidarMeasurement const *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLidarMeasurement$get(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::sensor::data::FfiLidarMeasurement *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLidarMeasurement$release(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiLidarMeasurement$drop(::std::unique_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::sensor::data::FfiLidarMeasurement>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLidarMeasurement$null(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>();
}
::carla_rust::sensor::data::FfiLidarMeasurement *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLidarMeasurement$uninit(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiLidarMeasurement *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiLidarMeasurement *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiLidarMeasurement>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLidarMeasurement$clone(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>(self);
}
::carla_rust::sensor::data::FfiLidarMeasurement const *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLidarMeasurement$get(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiLidarMeasurement$drop(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLidarMeasurement$null(::std::weak_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>();
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLidarMeasurement$clone(::std::weak_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> const &self, ::std::weak_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>(self);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLidarMeasurement$downgrade(::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> const &shared, ::std::weak_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLidarMeasurement$upgrade(::std::weak_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> const &weak, ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::sensor::data::FfiLidarMeasurement>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiLidarMeasurement$drop(::std::weak_ptr<::carla_rust::sensor::data::FfiLidarMeasurement> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>::value, "definition of `::carla_rust::sensor::data::FfiSemanticLidarMeasurement` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$null(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>();
}
::carla_rust::sensor::data::FfiSemanticLidarMeasurement *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$uninit(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiSemanticLidarMeasurement *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiSemanticLidarMeasurement *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$raw(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *ptr, ::carla_rust::sensor::data::FfiSemanticLidarMeasurement *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>(raw);
}
::carla_rust::sensor::data::FfiSemanticLidarMeasurement const *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$get(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::sensor::data::FfiSemanticLidarMeasurement *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$release(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$drop(::std::unique_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$null(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>();
}
::carla_rust::sensor::data::FfiSemanticLidarMeasurement *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$uninit(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiSemanticLidarMeasurement *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiSemanticLidarMeasurement *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$clone(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>(self);
}
::carla_rust::sensor::data::FfiSemanticLidarMeasurement const *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$get(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$drop(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$null(::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>();
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$clone(::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> const &self, ::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>(self);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$downgrade(::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> const &shared, ::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$upgrade(::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> const &weak, ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiSemanticLidarMeasurement$drop(::std::weak_ptr<::carla_rust::sensor::data::FfiSemanticLidarMeasurement> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::sensor::data::FfiRadarMeasurement>::value, "definition of `::carla_rust::sensor::data::FfiRadarMeasurement` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiRadarMeasurement$null(::std::unique_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>();
}
::carla_rust::sensor::data::FfiRadarMeasurement *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiRadarMeasurement$uninit(::std::unique_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiRadarMeasurement *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiRadarMeasurement *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiRadarMeasurement>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiRadarMeasurement$raw(::std::unique_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *ptr, ::carla_rust::sensor::data::FfiRadarMeasurement *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>(raw);
}
::carla_rust::sensor::data::FfiRadarMeasurement const *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiRadarMeasurement$get(::std::unique_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::sensor::data::FfiRadarMeasurement *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiRadarMeasurement$release(::std::unique_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiRadarMeasurement$drop(::std::unique_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::sensor::data::FfiRadarMeasurement>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiRadarMeasurement$null(::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>();
}
::carla_rust::sensor::data::FfiRadarMeasurement *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiRadarMeasurement$uninit(::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiRadarMeasurement *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiRadarMeasurement *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiRadarMeasurement>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiRadarMeasurement$clone(::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>(self);
}
::carla_rust::sensor::data::FfiRadarMeasurement const *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiRadarMeasurement$get(::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiRadarMeasurement$drop(::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiRadarMeasurement$null(::std::weak_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>();
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiRadarMeasurement$clone(::std::weak_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> const &self, ::std::weak_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>(self);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiRadarMeasurement$downgrade(::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> const &shared, ::std::weak_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiRadarMeasurement$upgrade(::std::weak_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> const &weak, ::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::sensor::data::FfiRadarMeasurement>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiRadarMeasurement$drop(::std::weak_ptr<::carla_rust::sensor::data::FfiRadarMeasurement> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::sensor::data::FfiGnssMeasurement>::value, "definition of `::carla_rust::sensor::data::FfiGnssMeasurement` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiGnssMeasurement$null(::std::unique_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>();
}
::carla_rust::sensor::data::FfiGnssMeasurement *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiGnssMeasurement$uninit(::std::unique_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiGnssMeasurement *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiGnssMeasurement *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiGnssMeasurement>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiGnssMeasurement$raw(::std::unique_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *ptr, ::carla_rust::sensor::data::FfiGnssMeasurement *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>(raw);
}
::carla_rust::sensor::data::FfiGnssMeasurement const *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiGnssMeasurement$get(::std::unique_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::sensor::data::FfiGnssMeasurement *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiGnssMeasurement$release(::std::unique_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiGnssMeasurement$drop(::std::unique_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::sensor::data::FfiGnssMeasurement>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiGnssMeasurement$null(::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>();
}
::carla_rust::sensor::data::FfiGnssMeasurement *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiGnssMeasurement$uninit(::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiGnssMeasurement *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiGnssMeasurement *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiGnssMeasurement>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiGnssMeasurement$clone(::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>(self);
}
::carla_rust::sensor::data::FfiGnssMeasurement const *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiGnssMeasurement$get(::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiGnssMeasurement$drop(::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiGnssMeasurement$null(::std::weak_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>();
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiGnssMeasurement$clone(::std::weak_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> const &self, ::std::weak_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>(self);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiGnssMeasurement$downgrade(::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> const &shared, ::std::weak_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiGnssMeasurement$upgrade(::std::weak_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> const &weak, ::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::sensor::data::FfiGnssMeasurement>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiGnssMeasurement$drop(::std::weak_ptr<::carla_rust::sensor::data::FfiGnssMeasurement> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::sensor::data::FfiImuMeasurement>::value, "definition of `::carla_rust::sensor::data::FfiImuMeasurement` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::sensor::data::FfiImuMeasurement>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::sensor::data::FfiImuMeasurement>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiImuMeasurement$null(::std::unique_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiImuMeasurement>();
}
::carla_rust::sensor::data::FfiImuMeasurement *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiImuMeasurement$uninit(::std::unique_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiImuMeasurement *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiImuMeasurement *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiImuMeasurement>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiImuMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiImuMeasurement$raw(::std::unique_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *ptr, ::carla_rust::sensor::data::FfiImuMeasurement *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::data::FfiImuMeasurement>(raw);
}
::carla_rust::sensor::data::FfiImuMeasurement const *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiImuMeasurement$get(::std::unique_ptr<::carla_rust::sensor::data::FfiImuMeasurement> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::sensor::data::FfiImuMeasurement *cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiImuMeasurement$release(::std::unique_ptr<::carla_rust::sensor::data::FfiImuMeasurement> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$sensor$data$FfiImuMeasurement$drop(::std::unique_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::sensor::data::FfiImuMeasurement>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiImuMeasurement$null(::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement>();
}
::carla_rust::sensor::data::FfiImuMeasurement *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiImuMeasurement$uninit(::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *ptr) noexcept {
  ::carla_rust::sensor::data::FfiImuMeasurement *uninit = reinterpret_cast<::carla_rust::sensor::data::FfiImuMeasurement *>(new ::rust::MaybeUninit<::carla_rust::sensor::data::FfiImuMeasurement>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiImuMeasurement$clone(::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement> const &self, ::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement>(self);
}
::carla_rust::sensor::data::FfiImuMeasurement const *cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiImuMeasurement$get(::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$sensor$data$FfiImuMeasurement$drop(::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::sensor::data::FfiImuMeasurement>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::sensor::data::FfiImuMeasurement>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiImuMeasurement$null(::std::weak_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiImuMeasurement>();
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiImuMeasurement$clone(::std::weak_ptr<::carla_rust::sensor::data::FfiImuMeasurement> const &self, ::std::weak_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::data::FfiImuMeasurement>(self);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiImuMeasurement$downgrade(::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement> const &shared, ::std::weak_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::sensor::data::FfiImuMeasurement>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiImuMeasurement$upgrade(::std::weak_ptr<::carla_rust::sensor::data::FfiImuMeasurement> const &weak, ::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::sensor::data::FfiImuMeasurement>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$sensor$data$FfiImuMeasurement$drop(::std::weak_ptr<::carla_rust::sensor::data::FfiImuMeasurement> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::sensor::FfiSensorData>::value, "definition of `::carla_rust::sensor::FfiSensorData` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::sensor::FfiSensorData>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::sensor::FfiSensorData>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$sensor$FfiSensorData$null(::std::unique_ptr<::carla_rust::sensor::FfiSensorData> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::FfiSensorData>();
}
::carla_rust::sensor::FfiSensorData *cxxbridge1$unique_ptr$carla_rust$sensor$FfiSensorData$uninit(::std::unique_ptr<::carla_rust::sensor::FfiSensorData> *ptr) noexcept {
  ::carla_rust::sensor::FfiSensorData *uninit = reinterpret_cast<::carla_rust::sensor::FfiSensorData *>(new ::rust::MaybeUninit<::carla_rust::sensor::FfiSensorData>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::FfiSensorData>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$sensor$FfiSensorData$raw(::std::unique_ptr<::carla_rust::sensor::FfiSensorData> *ptr, ::carla_rust::sensor::FfiSensorData *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::sensor::FfiSensorData>(raw);
}
::carla_rust::sensor::FfiSensorData const *cxxbridge1$unique_ptr$carla_rust$sensor$FfiSensorData$get(::std::unique_ptr<::carla_rust::sensor::FfiSensorData> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::sensor::FfiSensorData *cxxbridge1$unique_ptr$carla_rust$sensor$FfiSensorData$release(::std::unique_ptr<::carla_rust::sensor::FfiSensorData> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$sensor$FfiSensorData$drop(::std::unique_ptr<::carla_rust::sensor::FfiSensorData> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::sensor::FfiSensorData>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::sensor::FfiSensorData>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::sensor::FfiSensorData>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$sensor$FfiSensorData$null(::std::shared_ptr<::carla_rust::sensor::FfiSensorData> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::FfiSensorData>();
}
::carla_rust::sensor::FfiSensorData *cxxbridge1$shared_ptr$carla_rust$sensor$FfiSensorData$uninit(::std::shared_ptr<::carla_rust::sensor::FfiSensorData> *ptr) noexcept {
  ::carla_rust::sensor::FfiSensorData *uninit = reinterpret_cast<::carla_rust::sensor::FfiSensorData *>(new ::rust::MaybeUninit<::carla_rust::sensor::FfiSensorData>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::FfiSensorData>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$sensor$FfiSensorData$clone(::std::shared_ptr<::carla_rust::sensor::FfiSensorData> const &self, ::std::shared_ptr<::carla_rust::sensor::FfiSensorData> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::sensor::FfiSensorData>(self);
}
::carla_rust::sensor::FfiSensorData const *cxxbridge1$shared_ptr$carla_rust$sensor$FfiSensorData$get(::std::shared_ptr<::carla_rust::sensor::FfiSensorData> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$sensor$FfiSensorData$drop(::std::shared_ptr<::carla_rust::sensor::FfiSensorData> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::sensor::FfiSensorData>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::sensor::FfiSensorData>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$sensor$FfiSensorData$null(::std::weak_ptr<::carla_rust::sensor::FfiSensorData> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::FfiSensorData>();
}
void cxxbridge1$weak_ptr$carla_rust$sensor$FfiSensorData$clone(::std::weak_ptr<::carla_rust::sensor::FfiSensorData> const &self, ::std::weak_ptr<::carla_rust::sensor::FfiSensorData> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::sensor::FfiSensorData>(self);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$FfiSensorData$downgrade(::std::shared_ptr<::carla_rust::sensor::FfiSensorData> const &shared, ::std::weak_ptr<::carla_rust::sensor::FfiSensorData> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::sensor::FfiSensorData>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$sensor$FfiSensorData$upgrade(::std::weak_ptr<::carla_rust::sensor::FfiSensorData> const &weak, ::std::shared_ptr<::carla_rust::sensor::FfiSensorData> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::sensor::FfiSensorData>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$sensor$FfiSensorData$drop(::std::weak_ptr<::carla_rust::sensor::FfiSensorData> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiActorAttributeValue>::value, "definition of `::carla_rust::client::FfiActorAttributeValue` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValue>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValue>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiActorAttributeValue$null(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValue> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActorAttributeValue>();
}
::carla_rust::client::FfiActorAttributeValue *cxxbridge1$unique_ptr$carla_rust$client$FfiActorAttributeValue$uninit(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValue> *ptr) noexcept {
  ::carla_rust::client::FfiActorAttributeValue *uninit = reinterpret_cast<::carla_rust::client::FfiActorAttributeValue *>(new ::rust::MaybeUninit<::carla_rust::client::FfiActorAttributeValue>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActorAttributeValue>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiActorAttributeValue$raw(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValue> *ptr, ::carla_rust::client::FfiActorAttributeValue *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActorAttributeValue>(raw);
}
::carla_rust::client::FfiActorAttributeValue const *cxxbridge1$unique_ptr$carla_rust$client$FfiActorAttributeValue$get(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValue> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiActorAttributeValue *cxxbridge1$unique_ptr$carla_rust$client$FfiActorAttributeValue$release(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValue> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiActorAttributeValue$drop(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValue> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiActorAttributeValue>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiActorAttributeValue$null(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue>();
}
::carla_rust::client::FfiActorAttributeValue *cxxbridge1$shared_ptr$carla_rust$client$FfiActorAttributeValue$uninit(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue> *ptr) noexcept {
  ::carla_rust::client::FfiActorAttributeValue *uninit = reinterpret_cast<::carla_rust::client::FfiActorAttributeValue *>(new ::rust::MaybeUninit<::carla_rust::client::FfiActorAttributeValue>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiActorAttributeValue$clone(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue> const &self, ::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue>(self);
}
::carla_rust::client::FfiActorAttributeValue const *cxxbridge1$shared_ptr$carla_rust$client$FfiActorAttributeValue$get(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiActorAttributeValue$drop(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiActorAttributeValue>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiActorAttributeValue>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorAttributeValue$null(::std::weak_ptr<::carla_rust::client::FfiActorAttributeValue> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiActorAttributeValue>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorAttributeValue$clone(::std::weak_ptr<::carla_rust::client::FfiActorAttributeValue> const &self, ::std::weak_ptr<::carla_rust::client::FfiActorAttributeValue> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiActorAttributeValue>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorAttributeValue$downgrade(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue> const &shared, ::std::weak_ptr<::carla_rust::client::FfiActorAttributeValue> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiActorAttributeValue>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorAttributeValue$upgrade(::std::weak_ptr<::carla_rust::client::FfiActorAttributeValue> const &weak, ::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiActorAttributeValue>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorAttributeValue$drop(::std::weak_ptr<::carla_rust::client::FfiActorAttributeValue> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiActorAttributeValue> *cxxbridge1$std$vector$carla_rust$client$FfiActorAttributeValue$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiActorAttributeValue>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiActorAttributeValue$size(::std::vector<::carla_rust::client::FfiActorAttributeValue> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiActorAttributeValue *cxxbridge1$std$vector$carla_rust$client$FfiActorAttributeValue$get_unchecked(::std::vector<::carla_rust::client::FfiActorAttributeValue> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiActorAttributeValue$push_back(::std::vector<::carla_rust::client::FfiActorAttributeValue> *v, ::carla_rust::client::FfiActorAttributeValue *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiActorAttributeValue$pop_back(::std::vector<::carla_rust::client::FfiActorAttributeValue> *v, ::carla_rust::client::FfiActorAttributeValue *out) noexcept {
  ::new (out) ::carla_rust::client::FfiActorAttributeValue(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiActorAttributeValue>>::value, "definition of `::std::vector<::carla_rust::client::FfiActorAttributeValue>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorAttributeValue>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorAttributeValue>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiActorAttributeValue$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorAttributeValue>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorAttributeValue>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiActorAttributeValue$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorAttributeValue>> *ptr, ::std::vector<::carla_rust::client::FfiActorAttributeValue> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorAttributeValue>>(raw);
}
::std::vector<::carla_rust::client::FfiActorAttributeValue> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiActorAttributeValue$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorAttributeValue>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiActorAttributeValue> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiActorAttributeValue$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorAttributeValue>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiActorAttributeValue$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorAttributeValue>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiActorAttributeValue>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiActorAttributeValueList>::value, "definition of `::carla_rust::client::FfiActorAttributeValueList` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValueList>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValueList>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiActorAttributeValueList$null(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValueList> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActorAttributeValueList>();
}
::carla_rust::client::FfiActorAttributeValueList *cxxbridge1$unique_ptr$carla_rust$client$FfiActorAttributeValueList$uninit(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValueList> *ptr) noexcept {
  ::carla_rust::client::FfiActorAttributeValueList *uninit = reinterpret_cast<::carla_rust::client::FfiActorAttributeValueList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiActorAttributeValueList>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActorAttributeValueList>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiActorAttributeValueList$raw(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValueList> *ptr, ::carla_rust::client::FfiActorAttributeValueList *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActorAttributeValueList>(raw);
}
::carla_rust::client::FfiActorAttributeValueList const *cxxbridge1$unique_ptr$carla_rust$client$FfiActorAttributeValueList$get(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValueList> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiActorAttributeValueList *cxxbridge1$unique_ptr$carla_rust$client$FfiActorAttributeValueList$release(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValueList> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiActorAttributeValueList$drop(::std::unique_ptr<::carla_rust::client::FfiActorAttributeValueList> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiActorAttributeValueList>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiActorAttributeValueList$null(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList>();
}
::carla_rust::client::FfiActorAttributeValueList *cxxbridge1$shared_ptr$carla_rust$client$FfiActorAttributeValueList$uninit(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList> *ptr) noexcept {
  ::carla_rust::client::FfiActorAttributeValueList *uninit = reinterpret_cast<::carla_rust::client::FfiActorAttributeValueList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiActorAttributeValueList>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiActorAttributeValueList$clone(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList> const &self, ::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList>(self);
}
::carla_rust::client::FfiActorAttributeValueList const *cxxbridge1$shared_ptr$carla_rust$client$FfiActorAttributeValueList$get(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiActorAttributeValueList$drop(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiActorAttributeValueList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiActorAttributeValueList>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorAttributeValueList$null(::std::weak_ptr<::carla_rust::client::FfiActorAttributeValueList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiActorAttributeValueList>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorAttributeValueList$clone(::std::weak_ptr<::carla_rust::client::FfiActorAttributeValueList> const &self, ::std::weak_ptr<::carla_rust::client::FfiActorAttributeValueList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiActorAttributeValueList>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorAttributeValueList$downgrade(::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList> const &shared, ::std::weak_ptr<::carla_rust::client::FfiActorAttributeValueList> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiActorAttributeValueList>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorAttributeValueList$upgrade(::std::weak_ptr<::carla_rust::client::FfiActorAttributeValueList> const &weak, ::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiActorAttributeValueList>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorAttributeValueList$drop(::std::weak_ptr<::carla_rust::client::FfiActorAttributeValueList> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiActor>::value, "definition of `::carla_rust::client::FfiActor` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiActor>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiActor>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiActor$null(::std::unique_ptr<::carla_rust::client::FfiActor> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActor>();
}
::carla_rust::client::FfiActor *cxxbridge1$unique_ptr$carla_rust$client$FfiActor$uninit(::std::unique_ptr<::carla_rust::client::FfiActor> *ptr) noexcept {
  ::carla_rust::client::FfiActor *uninit = reinterpret_cast<::carla_rust::client::FfiActor *>(new ::rust::MaybeUninit<::carla_rust::client::FfiActor>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActor>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiActor$raw(::std::unique_ptr<::carla_rust::client::FfiActor> *ptr, ::carla_rust::client::FfiActor *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActor>(raw);
}
::carla_rust::client::FfiActor const *cxxbridge1$unique_ptr$carla_rust$client$FfiActor$get(::std::unique_ptr<::carla_rust::client::FfiActor> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiActor *cxxbridge1$unique_ptr$carla_rust$client$FfiActor$release(::std::unique_ptr<::carla_rust::client::FfiActor> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiActor$drop(::std::unique_ptr<::carla_rust::client::FfiActor> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiActor>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiActor>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiActor>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiActor$null(::std::shared_ptr<::carla_rust::client::FfiActor> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActor>();
}
::carla_rust::client::FfiActor *cxxbridge1$shared_ptr$carla_rust$client$FfiActor$uninit(::std::shared_ptr<::carla_rust::client::FfiActor> *ptr) noexcept {
  ::carla_rust::client::FfiActor *uninit = reinterpret_cast<::carla_rust::client::FfiActor *>(new ::rust::MaybeUninit<::carla_rust::client::FfiActor>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActor>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiActor$clone(::std::shared_ptr<::carla_rust::client::FfiActor> const &self, ::std::shared_ptr<::carla_rust::client::FfiActor> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActor>(self);
}
::carla_rust::client::FfiActor const *cxxbridge1$shared_ptr$carla_rust$client$FfiActor$get(::std::shared_ptr<::carla_rust::client::FfiActor> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiActor$drop(::std::shared_ptr<::carla_rust::client::FfiActor> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiActor>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiActor>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiActor$null(::std::weak_ptr<::carla_rust::client::FfiActor> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiActor>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActor$clone(::std::weak_ptr<::carla_rust::client::FfiActor> const &self, ::std::weak_ptr<::carla_rust::client::FfiActor> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiActor>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActor$downgrade(::std::shared_ptr<::carla_rust::client::FfiActor> const &shared, ::std::weak_ptr<::carla_rust::client::FfiActor> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiActor>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActor$upgrade(::std::weak_ptr<::carla_rust::client::FfiActor> const &weak, ::std::shared_ptr<::carla_rust::client::FfiActor> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiActor>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActor$drop(::std::weak_ptr<::carla_rust::client::FfiActor> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::client::ListenCallback>::value, "definition of `::carla_rust::client::ListenCallback` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::ListenCallback>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::ListenCallback>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$ListenCallback$null(::std::unique_ptr<::carla_rust::client::ListenCallback> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::ListenCallback>();
}
::carla_rust::client::ListenCallback *cxxbridge1$unique_ptr$carla_rust$client$ListenCallback$uninit(::std::unique_ptr<::carla_rust::client::ListenCallback> *ptr) noexcept {
  ::carla_rust::client::ListenCallback *uninit = reinterpret_cast<::carla_rust::client::ListenCallback *>(new ::rust::MaybeUninit<::carla_rust::client::ListenCallback>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::ListenCallback>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$ListenCallback$raw(::std::unique_ptr<::carla_rust::client::ListenCallback> *ptr, ::carla_rust::client::ListenCallback *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::ListenCallback>(raw);
}
::carla_rust::client::ListenCallback const *cxxbridge1$unique_ptr$carla_rust$client$ListenCallback$get(::std::unique_ptr<::carla_rust::client::ListenCallback> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::ListenCallback *cxxbridge1$unique_ptr$carla_rust$client$ListenCallback$release(::std::unique_ptr<::carla_rust::client::ListenCallback> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$ListenCallback$drop(::std::unique_ptr<::carla_rust::client::ListenCallback> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::ListenCallback>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::ListenCallback>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::ListenCallback>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$ListenCallback$null(::std::shared_ptr<::carla_rust::client::ListenCallback> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::ListenCallback>();
}
::carla_rust::client::ListenCallback *cxxbridge1$shared_ptr$carla_rust$client$ListenCallback$uninit(::std::shared_ptr<::carla_rust::client::ListenCallback> *ptr) noexcept {
  ::carla_rust::client::ListenCallback *uninit = reinterpret_cast<::carla_rust::client::ListenCallback *>(new ::rust::MaybeUninit<::carla_rust::client::ListenCallback>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::ListenCallback>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$ListenCallback$clone(::std::shared_ptr<::carla_rust::client::ListenCallback> const &self, ::std::shared_ptr<::carla_rust::client::ListenCallback> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::ListenCallback>(self);
}
::carla_rust::client::ListenCallback const *cxxbridge1$shared_ptr$carla_rust$client$ListenCallback$get(::std::shared_ptr<::carla_rust::client::ListenCallback> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$ListenCallback$drop(::std::shared_ptr<::carla_rust::client::ListenCallback> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::ListenCallback>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::ListenCallback>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$ListenCallback$null(::std::weak_ptr<::carla_rust::client::ListenCallback> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::ListenCallback>();
}
void cxxbridge1$weak_ptr$carla_rust$client$ListenCallback$clone(::std::weak_ptr<::carla_rust::client::ListenCallback> const &self, ::std::weak_ptr<::carla_rust::client::ListenCallback> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::ListenCallback>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$ListenCallback$downgrade(::std::shared_ptr<::carla_rust::client::ListenCallback> const &shared, ::std::weak_ptr<::carla_rust::client::ListenCallback> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::ListenCallback>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$ListenCallback$upgrade(::std::weak_ptr<::carla_rust::client::ListenCallback> const &weak, ::std::shared_ptr<::carla_rust::client::ListenCallback> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::ListenCallback>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$ListenCallback$drop(::std::weak_ptr<::carla_rust::client::ListenCallback> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::ListenCallback> *cxxbridge1$std$vector$carla_rust$client$ListenCallback$new() noexcept {
  return new ::std::vector<::carla_rust::client::ListenCallback>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$ListenCallback$size(::std::vector<::carla_rust::client::ListenCallback> const &s) noexcept {
  return s.size();
}
::carla_rust::client::ListenCallback *cxxbridge1$std$vector$carla_rust$client$ListenCallback$get_unchecked(::std::vector<::carla_rust::client::ListenCallback> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$ListenCallback$push_back(::std::vector<::carla_rust::client::ListenCallback> *v, ::carla_rust::client::ListenCallback *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$ListenCallback$pop_back(::std::vector<::carla_rust::client::ListenCallback> *v, ::carla_rust::client::ListenCallback *out) noexcept {
  ::new (out) ::carla_rust::client::ListenCallback(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::ListenCallback>>::value, "definition of `::std::vector<::carla_rust::client::ListenCallback>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::ListenCallback>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::ListenCallback>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$ListenCallback$null(::std::unique_ptr<::std::vector<::carla_rust::client::ListenCallback>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::ListenCallback>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$ListenCallback$raw(::std::unique_ptr<::std::vector<::carla_rust::client::ListenCallback>> *ptr, ::std::vector<::carla_rust::client::ListenCallback> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::ListenCallback>>(raw);
}
::std::vector<::carla_rust::client::ListenCallback> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$ListenCallback$get(::std::unique_ptr<::std::vector<::carla_rust::client::ListenCallback>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::ListenCallback> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$ListenCallback$release(::std::unique_ptr<::std::vector<::carla_rust::client::ListenCallback>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$ListenCallback$drop(::std::unique_ptr<::std::vector<::carla_rust::client::ListenCallback>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::ListenCallback>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiWaypointList>::value, "definition of `::carla_rust::client::FfiWaypointList` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiWaypointList>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiWaypointList>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiWaypointList$null(::std::unique_ptr<::carla_rust::client::FfiWaypointList> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWaypointList>();
}
::carla_rust::client::FfiWaypointList *cxxbridge1$unique_ptr$carla_rust$client$FfiWaypointList$uninit(::std::unique_ptr<::carla_rust::client::FfiWaypointList> *ptr) noexcept {
  ::carla_rust::client::FfiWaypointList *uninit = reinterpret_cast<::carla_rust::client::FfiWaypointList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiWaypointList>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWaypointList>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiWaypointList$raw(::std::unique_ptr<::carla_rust::client::FfiWaypointList> *ptr, ::carla_rust::client::FfiWaypointList *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWaypointList>(raw);
}
::carla_rust::client::FfiWaypointList const *cxxbridge1$unique_ptr$carla_rust$client$FfiWaypointList$get(::std::unique_ptr<::carla_rust::client::FfiWaypointList> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiWaypointList *cxxbridge1$unique_ptr$carla_rust$client$FfiWaypointList$release(::std::unique_ptr<::carla_rust::client::FfiWaypointList> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiWaypointList$drop(::std::unique_ptr<::carla_rust::client::FfiWaypointList> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiWaypointList>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiWaypointList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiWaypointList>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiWaypointList$null(::std::shared_ptr<::carla_rust::client::FfiWaypointList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWaypointList>();
}
::carla_rust::client::FfiWaypointList *cxxbridge1$shared_ptr$carla_rust$client$FfiWaypointList$uninit(::std::shared_ptr<::carla_rust::client::FfiWaypointList> *ptr) noexcept {
  ::carla_rust::client::FfiWaypointList *uninit = reinterpret_cast<::carla_rust::client::FfiWaypointList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiWaypointList>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWaypointList>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiWaypointList$clone(::std::shared_ptr<::carla_rust::client::FfiWaypointList> const &self, ::std::shared_ptr<::carla_rust::client::FfiWaypointList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWaypointList>(self);
}
::carla_rust::client::FfiWaypointList const *cxxbridge1$shared_ptr$carla_rust$client$FfiWaypointList$get(::std::shared_ptr<::carla_rust::client::FfiWaypointList> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiWaypointList$drop(::std::shared_ptr<::carla_rust::client::FfiWaypointList> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiWaypointList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiWaypointList>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypointList$null(::std::weak_ptr<::carla_rust::client::FfiWaypointList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiWaypointList>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypointList$clone(::std::weak_ptr<::carla_rust::client::FfiWaypointList> const &self, ::std::weak_ptr<::carla_rust::client::FfiWaypointList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiWaypointList>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypointList$downgrade(::std::shared_ptr<::carla_rust::client::FfiWaypointList> const &shared, ::std::weak_ptr<::carla_rust::client::FfiWaypointList> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiWaypointList>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypointList$upgrade(::std::weak_ptr<::carla_rust::client::FfiWaypointList> const &weak, ::std::shared_ptr<::carla_rust::client::FfiWaypointList> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiWaypointList>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypointList$drop(::std::weak_ptr<::carla_rust::client::FfiWaypointList> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiWaypointList> *cxxbridge1$std$vector$carla_rust$client$FfiWaypointList$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiWaypointList>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiWaypointList$size(::std::vector<::carla_rust::client::FfiWaypointList> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiWaypointList *cxxbridge1$std$vector$carla_rust$client$FfiWaypointList$get_unchecked(::std::vector<::carla_rust::client::FfiWaypointList> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiWaypointList$push_back(::std::vector<::carla_rust::client::FfiWaypointList> *v, ::carla_rust::client::FfiWaypointList *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiWaypointList$pop_back(::std::vector<::carla_rust::client::FfiWaypointList> *v, ::carla_rust::client::FfiWaypointList *out) noexcept {
  ::new (out) ::carla_rust::client::FfiWaypointList(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiWaypointList>>::value, "definition of `::std::vector<::carla_rust::client::FfiWaypointList>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointList>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointList>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWaypointList$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointList>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointList>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWaypointList$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointList>> *ptr, ::std::vector<::carla_rust::client::FfiWaypointList> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointList>>(raw);
}
::std::vector<::carla_rust::client::FfiWaypointList> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWaypointList$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointList>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiWaypointList> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWaypointList$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointList>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWaypointList$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointList>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiWaypointList>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiWaypointPair>::value, "definition of `::carla_rust::client::FfiWaypointPair` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiWaypointPair>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiWaypointPair>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiWaypointPair$null(::std::unique_ptr<::carla_rust::client::FfiWaypointPair> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWaypointPair>();
}
::carla_rust::client::FfiWaypointPair *cxxbridge1$unique_ptr$carla_rust$client$FfiWaypointPair$uninit(::std::unique_ptr<::carla_rust::client::FfiWaypointPair> *ptr) noexcept {
  ::carla_rust::client::FfiWaypointPair *uninit = reinterpret_cast<::carla_rust::client::FfiWaypointPair *>(new ::rust::MaybeUninit<::carla_rust::client::FfiWaypointPair>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWaypointPair>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiWaypointPair$raw(::std::unique_ptr<::carla_rust::client::FfiWaypointPair> *ptr, ::carla_rust::client::FfiWaypointPair *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWaypointPair>(raw);
}
::carla_rust::client::FfiWaypointPair const *cxxbridge1$unique_ptr$carla_rust$client$FfiWaypointPair$get(::std::unique_ptr<::carla_rust::client::FfiWaypointPair> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiWaypointPair *cxxbridge1$unique_ptr$carla_rust$client$FfiWaypointPair$release(::std::unique_ptr<::carla_rust::client::FfiWaypointPair> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiWaypointPair$drop(::std::unique_ptr<::carla_rust::client::FfiWaypointPair> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiWaypointPair>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiWaypointPair>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiWaypointPair>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiWaypointPair$null(::std::shared_ptr<::carla_rust::client::FfiWaypointPair> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWaypointPair>();
}
::carla_rust::client::FfiWaypointPair *cxxbridge1$shared_ptr$carla_rust$client$FfiWaypointPair$uninit(::std::shared_ptr<::carla_rust::client::FfiWaypointPair> *ptr) noexcept {
  ::carla_rust::client::FfiWaypointPair *uninit = reinterpret_cast<::carla_rust::client::FfiWaypointPair *>(new ::rust::MaybeUninit<::carla_rust::client::FfiWaypointPair>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWaypointPair>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiWaypointPair$clone(::std::shared_ptr<::carla_rust::client::FfiWaypointPair> const &self, ::std::shared_ptr<::carla_rust::client::FfiWaypointPair> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWaypointPair>(self);
}
::carla_rust::client::FfiWaypointPair const *cxxbridge1$shared_ptr$carla_rust$client$FfiWaypointPair$get(::std::shared_ptr<::carla_rust::client::FfiWaypointPair> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiWaypointPair$drop(::std::shared_ptr<::carla_rust::client::FfiWaypointPair> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiWaypointPair>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiWaypointPair>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypointPair$null(::std::weak_ptr<::carla_rust::client::FfiWaypointPair> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiWaypointPair>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypointPair$clone(::std::weak_ptr<::carla_rust::client::FfiWaypointPair> const &self, ::std::weak_ptr<::carla_rust::client::FfiWaypointPair> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiWaypointPair>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypointPair$downgrade(::std::shared_ptr<::carla_rust::client::FfiWaypointPair> const &shared, ::std::weak_ptr<::carla_rust::client::FfiWaypointPair> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiWaypointPair>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypointPair$upgrade(::std::weak_ptr<::carla_rust::client::FfiWaypointPair> const &weak, ::std::shared_ptr<::carla_rust::client::FfiWaypointPair> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiWaypointPair>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypointPair$drop(::std::weak_ptr<::carla_rust::client::FfiWaypointPair> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiWaypointPair> *cxxbridge1$std$vector$carla_rust$client$FfiWaypointPair$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiWaypointPair>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiWaypointPair$size(::std::vector<::carla_rust::client::FfiWaypointPair> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiWaypointPair *cxxbridge1$std$vector$carla_rust$client$FfiWaypointPair$get_unchecked(::std::vector<::carla_rust::client::FfiWaypointPair> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiWaypointPair$push_back(::std::vector<::carla_rust::client::FfiWaypointPair> *v, ::carla_rust::client::FfiWaypointPair *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiWaypointPair$pop_back(::std::vector<::carla_rust::client::FfiWaypointPair> *v, ::carla_rust::client::FfiWaypointPair *out) noexcept {
  ::new (out) ::carla_rust::client::FfiWaypointPair(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiWaypointPair>>::value, "definition of `::std::vector<::carla_rust::client::FfiWaypointPair>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointPair>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointPair>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWaypointPair$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointPair>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointPair>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWaypointPair$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointPair>> *ptr, ::std::vector<::carla_rust::client::FfiWaypointPair> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointPair>>(raw);
}
::std::vector<::carla_rust::client::FfiWaypointPair> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWaypointPair$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointPair>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiWaypointPair> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWaypointPair$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointPair>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWaypointPair$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWaypointPair>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiWaypointPair>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiJunction>::value, "definition of `::carla_rust::client::FfiJunction` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiJunction>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiJunction>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiJunction$null(::std::unique_ptr<::carla_rust::client::FfiJunction> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiJunction>();
}
::carla_rust::client::FfiJunction *cxxbridge1$unique_ptr$carla_rust$client$FfiJunction$uninit(::std::unique_ptr<::carla_rust::client::FfiJunction> *ptr) noexcept {
  ::carla_rust::client::FfiJunction *uninit = reinterpret_cast<::carla_rust::client::FfiJunction *>(new ::rust::MaybeUninit<::carla_rust::client::FfiJunction>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiJunction>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiJunction$raw(::std::unique_ptr<::carla_rust::client::FfiJunction> *ptr, ::carla_rust::client::FfiJunction *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiJunction>(raw);
}
::carla_rust::client::FfiJunction const *cxxbridge1$unique_ptr$carla_rust$client$FfiJunction$get(::std::unique_ptr<::carla_rust::client::FfiJunction> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiJunction *cxxbridge1$unique_ptr$carla_rust$client$FfiJunction$release(::std::unique_ptr<::carla_rust::client::FfiJunction> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiJunction$drop(::std::unique_ptr<::carla_rust::client::FfiJunction> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiJunction>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiJunction>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiJunction>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiJunction$null(::std::shared_ptr<::carla_rust::client::FfiJunction> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiJunction>();
}
::carla_rust::client::FfiJunction *cxxbridge1$shared_ptr$carla_rust$client$FfiJunction$uninit(::std::shared_ptr<::carla_rust::client::FfiJunction> *ptr) noexcept {
  ::carla_rust::client::FfiJunction *uninit = reinterpret_cast<::carla_rust::client::FfiJunction *>(new ::rust::MaybeUninit<::carla_rust::client::FfiJunction>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiJunction>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiJunction$clone(::std::shared_ptr<::carla_rust::client::FfiJunction> const &self, ::std::shared_ptr<::carla_rust::client::FfiJunction> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiJunction>(self);
}
::carla_rust::client::FfiJunction const *cxxbridge1$shared_ptr$carla_rust$client$FfiJunction$get(::std::shared_ptr<::carla_rust::client::FfiJunction> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiJunction$drop(::std::shared_ptr<::carla_rust::client::FfiJunction> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiJunction>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiJunction>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiJunction$null(::std::weak_ptr<::carla_rust::client::FfiJunction> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiJunction>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiJunction$clone(::std::weak_ptr<::carla_rust::client::FfiJunction> const &self, ::std::weak_ptr<::carla_rust::client::FfiJunction> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiJunction>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiJunction$downgrade(::std::shared_ptr<::carla_rust::client::FfiJunction> const &shared, ::std::weak_ptr<::carla_rust::client::FfiJunction> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiJunction>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiJunction$upgrade(::std::weak_ptr<::carla_rust::client::FfiJunction> const &weak, ::std::shared_ptr<::carla_rust::client::FfiJunction> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiJunction>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiJunction$drop(::std::weak_ptr<::carla_rust::client::FfiJunction> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiLandmarkList>::value, "definition of `::carla_rust::client::FfiLandmarkList` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiLandmarkList>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiLandmarkList>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiLandmarkList$null(::std::unique_ptr<::carla_rust::client::FfiLandmarkList> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLandmarkList>();
}
::carla_rust::client::FfiLandmarkList *cxxbridge1$unique_ptr$carla_rust$client$FfiLandmarkList$uninit(::std::unique_ptr<::carla_rust::client::FfiLandmarkList> *ptr) noexcept {
  ::carla_rust::client::FfiLandmarkList *uninit = reinterpret_cast<::carla_rust::client::FfiLandmarkList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiLandmarkList>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLandmarkList>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiLandmarkList$raw(::std::unique_ptr<::carla_rust::client::FfiLandmarkList> *ptr, ::carla_rust::client::FfiLandmarkList *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLandmarkList>(raw);
}
::carla_rust::client::FfiLandmarkList const *cxxbridge1$unique_ptr$carla_rust$client$FfiLandmarkList$get(::std::unique_ptr<::carla_rust::client::FfiLandmarkList> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiLandmarkList *cxxbridge1$unique_ptr$carla_rust$client$FfiLandmarkList$release(::std::unique_ptr<::carla_rust::client::FfiLandmarkList> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiLandmarkList$drop(::std::unique_ptr<::carla_rust::client::FfiLandmarkList> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiLandmarkList>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiLandmarkList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiLandmarkList>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiLandmarkList$null(::std::shared_ptr<::carla_rust::client::FfiLandmarkList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLandmarkList>();
}
::carla_rust::client::FfiLandmarkList *cxxbridge1$shared_ptr$carla_rust$client$FfiLandmarkList$uninit(::std::shared_ptr<::carla_rust::client::FfiLandmarkList> *ptr) noexcept {
  ::carla_rust::client::FfiLandmarkList *uninit = reinterpret_cast<::carla_rust::client::FfiLandmarkList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiLandmarkList>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLandmarkList>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiLandmarkList$clone(::std::shared_ptr<::carla_rust::client::FfiLandmarkList> const &self, ::std::shared_ptr<::carla_rust::client::FfiLandmarkList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLandmarkList>(self);
}
::carla_rust::client::FfiLandmarkList const *cxxbridge1$shared_ptr$carla_rust$client$FfiLandmarkList$get(::std::shared_ptr<::carla_rust::client::FfiLandmarkList> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiLandmarkList$drop(::std::shared_ptr<::carla_rust::client::FfiLandmarkList> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiLandmarkList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiLandmarkList>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiLandmarkList$null(::std::weak_ptr<::carla_rust::client::FfiLandmarkList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiLandmarkList>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLandmarkList$clone(::std::weak_ptr<::carla_rust::client::FfiLandmarkList> const &self, ::std::weak_ptr<::carla_rust::client::FfiLandmarkList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiLandmarkList>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLandmarkList$downgrade(::std::shared_ptr<::carla_rust::client::FfiLandmarkList> const &shared, ::std::weak_ptr<::carla_rust::client::FfiLandmarkList> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiLandmarkList>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLandmarkList$upgrade(::std::weak_ptr<::carla_rust::client::FfiLandmarkList> const &weak, ::std::shared_ptr<::carla_rust::client::FfiLandmarkList> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiLandmarkList>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLandmarkList$drop(::std::weak_ptr<::carla_rust::client::FfiLandmarkList> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiLandmarkList> *cxxbridge1$std$vector$carla_rust$client$FfiLandmarkList$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiLandmarkList>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiLandmarkList$size(::std::vector<::carla_rust::client::FfiLandmarkList> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiLandmarkList *cxxbridge1$std$vector$carla_rust$client$FfiLandmarkList$get_unchecked(::std::vector<::carla_rust::client::FfiLandmarkList> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiLandmarkList$push_back(::std::vector<::carla_rust::client::FfiLandmarkList> *v, ::carla_rust::client::FfiLandmarkList *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiLandmarkList$pop_back(::std::vector<::carla_rust::client::FfiLandmarkList> *v, ::carla_rust::client::FfiLandmarkList *out) noexcept {
  ::new (out) ::carla_rust::client::FfiLandmarkList(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiLandmarkList>>::value, "definition of `::std::vector<::carla_rust::client::FfiLandmarkList>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLandmarkList>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLandmarkList>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLandmarkList$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLandmarkList>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiLandmarkList>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLandmarkList$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLandmarkList>> *ptr, ::std::vector<::carla_rust::client::FfiLandmarkList> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiLandmarkList>>(raw);
}
::std::vector<::carla_rust::client::FfiLandmarkList> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLandmarkList$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLandmarkList>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiLandmarkList> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLandmarkList$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLandmarkList>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLandmarkList$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLandmarkList>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiLandmarkList>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiWaypoint>::value, "definition of `::carla_rust::client::FfiWaypoint` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiWaypoint>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiWaypoint>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiWaypoint$null(::std::unique_ptr<::carla_rust::client::FfiWaypoint> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWaypoint>();
}
::carla_rust::client::FfiWaypoint *cxxbridge1$unique_ptr$carla_rust$client$FfiWaypoint$uninit(::std::unique_ptr<::carla_rust::client::FfiWaypoint> *ptr) noexcept {
  ::carla_rust::client::FfiWaypoint *uninit = reinterpret_cast<::carla_rust::client::FfiWaypoint *>(new ::rust::MaybeUninit<::carla_rust::client::FfiWaypoint>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWaypoint>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiWaypoint$raw(::std::unique_ptr<::carla_rust::client::FfiWaypoint> *ptr, ::carla_rust::client::FfiWaypoint *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWaypoint>(raw);
}
::carla_rust::client::FfiWaypoint const *cxxbridge1$unique_ptr$carla_rust$client$FfiWaypoint$get(::std::unique_ptr<::carla_rust::client::FfiWaypoint> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiWaypoint *cxxbridge1$unique_ptr$carla_rust$client$FfiWaypoint$release(::std::unique_ptr<::carla_rust::client::FfiWaypoint> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiWaypoint$drop(::std::unique_ptr<::carla_rust::client::FfiWaypoint> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiWaypoint>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiWaypoint>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiWaypoint>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiWaypoint$null(::std::shared_ptr<::carla_rust::client::FfiWaypoint> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWaypoint>();
}
::carla_rust::client::FfiWaypoint *cxxbridge1$shared_ptr$carla_rust$client$FfiWaypoint$uninit(::std::shared_ptr<::carla_rust::client::FfiWaypoint> *ptr) noexcept {
  ::carla_rust::client::FfiWaypoint *uninit = reinterpret_cast<::carla_rust::client::FfiWaypoint *>(new ::rust::MaybeUninit<::carla_rust::client::FfiWaypoint>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWaypoint>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiWaypoint$clone(::std::shared_ptr<::carla_rust::client::FfiWaypoint> const &self, ::std::shared_ptr<::carla_rust::client::FfiWaypoint> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWaypoint>(self);
}
::carla_rust::client::FfiWaypoint const *cxxbridge1$shared_ptr$carla_rust$client$FfiWaypoint$get(::std::shared_ptr<::carla_rust::client::FfiWaypoint> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiWaypoint$drop(::std::shared_ptr<::carla_rust::client::FfiWaypoint> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiWaypoint>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiWaypoint>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypoint$null(::std::weak_ptr<::carla_rust::client::FfiWaypoint> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiWaypoint>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypoint$clone(::std::weak_ptr<::carla_rust::client::FfiWaypoint> const &self, ::std::weak_ptr<::carla_rust::client::FfiWaypoint> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiWaypoint>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypoint$downgrade(::std::shared_ptr<::carla_rust::client::FfiWaypoint> const &shared, ::std::weak_ptr<::carla_rust::client::FfiWaypoint> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiWaypoint>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypoint$upgrade(::std::weak_ptr<::carla_rust::client::FfiWaypoint> const &weak, ::std::shared_ptr<::carla_rust::client::FfiWaypoint> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiWaypoint>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWaypoint$drop(::std::weak_ptr<::carla_rust::client::FfiWaypoint> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiLandmark>::value, "definition of `::carla_rust::client::FfiLandmark` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiLandmark>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiLandmark>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiLandmark$null(::std::unique_ptr<::carla_rust::client::FfiLandmark> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLandmark>();
}
::carla_rust::client::FfiLandmark *cxxbridge1$unique_ptr$carla_rust$client$FfiLandmark$uninit(::std::unique_ptr<::carla_rust::client::FfiLandmark> *ptr) noexcept {
  ::carla_rust::client::FfiLandmark *uninit = reinterpret_cast<::carla_rust::client::FfiLandmark *>(new ::rust::MaybeUninit<::carla_rust::client::FfiLandmark>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLandmark>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiLandmark$raw(::std::unique_ptr<::carla_rust::client::FfiLandmark> *ptr, ::carla_rust::client::FfiLandmark *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLandmark>(raw);
}
::carla_rust::client::FfiLandmark const *cxxbridge1$unique_ptr$carla_rust$client$FfiLandmark$get(::std::unique_ptr<::carla_rust::client::FfiLandmark> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiLandmark *cxxbridge1$unique_ptr$carla_rust$client$FfiLandmark$release(::std::unique_ptr<::carla_rust::client::FfiLandmark> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiLandmark$drop(::std::unique_ptr<::carla_rust::client::FfiLandmark> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiLandmark>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiLandmark>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiLandmark>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiLandmark$null(::std::shared_ptr<::carla_rust::client::FfiLandmark> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLandmark>();
}
::carla_rust::client::FfiLandmark *cxxbridge1$shared_ptr$carla_rust$client$FfiLandmark$uninit(::std::shared_ptr<::carla_rust::client::FfiLandmark> *ptr) noexcept {
  ::carla_rust::client::FfiLandmark *uninit = reinterpret_cast<::carla_rust::client::FfiLandmark *>(new ::rust::MaybeUninit<::carla_rust::client::FfiLandmark>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLandmark>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiLandmark$clone(::std::shared_ptr<::carla_rust::client::FfiLandmark> const &self, ::std::shared_ptr<::carla_rust::client::FfiLandmark> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLandmark>(self);
}
::carla_rust::client::FfiLandmark const *cxxbridge1$shared_ptr$carla_rust$client$FfiLandmark$get(::std::shared_ptr<::carla_rust::client::FfiLandmark> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiLandmark$drop(::std::shared_ptr<::carla_rust::client::FfiLandmark> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiLandmark>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiLandmark>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiLandmark$null(::std::weak_ptr<::carla_rust::client::FfiLandmark> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiLandmark>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLandmark$clone(::std::weak_ptr<::carla_rust::client::FfiLandmark> const &self, ::std::weak_ptr<::carla_rust::client::FfiLandmark> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiLandmark>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLandmark$downgrade(::std::shared_ptr<::carla_rust::client::FfiLandmark> const &shared, ::std::weak_ptr<::carla_rust::client::FfiLandmark> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiLandmark>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLandmark$upgrade(::std::weak_ptr<::carla_rust::client::FfiLandmark> const &weak, ::std::shared_ptr<::carla_rust::client::FfiLandmark> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiLandmark>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLandmark$drop(::std::weak_ptr<::carla_rust::client::FfiLandmark> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiTransformList>::value, "definition of `::carla_rust::client::FfiTransformList` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiTransformList>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiTransformList>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiTransformList$null(::std::unique_ptr<::carla_rust::client::FfiTransformList> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiTransformList>();
}
::carla_rust::client::FfiTransformList *cxxbridge1$unique_ptr$carla_rust$client$FfiTransformList$uninit(::std::unique_ptr<::carla_rust::client::FfiTransformList> *ptr) noexcept {
  ::carla_rust::client::FfiTransformList *uninit = reinterpret_cast<::carla_rust::client::FfiTransformList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiTransformList>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiTransformList>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiTransformList$raw(::std::unique_ptr<::carla_rust::client::FfiTransformList> *ptr, ::carla_rust::client::FfiTransformList *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiTransformList>(raw);
}
::carla_rust::client::FfiTransformList const *cxxbridge1$unique_ptr$carla_rust$client$FfiTransformList$get(::std::unique_ptr<::carla_rust::client::FfiTransformList> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiTransformList *cxxbridge1$unique_ptr$carla_rust$client$FfiTransformList$release(::std::unique_ptr<::carla_rust::client::FfiTransformList> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiTransformList$drop(::std::unique_ptr<::carla_rust::client::FfiTransformList> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiTransformList>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiTransformList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiTransformList>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiTransformList$null(::std::shared_ptr<::carla_rust::client::FfiTransformList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiTransformList>();
}
::carla_rust::client::FfiTransformList *cxxbridge1$shared_ptr$carla_rust$client$FfiTransformList$uninit(::std::shared_ptr<::carla_rust::client::FfiTransformList> *ptr) noexcept {
  ::carla_rust::client::FfiTransformList *uninit = reinterpret_cast<::carla_rust::client::FfiTransformList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiTransformList>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiTransformList>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiTransformList$clone(::std::shared_ptr<::carla_rust::client::FfiTransformList> const &self, ::std::shared_ptr<::carla_rust::client::FfiTransformList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiTransformList>(self);
}
::carla_rust::client::FfiTransformList const *cxxbridge1$shared_ptr$carla_rust$client$FfiTransformList$get(::std::shared_ptr<::carla_rust::client::FfiTransformList> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiTransformList$drop(::std::shared_ptr<::carla_rust::client::FfiTransformList> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiTransformList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiTransformList>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiTransformList$null(::std::weak_ptr<::carla_rust::client::FfiTransformList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiTransformList>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTransformList$clone(::std::weak_ptr<::carla_rust::client::FfiTransformList> const &self, ::std::weak_ptr<::carla_rust::client::FfiTransformList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiTransformList>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTransformList$downgrade(::std::shared_ptr<::carla_rust::client::FfiTransformList> const &shared, ::std::weak_ptr<::carla_rust::client::FfiTransformList> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiTransformList>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTransformList$upgrade(::std::weak_ptr<::carla_rust::client::FfiTransformList> const &weak, ::std::shared_ptr<::carla_rust::client::FfiTransformList> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiTransformList>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTransformList$drop(::std::weak_ptr<::carla_rust::client::FfiTransformList> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiTransformList> *cxxbridge1$std$vector$carla_rust$client$FfiTransformList$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiTransformList>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiTransformList$size(::std::vector<::carla_rust::client::FfiTransformList> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiTransformList *cxxbridge1$std$vector$carla_rust$client$FfiTransformList$get_unchecked(::std::vector<::carla_rust::client::FfiTransformList> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiTransformList$push_back(::std::vector<::carla_rust::client::FfiTransformList> *v, ::carla_rust::client::FfiTransformList *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiTransformList$pop_back(::std::vector<::carla_rust::client::FfiTransformList> *v, ::carla_rust::client::FfiTransformList *out) noexcept {
  ::new (out) ::carla_rust::client::FfiTransformList(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiTransformList>>::value, "definition of `::std::vector<::carla_rust::client::FfiTransformList>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTransformList>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTransformList>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiTransformList$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTransformList>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiTransformList>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiTransformList$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTransformList>> *ptr, ::std::vector<::carla_rust::client::FfiTransformList> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiTransformList>>(raw);
}
::std::vector<::carla_rust::client::FfiTransformList> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiTransformList$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTransformList>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiTransformList> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiTransformList$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTransformList>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiTransformList$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTransformList>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiTransformList>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiMap>::value, "definition of `::carla_rust::client::FfiMap` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiMap>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiMap>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiMap$null(::std::unique_ptr<::carla_rust::client::FfiMap> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiMap>();
}
::carla_rust::client::FfiMap *cxxbridge1$unique_ptr$carla_rust$client$FfiMap$uninit(::std::unique_ptr<::carla_rust::client::FfiMap> *ptr) noexcept {
  ::carla_rust::client::FfiMap *uninit = reinterpret_cast<::carla_rust::client::FfiMap *>(new ::rust::MaybeUninit<::carla_rust::client::FfiMap>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiMap>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiMap$raw(::std::unique_ptr<::carla_rust::client::FfiMap> *ptr, ::carla_rust::client::FfiMap *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiMap>(raw);
}
::carla_rust::client::FfiMap const *cxxbridge1$unique_ptr$carla_rust$client$FfiMap$get(::std::unique_ptr<::carla_rust::client::FfiMap> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiMap *cxxbridge1$unique_ptr$carla_rust$client$FfiMap$release(::std::unique_ptr<::carla_rust::client::FfiMap> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiMap$drop(::std::unique_ptr<::carla_rust::client::FfiMap> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiMap>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiMap>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiMap>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiMap$null(::std::shared_ptr<::carla_rust::client::FfiMap> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiMap>();
}
::carla_rust::client::FfiMap *cxxbridge1$shared_ptr$carla_rust$client$FfiMap$uninit(::std::shared_ptr<::carla_rust::client::FfiMap> *ptr) noexcept {
  ::carla_rust::client::FfiMap *uninit = reinterpret_cast<::carla_rust::client::FfiMap *>(new ::rust::MaybeUninit<::carla_rust::client::FfiMap>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiMap>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiMap$clone(::std::shared_ptr<::carla_rust::client::FfiMap> const &self, ::std::shared_ptr<::carla_rust::client::FfiMap> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiMap>(self);
}
::carla_rust::client::FfiMap const *cxxbridge1$shared_ptr$carla_rust$client$FfiMap$get(::std::shared_ptr<::carla_rust::client::FfiMap> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiMap$drop(::std::shared_ptr<::carla_rust::client::FfiMap> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiMap>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiMap>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiMap$null(::std::weak_ptr<::carla_rust::client::FfiMap> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiMap>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiMap$clone(::std::weak_ptr<::carla_rust::client::FfiMap> const &self, ::std::weak_ptr<::carla_rust::client::FfiMap> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiMap>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiMap$downgrade(::std::shared_ptr<::carla_rust::client::FfiMap> const &shared, ::std::weak_ptr<::carla_rust::client::FfiMap> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiMap>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiMap$upgrade(::std::weak_ptr<::carla_rust::client::FfiMap> const &weak, ::std::shared_ptr<::carla_rust::client::FfiMap> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiMap>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiMap$drop(::std::weak_ptr<::carla_rust::client::FfiMap> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiMap> *cxxbridge1$std$vector$carla_rust$client$FfiMap$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiMap>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiMap$size(::std::vector<::carla_rust::client::FfiMap> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiMap *cxxbridge1$std$vector$carla_rust$client$FfiMap$get_unchecked(::std::vector<::carla_rust::client::FfiMap> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiMap$push_back(::std::vector<::carla_rust::client::FfiMap> *v, ::carla_rust::client::FfiMap *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiMap$pop_back(::std::vector<::carla_rust::client::FfiMap> *v, ::carla_rust::client::FfiMap *out) noexcept {
  ::new (out) ::carla_rust::client::FfiMap(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiMap>>::value, "definition of `::std::vector<::carla_rust::client::FfiMap>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiMap>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiMap>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiMap$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiMap>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiMap>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiMap$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiMap>> *ptr, ::std::vector<::carla_rust::client::FfiMap> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiMap>>(raw);
}
::std::vector<::carla_rust::client::FfiMap> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiMap$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiMap>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiMap> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiMap$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiMap>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiMap$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiMap>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiMap>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiTrafficSign>::value, "definition of `::carla_rust::client::FfiTrafficSign` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiTrafficSign>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiTrafficSign>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficSign$null(::std::unique_ptr<::carla_rust::client::FfiTrafficSign> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiTrafficSign>();
}
::carla_rust::client::FfiTrafficSign *cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficSign$uninit(::std::unique_ptr<::carla_rust::client::FfiTrafficSign> *ptr) noexcept {
  ::carla_rust::client::FfiTrafficSign *uninit = reinterpret_cast<::carla_rust::client::FfiTrafficSign *>(new ::rust::MaybeUninit<::carla_rust::client::FfiTrafficSign>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiTrafficSign>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficSign$raw(::std::unique_ptr<::carla_rust::client::FfiTrafficSign> *ptr, ::carla_rust::client::FfiTrafficSign *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiTrafficSign>(raw);
}
::carla_rust::client::FfiTrafficSign const *cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficSign$get(::std::unique_ptr<::carla_rust::client::FfiTrafficSign> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiTrafficSign *cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficSign$release(::std::unique_ptr<::carla_rust::client::FfiTrafficSign> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficSign$drop(::std::unique_ptr<::carla_rust::client::FfiTrafficSign> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiTrafficSign>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiTrafficSign>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiTrafficSign>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficSign$null(::std::shared_ptr<::carla_rust::client::FfiTrafficSign> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiTrafficSign>();
}
::carla_rust::client::FfiTrafficSign *cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficSign$uninit(::std::shared_ptr<::carla_rust::client::FfiTrafficSign> *ptr) noexcept {
  ::carla_rust::client::FfiTrafficSign *uninit = reinterpret_cast<::carla_rust::client::FfiTrafficSign *>(new ::rust::MaybeUninit<::carla_rust::client::FfiTrafficSign>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiTrafficSign>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficSign$clone(::std::shared_ptr<::carla_rust::client::FfiTrafficSign> const &self, ::std::shared_ptr<::carla_rust::client::FfiTrafficSign> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiTrafficSign>(self);
}
::carla_rust::client::FfiTrafficSign const *cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficSign$get(::std::shared_ptr<::carla_rust::client::FfiTrafficSign> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficSign$drop(::std::shared_ptr<::carla_rust::client::FfiTrafficSign> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiTrafficSign>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiTrafficSign>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficSign$null(::std::weak_ptr<::carla_rust::client::FfiTrafficSign> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiTrafficSign>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficSign$clone(::std::weak_ptr<::carla_rust::client::FfiTrafficSign> const &self, ::std::weak_ptr<::carla_rust::client::FfiTrafficSign> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiTrafficSign>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficSign$downgrade(::std::shared_ptr<::carla_rust::client::FfiTrafficSign> const &shared, ::std::weak_ptr<::carla_rust::client::FfiTrafficSign> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiTrafficSign>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficSign$upgrade(::std::weak_ptr<::carla_rust::client::FfiTrafficSign> const &weak, ::std::shared_ptr<::carla_rust::client::FfiTrafficSign> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiTrafficSign>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficSign$drop(::std::weak_ptr<::carla_rust::client::FfiTrafficSign> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiVehicle>::value, "definition of `::carla_rust::client::FfiVehicle` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiVehicle>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiVehicle>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiVehicle$null(::std::unique_ptr<::carla_rust::client::FfiVehicle> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiVehicle>();
}
::carla_rust::client::FfiVehicle *cxxbridge1$unique_ptr$carla_rust$client$FfiVehicle$uninit(::std::unique_ptr<::carla_rust::client::FfiVehicle> *ptr) noexcept {
  ::carla_rust::client::FfiVehicle *uninit = reinterpret_cast<::carla_rust::client::FfiVehicle *>(new ::rust::MaybeUninit<::carla_rust::client::FfiVehicle>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiVehicle>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiVehicle$raw(::std::unique_ptr<::carla_rust::client::FfiVehicle> *ptr, ::carla_rust::client::FfiVehicle *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiVehicle>(raw);
}
::carla_rust::client::FfiVehicle const *cxxbridge1$unique_ptr$carla_rust$client$FfiVehicle$get(::std::unique_ptr<::carla_rust::client::FfiVehicle> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiVehicle *cxxbridge1$unique_ptr$carla_rust$client$FfiVehicle$release(::std::unique_ptr<::carla_rust::client::FfiVehicle> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiVehicle$drop(::std::unique_ptr<::carla_rust::client::FfiVehicle> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiVehicle>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiVehicle>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiVehicle>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiVehicle$null(::std::shared_ptr<::carla_rust::client::FfiVehicle> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiVehicle>();
}
::carla_rust::client::FfiVehicle *cxxbridge1$shared_ptr$carla_rust$client$FfiVehicle$uninit(::std::shared_ptr<::carla_rust::client::FfiVehicle> *ptr) noexcept {
  ::carla_rust::client::FfiVehicle *uninit = reinterpret_cast<::carla_rust::client::FfiVehicle *>(new ::rust::MaybeUninit<::carla_rust::client::FfiVehicle>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiVehicle>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiVehicle$clone(::std::shared_ptr<::carla_rust::client::FfiVehicle> const &self, ::std::shared_ptr<::carla_rust::client::FfiVehicle> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiVehicle>(self);
}
::carla_rust::client::FfiVehicle const *cxxbridge1$shared_ptr$carla_rust$client$FfiVehicle$get(::std::shared_ptr<::carla_rust::client::FfiVehicle> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiVehicle$drop(::std::shared_ptr<::carla_rust::client::FfiVehicle> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiVehicle>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiVehicle>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiVehicle$null(::std::weak_ptr<::carla_rust::client::FfiVehicle> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiVehicle>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiVehicle$clone(::std::weak_ptr<::carla_rust::client::FfiVehicle> const &self, ::std::weak_ptr<::carla_rust::client::FfiVehicle> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiVehicle>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiVehicle$downgrade(::std::shared_ptr<::carla_rust::client::FfiVehicle> const &shared, ::std::weak_ptr<::carla_rust::client::FfiVehicle> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiVehicle>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiVehicle$upgrade(::std::weak_ptr<::carla_rust::client::FfiVehicle> const &weak, ::std::shared_ptr<::carla_rust::client::FfiVehicle> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiVehicle>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiVehicle$drop(::std::weak_ptr<::carla_rust::client::FfiVehicle> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiSensor>::value, "definition of `::carla_rust::client::FfiSensor` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiSensor>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiSensor>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiSensor$null(::std::unique_ptr<::carla_rust::client::FfiSensor> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiSensor>();
}
::carla_rust::client::FfiSensor *cxxbridge1$unique_ptr$carla_rust$client$FfiSensor$uninit(::std::unique_ptr<::carla_rust::client::FfiSensor> *ptr) noexcept {
  ::carla_rust::client::FfiSensor *uninit = reinterpret_cast<::carla_rust::client::FfiSensor *>(new ::rust::MaybeUninit<::carla_rust::client::FfiSensor>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiSensor>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiSensor$raw(::std::unique_ptr<::carla_rust::client::FfiSensor> *ptr, ::carla_rust::client::FfiSensor *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiSensor>(raw);
}
::carla_rust::client::FfiSensor const *cxxbridge1$unique_ptr$carla_rust$client$FfiSensor$get(::std::unique_ptr<::carla_rust::client::FfiSensor> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiSensor *cxxbridge1$unique_ptr$carla_rust$client$FfiSensor$release(::std::unique_ptr<::carla_rust::client::FfiSensor> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiSensor$drop(::std::unique_ptr<::carla_rust::client::FfiSensor> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiSensor>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiSensor>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiSensor>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiSensor$null(::std::shared_ptr<::carla_rust::client::FfiSensor> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiSensor>();
}
::carla_rust::client::FfiSensor *cxxbridge1$shared_ptr$carla_rust$client$FfiSensor$uninit(::std::shared_ptr<::carla_rust::client::FfiSensor> *ptr) noexcept {
  ::carla_rust::client::FfiSensor *uninit = reinterpret_cast<::carla_rust::client::FfiSensor *>(new ::rust::MaybeUninit<::carla_rust::client::FfiSensor>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiSensor>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiSensor$clone(::std::shared_ptr<::carla_rust::client::FfiSensor> const &self, ::std::shared_ptr<::carla_rust::client::FfiSensor> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiSensor>(self);
}
::carla_rust::client::FfiSensor const *cxxbridge1$shared_ptr$carla_rust$client$FfiSensor$get(::std::shared_ptr<::carla_rust::client::FfiSensor> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiSensor$drop(::std::shared_ptr<::carla_rust::client::FfiSensor> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiSensor>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiSensor>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiSensor$null(::std::weak_ptr<::carla_rust::client::FfiSensor> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiSensor>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiSensor$clone(::std::weak_ptr<::carla_rust::client::FfiSensor> const &self, ::std::weak_ptr<::carla_rust::client::FfiSensor> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiSensor>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiSensor$downgrade(::std::shared_ptr<::carla_rust::client::FfiSensor> const &shared, ::std::weak_ptr<::carla_rust::client::FfiSensor> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiSensor>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiSensor$upgrade(::std::weak_ptr<::carla_rust::client::FfiSensor> const &weak, ::std::shared_ptr<::carla_rust::client::FfiSensor> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiSensor>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiSensor$drop(::std::weak_ptr<::carla_rust::client::FfiSensor> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiBlueprintLibrary>::value, "definition of `::carla_rust::client::FfiBlueprintLibrary` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiBlueprintLibrary>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiBlueprintLibrary>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiBlueprintLibrary$null(::std::unique_ptr<::carla_rust::client::FfiBlueprintLibrary> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiBlueprintLibrary>();
}
::carla_rust::client::FfiBlueprintLibrary *cxxbridge1$unique_ptr$carla_rust$client$FfiBlueprintLibrary$uninit(::std::unique_ptr<::carla_rust::client::FfiBlueprintLibrary> *ptr) noexcept {
  ::carla_rust::client::FfiBlueprintLibrary *uninit = reinterpret_cast<::carla_rust::client::FfiBlueprintLibrary *>(new ::rust::MaybeUninit<::carla_rust::client::FfiBlueprintLibrary>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiBlueprintLibrary>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiBlueprintLibrary$raw(::std::unique_ptr<::carla_rust::client::FfiBlueprintLibrary> *ptr, ::carla_rust::client::FfiBlueprintLibrary *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiBlueprintLibrary>(raw);
}
::carla_rust::client::FfiBlueprintLibrary const *cxxbridge1$unique_ptr$carla_rust$client$FfiBlueprintLibrary$get(::std::unique_ptr<::carla_rust::client::FfiBlueprintLibrary> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiBlueprintLibrary *cxxbridge1$unique_ptr$carla_rust$client$FfiBlueprintLibrary$release(::std::unique_ptr<::carla_rust::client::FfiBlueprintLibrary> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiBlueprintLibrary$drop(::std::unique_ptr<::carla_rust::client::FfiBlueprintLibrary> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiBlueprintLibrary>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiBlueprintLibrary$null(::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary>();
}
::carla_rust::client::FfiBlueprintLibrary *cxxbridge1$shared_ptr$carla_rust$client$FfiBlueprintLibrary$uninit(::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary> *ptr) noexcept {
  ::carla_rust::client::FfiBlueprintLibrary *uninit = reinterpret_cast<::carla_rust::client::FfiBlueprintLibrary *>(new ::rust::MaybeUninit<::carla_rust::client::FfiBlueprintLibrary>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiBlueprintLibrary$clone(::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary> const &self, ::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary>(self);
}
::carla_rust::client::FfiBlueprintLibrary const *cxxbridge1$shared_ptr$carla_rust$client$FfiBlueprintLibrary$get(::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiBlueprintLibrary$drop(::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiBlueprintLibrary>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiBlueprintLibrary>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiBlueprintLibrary$null(::std::weak_ptr<::carla_rust::client::FfiBlueprintLibrary> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiBlueprintLibrary>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiBlueprintLibrary$clone(::std::weak_ptr<::carla_rust::client::FfiBlueprintLibrary> const &self, ::std::weak_ptr<::carla_rust::client::FfiBlueprintLibrary> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiBlueprintLibrary>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiBlueprintLibrary$downgrade(::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary> const &shared, ::std::weak_ptr<::carla_rust::client::FfiBlueprintLibrary> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiBlueprintLibrary>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiBlueprintLibrary$upgrade(::std::weak_ptr<::carla_rust::client::FfiBlueprintLibrary> const &weak, ::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiBlueprintLibrary>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiBlueprintLibrary$drop(::std::weak_ptr<::carla_rust::client::FfiBlueprintLibrary> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiActorList>::value, "definition of `::carla_rust::client::FfiActorList` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiActorList>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiActorList>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiActorList$null(::std::unique_ptr<::carla_rust::client::FfiActorList> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActorList>();
}
::carla_rust::client::FfiActorList *cxxbridge1$unique_ptr$carla_rust$client$FfiActorList$uninit(::std::unique_ptr<::carla_rust::client::FfiActorList> *ptr) noexcept {
  ::carla_rust::client::FfiActorList *uninit = reinterpret_cast<::carla_rust::client::FfiActorList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiActorList>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActorList>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiActorList$raw(::std::unique_ptr<::carla_rust::client::FfiActorList> *ptr, ::carla_rust::client::FfiActorList *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActorList>(raw);
}
::carla_rust::client::FfiActorList const *cxxbridge1$unique_ptr$carla_rust$client$FfiActorList$get(::std::unique_ptr<::carla_rust::client::FfiActorList> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiActorList *cxxbridge1$unique_ptr$carla_rust$client$FfiActorList$release(::std::unique_ptr<::carla_rust::client::FfiActorList> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiActorList$drop(::std::unique_ptr<::carla_rust::client::FfiActorList> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiActorList>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiActorList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiActorList>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiActorList$null(::std::shared_ptr<::carla_rust::client::FfiActorList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActorList>();
}
::carla_rust::client::FfiActorList *cxxbridge1$shared_ptr$carla_rust$client$FfiActorList$uninit(::std::shared_ptr<::carla_rust::client::FfiActorList> *ptr) noexcept {
  ::carla_rust::client::FfiActorList *uninit = reinterpret_cast<::carla_rust::client::FfiActorList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiActorList>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActorList>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiActorList$clone(::std::shared_ptr<::carla_rust::client::FfiActorList> const &self, ::std::shared_ptr<::carla_rust::client::FfiActorList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActorList>(self);
}
::carla_rust::client::FfiActorList const *cxxbridge1$shared_ptr$carla_rust$client$FfiActorList$get(::std::shared_ptr<::carla_rust::client::FfiActorList> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiActorList$drop(::std::shared_ptr<::carla_rust::client::FfiActorList> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiActorList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiActorList>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorList$null(::std::weak_ptr<::carla_rust::client::FfiActorList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiActorList>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorList$clone(::std::weak_ptr<::carla_rust::client::FfiActorList> const &self, ::std::weak_ptr<::carla_rust::client::FfiActorList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiActorList>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorList$downgrade(::std::shared_ptr<::carla_rust::client::FfiActorList> const &shared, ::std::weak_ptr<::carla_rust::client::FfiActorList> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiActorList>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorList$upgrade(::std::weak_ptr<::carla_rust::client::FfiActorList> const &weak, ::std::shared_ptr<::carla_rust::client::FfiActorList> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiActorList>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorList$drop(::std::weak_ptr<::carla_rust::client::FfiActorList> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiBoundingBoxList>::value, "definition of `::carla_rust::client::FfiBoundingBoxList` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiBoundingBoxList>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiBoundingBoxList>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiBoundingBoxList$null(::std::unique_ptr<::carla_rust::client::FfiBoundingBoxList> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiBoundingBoxList>();
}
::carla_rust::client::FfiBoundingBoxList *cxxbridge1$unique_ptr$carla_rust$client$FfiBoundingBoxList$uninit(::std::unique_ptr<::carla_rust::client::FfiBoundingBoxList> *ptr) noexcept {
  ::carla_rust::client::FfiBoundingBoxList *uninit = reinterpret_cast<::carla_rust::client::FfiBoundingBoxList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiBoundingBoxList>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiBoundingBoxList>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiBoundingBoxList$raw(::std::unique_ptr<::carla_rust::client::FfiBoundingBoxList> *ptr, ::carla_rust::client::FfiBoundingBoxList *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiBoundingBoxList>(raw);
}
::carla_rust::client::FfiBoundingBoxList const *cxxbridge1$unique_ptr$carla_rust$client$FfiBoundingBoxList$get(::std::unique_ptr<::carla_rust::client::FfiBoundingBoxList> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiBoundingBoxList *cxxbridge1$unique_ptr$carla_rust$client$FfiBoundingBoxList$release(::std::unique_ptr<::carla_rust::client::FfiBoundingBoxList> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiBoundingBoxList$drop(::std::unique_ptr<::carla_rust::client::FfiBoundingBoxList> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiBoundingBoxList>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiBoundingBoxList$null(::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList>();
}
::carla_rust::client::FfiBoundingBoxList *cxxbridge1$shared_ptr$carla_rust$client$FfiBoundingBoxList$uninit(::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList> *ptr) noexcept {
  ::carla_rust::client::FfiBoundingBoxList *uninit = reinterpret_cast<::carla_rust::client::FfiBoundingBoxList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiBoundingBoxList>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiBoundingBoxList$clone(::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList> const &self, ::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList>(self);
}
::carla_rust::client::FfiBoundingBoxList const *cxxbridge1$shared_ptr$carla_rust$client$FfiBoundingBoxList$get(::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiBoundingBoxList$drop(::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiBoundingBoxList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiBoundingBoxList>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiBoundingBoxList$null(::std::weak_ptr<::carla_rust::client::FfiBoundingBoxList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiBoundingBoxList>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiBoundingBoxList$clone(::std::weak_ptr<::carla_rust::client::FfiBoundingBoxList> const &self, ::std::weak_ptr<::carla_rust::client::FfiBoundingBoxList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiBoundingBoxList>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiBoundingBoxList$downgrade(::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList> const &shared, ::std::weak_ptr<::carla_rust::client::FfiBoundingBoxList> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiBoundingBoxList>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiBoundingBoxList$upgrade(::std::weak_ptr<::carla_rust::client::FfiBoundingBoxList> const &weak, ::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiBoundingBoxList>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiBoundingBoxList$drop(::std::weak_ptr<::carla_rust::client::FfiBoundingBoxList> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiBoundingBoxList> *cxxbridge1$std$vector$carla_rust$client$FfiBoundingBoxList$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiBoundingBoxList>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiBoundingBoxList$size(::std::vector<::carla_rust::client::FfiBoundingBoxList> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiBoundingBoxList *cxxbridge1$std$vector$carla_rust$client$FfiBoundingBoxList$get_unchecked(::std::vector<::carla_rust::client::FfiBoundingBoxList> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiBoundingBoxList$push_back(::std::vector<::carla_rust::client::FfiBoundingBoxList> *v, ::carla_rust::client::FfiBoundingBoxList *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiBoundingBoxList$pop_back(::std::vector<::carla_rust::client::FfiBoundingBoxList> *v, ::carla_rust::client::FfiBoundingBoxList *out) noexcept {
  ::new (out) ::carla_rust::client::FfiBoundingBoxList(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiBoundingBoxList>>::value, "definition of `::std::vector<::carla_rust::client::FfiBoundingBoxList>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiBoundingBoxList>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiBoundingBoxList>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiBoundingBoxList$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiBoundingBoxList>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiBoundingBoxList>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiBoundingBoxList$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiBoundingBoxList>> *ptr, ::std::vector<::carla_rust::client::FfiBoundingBoxList> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiBoundingBoxList>>(raw);
}
::std::vector<::carla_rust::client::FfiBoundingBoxList> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiBoundingBoxList$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiBoundingBoxList>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiBoundingBoxList> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiBoundingBoxList$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiBoundingBoxList>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiBoundingBoxList$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiBoundingBoxList>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiBoundingBoxList>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiLabelledPointList>::value, "definition of `::carla_rust::client::FfiLabelledPointList` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiLabelledPointList>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiLabelledPointList>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiLabelledPointList$null(::std::unique_ptr<::carla_rust::client::FfiLabelledPointList> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLabelledPointList>();
}
::carla_rust::client::FfiLabelledPointList *cxxbridge1$unique_ptr$carla_rust$client$FfiLabelledPointList$uninit(::std::unique_ptr<::carla_rust::client::FfiLabelledPointList> *ptr) noexcept {
  ::carla_rust::client::FfiLabelledPointList *uninit = reinterpret_cast<::carla_rust::client::FfiLabelledPointList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiLabelledPointList>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLabelledPointList>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiLabelledPointList$raw(::std::unique_ptr<::carla_rust::client::FfiLabelledPointList> *ptr, ::carla_rust::client::FfiLabelledPointList *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLabelledPointList>(raw);
}
::carla_rust::client::FfiLabelledPointList const *cxxbridge1$unique_ptr$carla_rust$client$FfiLabelledPointList$get(::std::unique_ptr<::carla_rust::client::FfiLabelledPointList> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiLabelledPointList *cxxbridge1$unique_ptr$carla_rust$client$FfiLabelledPointList$release(::std::unique_ptr<::carla_rust::client::FfiLabelledPointList> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiLabelledPointList$drop(::std::unique_ptr<::carla_rust::client::FfiLabelledPointList> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiLabelledPointList>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiLabelledPointList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiLabelledPointList>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiLabelledPointList$null(::std::shared_ptr<::carla_rust::client::FfiLabelledPointList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLabelledPointList>();
}
::carla_rust::client::FfiLabelledPointList *cxxbridge1$shared_ptr$carla_rust$client$FfiLabelledPointList$uninit(::std::shared_ptr<::carla_rust::client::FfiLabelledPointList> *ptr) noexcept {
  ::carla_rust::client::FfiLabelledPointList *uninit = reinterpret_cast<::carla_rust::client::FfiLabelledPointList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiLabelledPointList>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLabelledPointList>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiLabelledPointList$clone(::std::shared_ptr<::carla_rust::client::FfiLabelledPointList> const &self, ::std::shared_ptr<::carla_rust::client::FfiLabelledPointList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLabelledPointList>(self);
}
::carla_rust::client::FfiLabelledPointList const *cxxbridge1$shared_ptr$carla_rust$client$FfiLabelledPointList$get(::std::shared_ptr<::carla_rust::client::FfiLabelledPointList> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiLabelledPointList$drop(::std::shared_ptr<::carla_rust::client::FfiLabelledPointList> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiLabelledPointList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiLabelledPointList>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiLabelledPointList$null(::std::weak_ptr<::carla_rust::client::FfiLabelledPointList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiLabelledPointList>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLabelledPointList$clone(::std::weak_ptr<::carla_rust::client::FfiLabelledPointList> const &self, ::std::weak_ptr<::carla_rust::client::FfiLabelledPointList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiLabelledPointList>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLabelledPointList$downgrade(::std::shared_ptr<::carla_rust::client::FfiLabelledPointList> const &shared, ::std::weak_ptr<::carla_rust::client::FfiLabelledPointList> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiLabelledPointList>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLabelledPointList$upgrade(::std::weak_ptr<::carla_rust::client::FfiLabelledPointList> const &weak, ::std::shared_ptr<::carla_rust::client::FfiLabelledPointList> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiLabelledPointList>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLabelledPointList$drop(::std::weak_ptr<::carla_rust::client::FfiLabelledPointList> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiLabelledPointList> *cxxbridge1$std$vector$carla_rust$client$FfiLabelledPointList$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiLabelledPointList>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiLabelledPointList$size(::std::vector<::carla_rust::client::FfiLabelledPointList> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiLabelledPointList *cxxbridge1$std$vector$carla_rust$client$FfiLabelledPointList$get_unchecked(::std::vector<::carla_rust::client::FfiLabelledPointList> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiLabelledPointList$push_back(::std::vector<::carla_rust::client::FfiLabelledPointList> *v, ::carla_rust::client::FfiLabelledPointList *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiLabelledPointList$pop_back(::std::vector<::carla_rust::client::FfiLabelledPointList> *v, ::carla_rust::client::FfiLabelledPointList *out) noexcept {
  ::new (out) ::carla_rust::client::FfiLabelledPointList(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiLabelledPointList>>::value, "definition of `::std::vector<::carla_rust::client::FfiLabelledPointList>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLabelledPointList>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLabelledPointList>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLabelledPointList$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLabelledPointList>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiLabelledPointList>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLabelledPointList$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLabelledPointList>> *ptr, ::std::vector<::carla_rust::client::FfiLabelledPointList> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiLabelledPointList>>(raw);
}
::std::vector<::carla_rust::client::FfiLabelledPointList> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLabelledPointList$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLabelledPointList>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiLabelledPointList> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLabelledPointList$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLabelledPointList>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLabelledPointList$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLabelledPointList>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiLabelledPointList>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiEnvironmentObjectList>::value, "definition of `::carla_rust::client::FfiEnvironmentObjectList` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiEnvironmentObjectList>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiEnvironmentObjectList>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiEnvironmentObjectList$null(::std::unique_ptr<::carla_rust::client::FfiEnvironmentObjectList> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiEnvironmentObjectList>();
}
::carla_rust::client::FfiEnvironmentObjectList *cxxbridge1$unique_ptr$carla_rust$client$FfiEnvironmentObjectList$uninit(::std::unique_ptr<::carla_rust::client::FfiEnvironmentObjectList> *ptr) noexcept {
  ::carla_rust::client::FfiEnvironmentObjectList *uninit = reinterpret_cast<::carla_rust::client::FfiEnvironmentObjectList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiEnvironmentObjectList>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiEnvironmentObjectList>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiEnvironmentObjectList$raw(::std::unique_ptr<::carla_rust::client::FfiEnvironmentObjectList> *ptr, ::carla_rust::client::FfiEnvironmentObjectList *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiEnvironmentObjectList>(raw);
}
::carla_rust::client::FfiEnvironmentObjectList const *cxxbridge1$unique_ptr$carla_rust$client$FfiEnvironmentObjectList$get(::std::unique_ptr<::carla_rust::client::FfiEnvironmentObjectList> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiEnvironmentObjectList *cxxbridge1$unique_ptr$carla_rust$client$FfiEnvironmentObjectList$release(::std::unique_ptr<::carla_rust::client::FfiEnvironmentObjectList> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiEnvironmentObjectList$drop(::std::unique_ptr<::carla_rust::client::FfiEnvironmentObjectList> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiEnvironmentObjectList>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiEnvironmentObjectList$null(::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList>();
}
::carla_rust::client::FfiEnvironmentObjectList *cxxbridge1$shared_ptr$carla_rust$client$FfiEnvironmentObjectList$uninit(::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList> *ptr) noexcept {
  ::carla_rust::client::FfiEnvironmentObjectList *uninit = reinterpret_cast<::carla_rust::client::FfiEnvironmentObjectList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiEnvironmentObjectList>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiEnvironmentObjectList$clone(::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList> const &self, ::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList>(self);
}
::carla_rust::client::FfiEnvironmentObjectList const *cxxbridge1$shared_ptr$carla_rust$client$FfiEnvironmentObjectList$get(::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiEnvironmentObjectList$drop(::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiEnvironmentObjectList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiEnvironmentObjectList>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiEnvironmentObjectList$null(::std::weak_ptr<::carla_rust::client::FfiEnvironmentObjectList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiEnvironmentObjectList>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiEnvironmentObjectList$clone(::std::weak_ptr<::carla_rust::client::FfiEnvironmentObjectList> const &self, ::std::weak_ptr<::carla_rust::client::FfiEnvironmentObjectList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiEnvironmentObjectList>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiEnvironmentObjectList$downgrade(::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList> const &shared, ::std::weak_ptr<::carla_rust::client::FfiEnvironmentObjectList> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiEnvironmentObjectList>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiEnvironmentObjectList$upgrade(::std::weak_ptr<::carla_rust::client::FfiEnvironmentObjectList> const &weak, ::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiEnvironmentObjectList>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiEnvironmentObjectList$drop(::std::weak_ptr<::carla_rust::client::FfiEnvironmentObjectList> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiEnvironmentObjectList> *cxxbridge1$std$vector$carla_rust$client$FfiEnvironmentObjectList$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiEnvironmentObjectList>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiEnvironmentObjectList$size(::std::vector<::carla_rust::client::FfiEnvironmentObjectList> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiEnvironmentObjectList *cxxbridge1$std$vector$carla_rust$client$FfiEnvironmentObjectList$get_unchecked(::std::vector<::carla_rust::client::FfiEnvironmentObjectList> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiEnvironmentObjectList$push_back(::std::vector<::carla_rust::client::FfiEnvironmentObjectList> *v, ::carla_rust::client::FfiEnvironmentObjectList *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiEnvironmentObjectList$pop_back(::std::vector<::carla_rust::client::FfiEnvironmentObjectList> *v, ::carla_rust::client::FfiEnvironmentObjectList *out) noexcept {
  ::new (out) ::carla_rust::client::FfiEnvironmentObjectList(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiEnvironmentObjectList>>::value, "definition of `::std::vector<::carla_rust::client::FfiEnvironmentObjectList>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiEnvironmentObjectList>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiEnvironmentObjectList>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiEnvironmentObjectList$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiEnvironmentObjectList>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiEnvironmentObjectList>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiEnvironmentObjectList$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiEnvironmentObjectList>> *ptr, ::std::vector<::carla_rust::client::FfiEnvironmentObjectList> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiEnvironmentObjectList>>(raw);
}
::std::vector<::carla_rust::client::FfiEnvironmentObjectList> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiEnvironmentObjectList$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiEnvironmentObjectList>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiEnvironmentObjectList> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiEnvironmentObjectList$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiEnvironmentObjectList>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiEnvironmentObjectList$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiEnvironmentObjectList>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiEnvironmentObjectList>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiActorVec>::value, "definition of `::carla_rust::client::FfiActorVec` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiActorVec>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiActorVec>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiActorVec$null(::std::unique_ptr<::carla_rust::client::FfiActorVec> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActorVec>();
}
::carla_rust::client::FfiActorVec *cxxbridge1$unique_ptr$carla_rust$client$FfiActorVec$uninit(::std::unique_ptr<::carla_rust::client::FfiActorVec> *ptr) noexcept {
  ::carla_rust::client::FfiActorVec *uninit = reinterpret_cast<::carla_rust::client::FfiActorVec *>(new ::rust::MaybeUninit<::carla_rust::client::FfiActorVec>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActorVec>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiActorVec$raw(::std::unique_ptr<::carla_rust::client::FfiActorVec> *ptr, ::carla_rust::client::FfiActorVec *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiActorVec>(raw);
}
::carla_rust::client::FfiActorVec const *cxxbridge1$unique_ptr$carla_rust$client$FfiActorVec$get(::std::unique_ptr<::carla_rust::client::FfiActorVec> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiActorVec *cxxbridge1$unique_ptr$carla_rust$client$FfiActorVec$release(::std::unique_ptr<::carla_rust::client::FfiActorVec> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiActorVec$drop(::std::unique_ptr<::carla_rust::client::FfiActorVec> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiActorVec>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiActorVec>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiActorVec>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiActorVec$null(::std::shared_ptr<::carla_rust::client::FfiActorVec> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActorVec>();
}
::carla_rust::client::FfiActorVec *cxxbridge1$shared_ptr$carla_rust$client$FfiActorVec$uninit(::std::shared_ptr<::carla_rust::client::FfiActorVec> *ptr) noexcept {
  ::carla_rust::client::FfiActorVec *uninit = reinterpret_cast<::carla_rust::client::FfiActorVec *>(new ::rust::MaybeUninit<::carla_rust::client::FfiActorVec>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActorVec>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiActorVec$clone(::std::shared_ptr<::carla_rust::client::FfiActorVec> const &self, ::std::shared_ptr<::carla_rust::client::FfiActorVec> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiActorVec>(self);
}
::carla_rust::client::FfiActorVec const *cxxbridge1$shared_ptr$carla_rust$client$FfiActorVec$get(::std::shared_ptr<::carla_rust::client::FfiActorVec> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiActorVec$drop(::std::shared_ptr<::carla_rust::client::FfiActorVec> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiActorVec>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiActorVec>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorVec$null(::std::weak_ptr<::carla_rust::client::FfiActorVec> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiActorVec>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorVec$clone(::std::weak_ptr<::carla_rust::client::FfiActorVec> const &self, ::std::weak_ptr<::carla_rust::client::FfiActorVec> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiActorVec>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorVec$downgrade(::std::shared_ptr<::carla_rust::client::FfiActorVec> const &shared, ::std::weak_ptr<::carla_rust::client::FfiActorVec> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiActorVec>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorVec$upgrade(::std::weak_ptr<::carla_rust::client::FfiActorVec> const &weak, ::std::shared_ptr<::carla_rust::client::FfiActorVec> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiActorVec>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiActorVec$drop(::std::weak_ptr<::carla_rust::client::FfiActorVec> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiActorVec> *cxxbridge1$std$vector$carla_rust$client$FfiActorVec$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiActorVec>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiActorVec$size(::std::vector<::carla_rust::client::FfiActorVec> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiActorVec *cxxbridge1$std$vector$carla_rust$client$FfiActorVec$get_unchecked(::std::vector<::carla_rust::client::FfiActorVec> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiActorVec$push_back(::std::vector<::carla_rust::client::FfiActorVec> *v, ::carla_rust::client::FfiActorVec *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiActorVec$pop_back(::std::vector<::carla_rust::client::FfiActorVec> *v, ::carla_rust::client::FfiActorVec *out) noexcept {
  ::new (out) ::carla_rust::client::FfiActorVec(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiActorVec>>::value, "definition of `::std::vector<::carla_rust::client::FfiActorVec>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorVec>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorVec>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiActorVec$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorVec>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorVec>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiActorVec$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorVec>> *ptr, ::std::vector<::carla_rust::client::FfiActorVec> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorVec>>(raw);
}
::std::vector<::carla_rust::client::FfiActorVec> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiActorVec$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorVec>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiActorVec> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiActorVec$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorVec>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiActorVec$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiActorVec>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiActorVec>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiWorldSnapshot>::value, "definition of `::carla_rust::client::FfiWorldSnapshot` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiWorldSnapshot>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiWorldSnapshot>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiWorldSnapshot$null(::std::unique_ptr<::carla_rust::client::FfiWorldSnapshot> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWorldSnapshot>();
}
::carla_rust::client::FfiWorldSnapshot *cxxbridge1$unique_ptr$carla_rust$client$FfiWorldSnapshot$uninit(::std::unique_ptr<::carla_rust::client::FfiWorldSnapshot> *ptr) noexcept {
  ::carla_rust::client::FfiWorldSnapshot *uninit = reinterpret_cast<::carla_rust::client::FfiWorldSnapshot *>(new ::rust::MaybeUninit<::carla_rust::client::FfiWorldSnapshot>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWorldSnapshot>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiWorldSnapshot$raw(::std::unique_ptr<::carla_rust::client::FfiWorldSnapshot> *ptr, ::carla_rust::client::FfiWorldSnapshot *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWorldSnapshot>(raw);
}
::carla_rust::client::FfiWorldSnapshot const *cxxbridge1$unique_ptr$carla_rust$client$FfiWorldSnapshot$get(::std::unique_ptr<::carla_rust::client::FfiWorldSnapshot> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiWorldSnapshot *cxxbridge1$unique_ptr$carla_rust$client$FfiWorldSnapshot$release(::std::unique_ptr<::carla_rust::client::FfiWorldSnapshot> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiWorldSnapshot$drop(::std::unique_ptr<::carla_rust::client::FfiWorldSnapshot> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiWorldSnapshot>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiWorldSnapshot$null(::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot>();
}
::carla_rust::client::FfiWorldSnapshot *cxxbridge1$shared_ptr$carla_rust$client$FfiWorldSnapshot$uninit(::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot> *ptr) noexcept {
  ::carla_rust::client::FfiWorldSnapshot *uninit = reinterpret_cast<::carla_rust::client::FfiWorldSnapshot *>(new ::rust::MaybeUninit<::carla_rust::client::FfiWorldSnapshot>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiWorldSnapshot$clone(::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot> const &self, ::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot>(self);
}
::carla_rust::client::FfiWorldSnapshot const *cxxbridge1$shared_ptr$carla_rust$client$FfiWorldSnapshot$get(::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiWorldSnapshot$drop(::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiWorldSnapshot>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiWorldSnapshot>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiWorldSnapshot$null(::std::weak_ptr<::carla_rust::client::FfiWorldSnapshot> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiWorldSnapshot>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWorldSnapshot$clone(::std::weak_ptr<::carla_rust::client::FfiWorldSnapshot> const &self, ::std::weak_ptr<::carla_rust::client::FfiWorldSnapshot> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiWorldSnapshot>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWorldSnapshot$downgrade(::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot> const &shared, ::std::weak_ptr<::carla_rust::client::FfiWorldSnapshot> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiWorldSnapshot>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWorldSnapshot$upgrade(::std::weak_ptr<::carla_rust::client::FfiWorldSnapshot> const &weak, ::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiWorldSnapshot>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWorldSnapshot$drop(::std::weak_ptr<::carla_rust::client::FfiWorldSnapshot> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiWorldSnapshot> *cxxbridge1$std$vector$carla_rust$client$FfiWorldSnapshot$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiWorldSnapshot>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiWorldSnapshot$size(::std::vector<::carla_rust::client::FfiWorldSnapshot> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiWorldSnapshot *cxxbridge1$std$vector$carla_rust$client$FfiWorldSnapshot$get_unchecked(::std::vector<::carla_rust::client::FfiWorldSnapshot> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiWorldSnapshot$push_back(::std::vector<::carla_rust::client::FfiWorldSnapshot> *v, ::carla_rust::client::FfiWorldSnapshot *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiWorldSnapshot$pop_back(::std::vector<::carla_rust::client::FfiWorldSnapshot> *v, ::carla_rust::client::FfiWorldSnapshot *out) noexcept {
  ::new (out) ::carla_rust::client::FfiWorldSnapshot(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiWorldSnapshot>>::value, "definition of `::std::vector<::carla_rust::client::FfiWorldSnapshot>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorldSnapshot>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorldSnapshot>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWorldSnapshot$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorldSnapshot>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorldSnapshot>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWorldSnapshot$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorldSnapshot>> *ptr, ::std::vector<::carla_rust::client::FfiWorldSnapshot> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorldSnapshot>>(raw);
}
::std::vector<::carla_rust::client::FfiWorldSnapshot> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWorldSnapshot$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorldSnapshot>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiWorldSnapshot> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWorldSnapshot$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorldSnapshot>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWorldSnapshot$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorldSnapshot>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiWorldSnapshot>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiClientLightState>::value, "definition of `::carla_rust::client::FfiClientLightState` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiClientLightState>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiClientLightState>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiClientLightState$null(::std::unique_ptr<::carla_rust::client::FfiClientLightState> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiClientLightState>();
}
::carla_rust::client::FfiClientLightState *cxxbridge1$unique_ptr$carla_rust$client$FfiClientLightState$uninit(::std::unique_ptr<::carla_rust::client::FfiClientLightState> *ptr) noexcept {
  ::carla_rust::client::FfiClientLightState *uninit = reinterpret_cast<::carla_rust::client::FfiClientLightState *>(new ::rust::MaybeUninit<::carla_rust::client::FfiClientLightState>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiClientLightState>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiClientLightState$raw(::std::unique_ptr<::carla_rust::client::FfiClientLightState> *ptr, ::carla_rust::client::FfiClientLightState *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiClientLightState>(raw);
}
::carla_rust::client::FfiClientLightState const *cxxbridge1$unique_ptr$carla_rust$client$FfiClientLightState$get(::std::unique_ptr<::carla_rust::client::FfiClientLightState> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiClientLightState *cxxbridge1$unique_ptr$carla_rust$client$FfiClientLightState$release(::std::unique_ptr<::carla_rust::client::FfiClientLightState> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiClientLightState$drop(::std::unique_ptr<::carla_rust::client::FfiClientLightState> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiClientLightState>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiClientLightState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiClientLightState>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiClientLightState$null(::std::shared_ptr<::carla_rust::client::FfiClientLightState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiClientLightState>();
}
::carla_rust::client::FfiClientLightState *cxxbridge1$shared_ptr$carla_rust$client$FfiClientLightState$uninit(::std::shared_ptr<::carla_rust::client::FfiClientLightState> *ptr) noexcept {
  ::carla_rust::client::FfiClientLightState *uninit = reinterpret_cast<::carla_rust::client::FfiClientLightState *>(new ::rust::MaybeUninit<::carla_rust::client::FfiClientLightState>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiClientLightState>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiClientLightState$clone(::std::shared_ptr<::carla_rust::client::FfiClientLightState> const &self, ::std::shared_ptr<::carla_rust::client::FfiClientLightState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiClientLightState>(self);
}
::carla_rust::client::FfiClientLightState const *cxxbridge1$shared_ptr$carla_rust$client$FfiClientLightState$get(::std::shared_ptr<::carla_rust::client::FfiClientLightState> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiClientLightState$drop(::std::shared_ptr<::carla_rust::client::FfiClientLightState> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiClientLightState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiClientLightState>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiClientLightState$null(::std::weak_ptr<::carla_rust::client::FfiClientLightState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiClientLightState>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiClientLightState$clone(::std::weak_ptr<::carla_rust::client::FfiClientLightState> const &self, ::std::weak_ptr<::carla_rust::client::FfiClientLightState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiClientLightState>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiClientLightState$downgrade(::std::shared_ptr<::carla_rust::client::FfiClientLightState> const &shared, ::std::weak_ptr<::carla_rust::client::FfiClientLightState> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiClientLightState>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiClientLightState$upgrade(::std::weak_ptr<::carla_rust::client::FfiClientLightState> const &weak, ::std::shared_ptr<::carla_rust::client::FfiClientLightState> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiClientLightState>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiClientLightState$drop(::std::weak_ptr<::carla_rust::client::FfiClientLightState> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiClientLightState> *cxxbridge1$std$vector$carla_rust$client$FfiClientLightState$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiClientLightState>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiClientLightState$size(::std::vector<::carla_rust::client::FfiClientLightState> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiClientLightState *cxxbridge1$std$vector$carla_rust$client$FfiClientLightState$get_unchecked(::std::vector<::carla_rust::client::FfiClientLightState> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiClientLightState$push_back(::std::vector<::carla_rust::client::FfiClientLightState> *v, ::carla_rust::client::FfiClientLightState *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiClientLightState$pop_back(::std::vector<::carla_rust::client::FfiClientLightState> *v, ::carla_rust::client::FfiClientLightState *out) noexcept {
  ::new (out) ::carla_rust::client::FfiClientLightState(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiClientLightState>>::value, "definition of `::std::vector<::carla_rust::client::FfiClientLightState>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClientLightState>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClientLightState>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiClientLightState$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClientLightState>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiClientLightState>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiClientLightState$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClientLightState>> *ptr, ::std::vector<::carla_rust::client::FfiClientLightState> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiClientLightState>>(raw);
}
::std::vector<::carla_rust::client::FfiClientLightState> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiClientLightState$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClientLightState>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiClientLightState> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiClientLightState$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClientLightState>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiClientLightState$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClientLightState>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiClientLightState>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiLightRef>::value, "definition of `::carla_rust::client::FfiLightRef` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiLightRef>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiLightRef>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiLightRef$null(::std::unique_ptr<::carla_rust::client::FfiLightRef> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLightRef>();
}
::carla_rust::client::FfiLightRef *cxxbridge1$unique_ptr$carla_rust$client$FfiLightRef$uninit(::std::unique_ptr<::carla_rust::client::FfiLightRef> *ptr) noexcept {
  ::carla_rust::client::FfiLightRef *uninit = reinterpret_cast<::carla_rust::client::FfiLightRef *>(new ::rust::MaybeUninit<::carla_rust::client::FfiLightRef>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLightRef>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiLightRef$raw(::std::unique_ptr<::carla_rust::client::FfiLightRef> *ptr, ::carla_rust::client::FfiLightRef *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLightRef>(raw);
}
::carla_rust::client::FfiLightRef const *cxxbridge1$unique_ptr$carla_rust$client$FfiLightRef$get(::std::unique_ptr<::carla_rust::client::FfiLightRef> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiLightRef *cxxbridge1$unique_ptr$carla_rust$client$FfiLightRef$release(::std::unique_ptr<::carla_rust::client::FfiLightRef> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiLightRef$drop(::std::unique_ptr<::carla_rust::client::FfiLightRef> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiLightRef>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiLightRef>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiLightRef>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiLightRef$null(::std::shared_ptr<::carla_rust::client::FfiLightRef> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLightRef>();
}
::carla_rust::client::FfiLightRef *cxxbridge1$shared_ptr$carla_rust$client$FfiLightRef$uninit(::std::shared_ptr<::carla_rust::client::FfiLightRef> *ptr) noexcept {
  ::carla_rust::client::FfiLightRef *uninit = reinterpret_cast<::carla_rust::client::FfiLightRef *>(new ::rust::MaybeUninit<::carla_rust::client::FfiLightRef>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLightRef>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiLightRef$clone(::std::shared_ptr<::carla_rust::client::FfiLightRef> const &self, ::std::shared_ptr<::carla_rust::client::FfiLightRef> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLightRef>(self);
}
::carla_rust::client::FfiLightRef const *cxxbridge1$shared_ptr$carla_rust$client$FfiLightRef$get(::std::shared_ptr<::carla_rust::client::FfiLightRef> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiLightRef$drop(::std::shared_ptr<::carla_rust::client::FfiLightRef> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiLightRef>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiLightRef>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightRef$null(::std::weak_ptr<::carla_rust::client::FfiLightRef> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiLightRef>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightRef$clone(::std::weak_ptr<::carla_rust::client::FfiLightRef> const &self, ::std::weak_ptr<::carla_rust::client::FfiLightRef> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiLightRef>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightRef$downgrade(::std::shared_ptr<::carla_rust::client::FfiLightRef> const &shared, ::std::weak_ptr<::carla_rust::client::FfiLightRef> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiLightRef>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightRef$upgrade(::std::weak_ptr<::carla_rust::client::FfiLightRef> const &weak, ::std::shared_ptr<::carla_rust::client::FfiLightRef> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiLightRef>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightRef$drop(::std::weak_ptr<::carla_rust::client::FfiLightRef> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiLightRef> *cxxbridge1$std$vector$carla_rust$client$FfiLightRef$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiLightRef>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiLightRef$size(::std::vector<::carla_rust::client::FfiLightRef> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiLightRef *cxxbridge1$std$vector$carla_rust$client$FfiLightRef$get_unchecked(::std::vector<::carla_rust::client::FfiLightRef> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiLightRef$push_back(::std::vector<::carla_rust::client::FfiLightRef> *v, ::carla_rust::client::FfiLightRef *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiLightRef$pop_back(::std::vector<::carla_rust::client::FfiLightRef> *v, ::carla_rust::client::FfiLightRef *out) noexcept {
  ::new (out) ::carla_rust::client::FfiLightRef(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiLightRef>>::value, "definition of `::std::vector<::carla_rust::client::FfiLightRef>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightRef>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightRef>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLightRef$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightRef>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightRef>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLightRef$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightRef>> *ptr, ::std::vector<::carla_rust::client::FfiLightRef> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightRef>>(raw);
}
::std::vector<::carla_rust::client::FfiLightRef> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLightRef$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightRef>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiLightRef> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLightRef$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightRef>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLightRef$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightRef>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiLightRef>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiLightList>::value, "definition of `::carla_rust::client::FfiLightList` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiLightList>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiLightList>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiLightList$null(::std::unique_ptr<::carla_rust::client::FfiLightList> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLightList>();
}
::carla_rust::client::FfiLightList *cxxbridge1$unique_ptr$carla_rust$client$FfiLightList$uninit(::std::unique_ptr<::carla_rust::client::FfiLightList> *ptr) noexcept {
  ::carla_rust::client::FfiLightList *uninit = reinterpret_cast<::carla_rust::client::FfiLightList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiLightList>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLightList>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiLightList$raw(::std::unique_ptr<::carla_rust::client::FfiLightList> *ptr, ::carla_rust::client::FfiLightList *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLightList>(raw);
}
::carla_rust::client::FfiLightList const *cxxbridge1$unique_ptr$carla_rust$client$FfiLightList$get(::std::unique_ptr<::carla_rust::client::FfiLightList> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiLightList *cxxbridge1$unique_ptr$carla_rust$client$FfiLightList$release(::std::unique_ptr<::carla_rust::client::FfiLightList> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiLightList$drop(::std::unique_ptr<::carla_rust::client::FfiLightList> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiLightList>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiLightList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiLightList>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiLightList$null(::std::shared_ptr<::carla_rust::client::FfiLightList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLightList>();
}
::carla_rust::client::FfiLightList *cxxbridge1$shared_ptr$carla_rust$client$FfiLightList$uninit(::std::shared_ptr<::carla_rust::client::FfiLightList> *ptr) noexcept {
  ::carla_rust::client::FfiLightList *uninit = reinterpret_cast<::carla_rust::client::FfiLightList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiLightList>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLightList>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiLightList$clone(::std::shared_ptr<::carla_rust::client::FfiLightList> const &self, ::std::shared_ptr<::carla_rust::client::FfiLightList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLightList>(self);
}
::carla_rust::client::FfiLightList const *cxxbridge1$shared_ptr$carla_rust$client$FfiLightList$get(::std::shared_ptr<::carla_rust::client::FfiLightList> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiLightList$drop(::std::shared_ptr<::carla_rust::client::FfiLightList> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiLightList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiLightList>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightList$null(::std::weak_ptr<::carla_rust::client::FfiLightList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiLightList>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightList$clone(::std::weak_ptr<::carla_rust::client::FfiLightList> const &self, ::std::weak_ptr<::carla_rust::client::FfiLightList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiLightList>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightList$downgrade(::std::shared_ptr<::carla_rust::client::FfiLightList> const &shared, ::std::weak_ptr<::carla_rust::client::FfiLightList> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiLightList>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightList$upgrade(::std::weak_ptr<::carla_rust::client::FfiLightList> const &weak, ::std::shared_ptr<::carla_rust::client::FfiLightList> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiLightList>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightList$drop(::std::weak_ptr<::carla_rust::client::FfiLightList> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiLightList> *cxxbridge1$std$vector$carla_rust$client$FfiLightList$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiLightList>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiLightList$size(::std::vector<::carla_rust::client::FfiLightList> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiLightList *cxxbridge1$std$vector$carla_rust$client$FfiLightList$get_unchecked(::std::vector<::carla_rust::client::FfiLightList> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiLightList$push_back(::std::vector<::carla_rust::client::FfiLightList> *v, ::carla_rust::client::FfiLightList *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiLightList$pop_back(::std::vector<::carla_rust::client::FfiLightList> *v, ::carla_rust::client::FfiLightList *out) noexcept {
  ::new (out) ::carla_rust::client::FfiLightList(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiLightList>>::value, "definition of `::std::vector<::carla_rust::client::FfiLightList>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightList>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightList>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLightList$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightList>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightList>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLightList$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightList>> *ptr, ::std::vector<::carla_rust::client::FfiLightList> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightList>>(raw);
}
::std::vector<::carla_rust::client::FfiLightList> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLightList$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightList>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiLightList> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLightList$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightList>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiLightList$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiLightList>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiLightList>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiLightManager>::value, "definition of `::carla_rust::client::FfiLightManager` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiLightManager>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiLightManager>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiLightManager$null(::std::unique_ptr<::carla_rust::client::FfiLightManager> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLightManager>();
}
::carla_rust::client::FfiLightManager *cxxbridge1$unique_ptr$carla_rust$client$FfiLightManager$uninit(::std::unique_ptr<::carla_rust::client::FfiLightManager> *ptr) noexcept {
  ::carla_rust::client::FfiLightManager *uninit = reinterpret_cast<::carla_rust::client::FfiLightManager *>(new ::rust::MaybeUninit<::carla_rust::client::FfiLightManager>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLightManager>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiLightManager$raw(::std::unique_ptr<::carla_rust::client::FfiLightManager> *ptr, ::carla_rust::client::FfiLightManager *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiLightManager>(raw);
}
::carla_rust::client::FfiLightManager const *cxxbridge1$unique_ptr$carla_rust$client$FfiLightManager$get(::std::unique_ptr<::carla_rust::client::FfiLightManager> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiLightManager *cxxbridge1$unique_ptr$carla_rust$client$FfiLightManager$release(::std::unique_ptr<::carla_rust::client::FfiLightManager> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiLightManager$drop(::std::unique_ptr<::carla_rust::client::FfiLightManager> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiLightManager>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiLightManager>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiLightManager>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiLightManager$null(::std::shared_ptr<::carla_rust::client::FfiLightManager> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLightManager>();
}
::carla_rust::client::FfiLightManager *cxxbridge1$shared_ptr$carla_rust$client$FfiLightManager$uninit(::std::shared_ptr<::carla_rust::client::FfiLightManager> *ptr) noexcept {
  ::carla_rust::client::FfiLightManager *uninit = reinterpret_cast<::carla_rust::client::FfiLightManager *>(new ::rust::MaybeUninit<::carla_rust::client::FfiLightManager>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLightManager>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiLightManager$clone(::std::shared_ptr<::carla_rust::client::FfiLightManager> const &self, ::std::shared_ptr<::carla_rust::client::FfiLightManager> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiLightManager>(self);
}
::carla_rust::client::FfiLightManager const *cxxbridge1$shared_ptr$carla_rust$client$FfiLightManager$get(::std::shared_ptr<::carla_rust::client::FfiLightManager> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiLightManager$drop(::std::shared_ptr<::carla_rust::client::FfiLightManager> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiLightManager>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiLightManager>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightManager$null(::std::weak_ptr<::carla_rust::client::FfiLightManager> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiLightManager>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightManager$clone(::std::weak_ptr<::carla_rust::client::FfiLightManager> const &self, ::std::weak_ptr<::carla_rust::client::FfiLightManager> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiLightManager>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightManager$downgrade(::std::shared_ptr<::carla_rust::client::FfiLightManager> const &shared, ::std::weak_ptr<::carla_rust::client::FfiLightManager> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiLightManager>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightManager$upgrade(::std::weak_ptr<::carla_rust::client::FfiLightManager> const &weak, ::std::shared_ptr<::carla_rust::client::FfiLightManager> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiLightManager>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiLightManager$drop(::std::weak_ptr<::carla_rust::client::FfiLightManager> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiWorld>::value, "definition of `::carla_rust::client::FfiWorld` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiWorld>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiWorld>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiWorld$null(::std::unique_ptr<::carla_rust::client::FfiWorld> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWorld>();
}
::carla_rust::client::FfiWorld *cxxbridge1$unique_ptr$carla_rust$client$FfiWorld$uninit(::std::unique_ptr<::carla_rust::client::FfiWorld> *ptr) noexcept {
  ::carla_rust::client::FfiWorld *uninit = reinterpret_cast<::carla_rust::client::FfiWorld *>(new ::rust::MaybeUninit<::carla_rust::client::FfiWorld>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWorld>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiWorld$raw(::std::unique_ptr<::carla_rust::client::FfiWorld> *ptr, ::carla_rust::client::FfiWorld *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiWorld>(raw);
}
::carla_rust::client::FfiWorld const *cxxbridge1$unique_ptr$carla_rust$client$FfiWorld$get(::std::unique_ptr<::carla_rust::client::FfiWorld> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiWorld *cxxbridge1$unique_ptr$carla_rust$client$FfiWorld$release(::std::unique_ptr<::carla_rust::client::FfiWorld> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiWorld$drop(::std::unique_ptr<::carla_rust::client::FfiWorld> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiWorld>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiWorld>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiWorld>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiWorld$null(::std::shared_ptr<::carla_rust::client::FfiWorld> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWorld>();
}
::carla_rust::client::FfiWorld *cxxbridge1$shared_ptr$carla_rust$client$FfiWorld$uninit(::std::shared_ptr<::carla_rust::client::FfiWorld> *ptr) noexcept {
  ::carla_rust::client::FfiWorld *uninit = reinterpret_cast<::carla_rust::client::FfiWorld *>(new ::rust::MaybeUninit<::carla_rust::client::FfiWorld>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWorld>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiWorld$clone(::std::shared_ptr<::carla_rust::client::FfiWorld> const &self, ::std::shared_ptr<::carla_rust::client::FfiWorld> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiWorld>(self);
}
::carla_rust::client::FfiWorld const *cxxbridge1$shared_ptr$carla_rust$client$FfiWorld$get(::std::shared_ptr<::carla_rust::client::FfiWorld> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiWorld$drop(::std::shared_ptr<::carla_rust::client::FfiWorld> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiWorld>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiWorld>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiWorld$null(::std::weak_ptr<::carla_rust::client::FfiWorld> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiWorld>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWorld$clone(::std::weak_ptr<::carla_rust::client::FfiWorld> const &self, ::std::weak_ptr<::carla_rust::client::FfiWorld> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiWorld>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWorld$downgrade(::std::shared_ptr<::carla_rust::client::FfiWorld> const &shared, ::std::weak_ptr<::carla_rust::client::FfiWorld> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiWorld>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWorld$upgrade(::std::weak_ptr<::carla_rust::client::FfiWorld> const &weak, ::std::shared_ptr<::carla_rust::client::FfiWorld> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiWorld>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiWorld$drop(::std::weak_ptr<::carla_rust::client::FfiWorld> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiWorld> *cxxbridge1$std$vector$carla_rust$client$FfiWorld$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiWorld>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiWorld$size(::std::vector<::carla_rust::client::FfiWorld> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiWorld *cxxbridge1$std$vector$carla_rust$client$FfiWorld$get_unchecked(::std::vector<::carla_rust::client::FfiWorld> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiWorld$push_back(::std::vector<::carla_rust::client::FfiWorld> *v, ::carla_rust::client::FfiWorld *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiWorld$pop_back(::std::vector<::carla_rust::client::FfiWorld> *v, ::carla_rust::client::FfiWorld *out) noexcept {
  ::new (out) ::carla_rust::client::FfiWorld(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiWorld>>::value, "definition of `::std::vector<::carla_rust::client::FfiWorld>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorld>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorld>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWorld$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorld>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorld>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWorld$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorld>> *ptr, ::std::vector<::carla_rust::client::FfiWorld> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorld>>(raw);
}
::std::vector<::carla_rust::client::FfiWorld> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWorld$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorld>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiWorld> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWorld$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorld>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiWorld$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiWorld>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiWorld>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiClient>::value, "definition of `::carla_rust::client::FfiClient` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiClient>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiClient>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiClient$null(::std::unique_ptr<::carla_rust::client::FfiClient> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiClient>();
}
::carla_rust::client::FfiClient *cxxbridge1$unique_ptr$carla_rust$client$FfiClient$uninit(::std::unique_ptr<::carla_rust::client::FfiClient> *ptr) noexcept {
  ::carla_rust::client::FfiClient *uninit = reinterpret_cast<::carla_rust::client::FfiClient *>(new ::rust::MaybeUninit<::carla_rust::client::FfiClient>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiClient>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiClient$raw(::std::unique_ptr<::carla_rust::client::FfiClient> *ptr, ::carla_rust::client::FfiClient *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiClient>(raw);
}
::carla_rust::client::FfiClient const *cxxbridge1$unique_ptr$carla_rust$client$FfiClient$get(::std::unique_ptr<::carla_rust::client::FfiClient> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiClient *cxxbridge1$unique_ptr$carla_rust$client$FfiClient$release(::std::unique_ptr<::carla_rust::client::FfiClient> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiClient$drop(::std::unique_ptr<::carla_rust::client::FfiClient> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiClient>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiClient>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiClient>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiClient$null(::std::shared_ptr<::carla_rust::client::FfiClient> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiClient>();
}
::carla_rust::client::FfiClient *cxxbridge1$shared_ptr$carla_rust$client$FfiClient$uninit(::std::shared_ptr<::carla_rust::client::FfiClient> *ptr) noexcept {
  ::carla_rust::client::FfiClient *uninit = reinterpret_cast<::carla_rust::client::FfiClient *>(new ::rust::MaybeUninit<::carla_rust::client::FfiClient>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiClient>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiClient$clone(::std::shared_ptr<::carla_rust::client::FfiClient> const &self, ::std::shared_ptr<::carla_rust::client::FfiClient> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiClient>(self);
}
::carla_rust::client::FfiClient const *cxxbridge1$shared_ptr$carla_rust$client$FfiClient$get(::std::shared_ptr<::carla_rust::client::FfiClient> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiClient$drop(::std::shared_ptr<::carla_rust::client::FfiClient> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiClient>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiClient>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiClient$null(::std::weak_ptr<::carla_rust::client::FfiClient> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiClient>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiClient$clone(::std::weak_ptr<::carla_rust::client::FfiClient> const &self, ::std::weak_ptr<::carla_rust::client::FfiClient> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiClient>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiClient$downgrade(::std::shared_ptr<::carla_rust::client::FfiClient> const &shared, ::std::weak_ptr<::carla_rust::client::FfiClient> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiClient>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiClient$upgrade(::std::weak_ptr<::carla_rust::client::FfiClient> const &weak, ::std::shared_ptr<::carla_rust::client::FfiClient> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiClient>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiClient$drop(::std::weak_ptr<::carla_rust::client::FfiClient> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiClient> *cxxbridge1$std$vector$carla_rust$client$FfiClient$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiClient>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiClient$size(::std::vector<::carla_rust::client::FfiClient> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiClient *cxxbridge1$std$vector$carla_rust$client$FfiClient$get_unchecked(::std::vector<::carla_rust::client::FfiClient> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiClient$push_back(::std::vector<::carla_rust::client::FfiClient> *v, ::carla_rust::client::FfiClient *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiClient$pop_back(::std::vector<::carla_rust::client::FfiClient> *v, ::carla_rust::client::FfiClient *out) noexcept {
  ::new (out) ::carla_rust::client::FfiClient(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiClient>>::value, "definition of `::std::vector<::carla_rust::client::FfiClient>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClient>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClient>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiClient$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClient>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiClient>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiClient$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClient>> *ptr, ::std::vector<::carla_rust::client::FfiClient> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiClient>>(raw);
}
::std::vector<::carla_rust::client::FfiClient> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiClient$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClient>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiClient> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiClient$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClient>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiClient$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiClient>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiClient>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiTrafficLightList>::value, "definition of `::carla_rust::client::FfiTrafficLightList` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiTrafficLightList>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiTrafficLightList>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficLightList$null(::std::unique_ptr<::carla_rust::client::FfiTrafficLightList> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiTrafficLightList>();
}
::carla_rust::client::FfiTrafficLightList *cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficLightList$uninit(::std::unique_ptr<::carla_rust::client::FfiTrafficLightList> *ptr) noexcept {
  ::carla_rust::client::FfiTrafficLightList *uninit = reinterpret_cast<::carla_rust::client::FfiTrafficLightList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiTrafficLightList>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiTrafficLightList>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficLightList$raw(::std::unique_ptr<::carla_rust::client::FfiTrafficLightList> *ptr, ::carla_rust::client::FfiTrafficLightList *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiTrafficLightList>(raw);
}
::carla_rust::client::FfiTrafficLightList const *cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficLightList$get(::std::unique_ptr<::carla_rust::client::FfiTrafficLightList> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiTrafficLightList *cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficLightList$release(::std::unique_ptr<::carla_rust::client::FfiTrafficLightList> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficLightList$drop(::std::unique_ptr<::carla_rust::client::FfiTrafficLightList> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiTrafficLightList>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiTrafficLightList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiTrafficLightList>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficLightList$null(::std::shared_ptr<::carla_rust::client::FfiTrafficLightList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiTrafficLightList>();
}
::carla_rust::client::FfiTrafficLightList *cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficLightList$uninit(::std::shared_ptr<::carla_rust::client::FfiTrafficLightList> *ptr) noexcept {
  ::carla_rust::client::FfiTrafficLightList *uninit = reinterpret_cast<::carla_rust::client::FfiTrafficLightList *>(new ::rust::MaybeUninit<::carla_rust::client::FfiTrafficLightList>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiTrafficLightList>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficLightList$clone(::std::shared_ptr<::carla_rust::client::FfiTrafficLightList> const &self, ::std::shared_ptr<::carla_rust::client::FfiTrafficLightList> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiTrafficLightList>(self);
}
::carla_rust::client::FfiTrafficLightList const *cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficLightList$get(::std::shared_ptr<::carla_rust::client::FfiTrafficLightList> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficLightList$drop(::std::shared_ptr<::carla_rust::client::FfiTrafficLightList> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiTrafficLightList>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiTrafficLightList>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficLightList$null(::std::weak_ptr<::carla_rust::client::FfiTrafficLightList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiTrafficLightList>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficLightList$clone(::std::weak_ptr<::carla_rust::client::FfiTrafficLightList> const &self, ::std::weak_ptr<::carla_rust::client::FfiTrafficLightList> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiTrafficLightList>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficLightList$downgrade(::std::shared_ptr<::carla_rust::client::FfiTrafficLightList> const &shared, ::std::weak_ptr<::carla_rust::client::FfiTrafficLightList> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiTrafficLightList>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficLightList$upgrade(::std::weak_ptr<::carla_rust::client::FfiTrafficLightList> const &weak, ::std::shared_ptr<::carla_rust::client::FfiTrafficLightList> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiTrafficLightList>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficLightList$drop(::std::weak_ptr<::carla_rust::client::FfiTrafficLightList> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::client::FfiTrafficLightList> *cxxbridge1$std$vector$carla_rust$client$FfiTrafficLightList$new() noexcept {
  return new ::std::vector<::carla_rust::client::FfiTrafficLightList>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$client$FfiTrafficLightList$size(::std::vector<::carla_rust::client::FfiTrafficLightList> const &s) noexcept {
  return s.size();
}
::carla_rust::client::FfiTrafficLightList *cxxbridge1$std$vector$carla_rust$client$FfiTrafficLightList$get_unchecked(::std::vector<::carla_rust::client::FfiTrafficLightList> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$client$FfiTrafficLightList$push_back(::std::vector<::carla_rust::client::FfiTrafficLightList> *v, ::carla_rust::client::FfiTrafficLightList *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$client$FfiTrafficLightList$pop_back(::std::vector<::carla_rust::client::FfiTrafficLightList> *v, ::carla_rust::client::FfiTrafficLightList *out) noexcept {
  ::new (out) ::carla_rust::client::FfiTrafficLightList(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiTrafficLightList>>::value, "definition of `::std::vector<::carla_rust::client::FfiTrafficLightList>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTrafficLightList>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTrafficLightList>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiTrafficLightList$null(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTrafficLightList>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiTrafficLightList>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiTrafficLightList$raw(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTrafficLightList>> *ptr, ::std::vector<::carla_rust::client::FfiTrafficLightList> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::client::FfiTrafficLightList>>(raw);
}
::std::vector<::carla_rust::client::FfiTrafficLightList> const *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiTrafficLightList$get(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTrafficLightList>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::client::FfiTrafficLightList> *cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiTrafficLightList$release(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTrafficLightList>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$client$FfiTrafficLightList$drop(::std::unique_ptr<::std::vector<::carla_rust::client::FfiTrafficLightList>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::client::FfiTrafficLightList>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::client::FfiTrafficLight>::value, "definition of `::carla_rust::client::FfiTrafficLight` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::client::FfiTrafficLight>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::client::FfiTrafficLight>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficLight$null(::std::unique_ptr<::carla_rust::client::FfiTrafficLight> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiTrafficLight>();
}
::carla_rust::client::FfiTrafficLight *cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficLight$uninit(::std::unique_ptr<::carla_rust::client::FfiTrafficLight> *ptr) noexcept {
  ::carla_rust::client::FfiTrafficLight *uninit = reinterpret_cast<::carla_rust::client::FfiTrafficLight *>(new ::rust::MaybeUninit<::carla_rust::client::FfiTrafficLight>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiTrafficLight>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficLight$raw(::std::unique_ptr<::carla_rust::client::FfiTrafficLight> *ptr, ::carla_rust::client::FfiTrafficLight *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::client::FfiTrafficLight>(raw);
}
::carla_rust::client::FfiTrafficLight const *cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficLight$get(::std::unique_ptr<::carla_rust::client::FfiTrafficLight> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::client::FfiTrafficLight *cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficLight$release(::std::unique_ptr<::carla_rust::client::FfiTrafficLight> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$client$FfiTrafficLight$drop(::std::unique_ptr<::carla_rust::client::FfiTrafficLight> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::client::FfiTrafficLight>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::client::FfiTrafficLight>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::client::FfiTrafficLight>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficLight$null(::std::shared_ptr<::carla_rust::client::FfiTrafficLight> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiTrafficLight>();
}
::carla_rust::client::FfiTrafficLight *cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficLight$uninit(::std::shared_ptr<::carla_rust::client::FfiTrafficLight> *ptr) noexcept {
  ::carla_rust::client::FfiTrafficLight *uninit = reinterpret_cast<::carla_rust::client::FfiTrafficLight *>(new ::rust::MaybeUninit<::carla_rust::client::FfiTrafficLight>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiTrafficLight>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficLight$clone(::std::shared_ptr<::carla_rust::client::FfiTrafficLight> const &self, ::std::shared_ptr<::carla_rust::client::FfiTrafficLight> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::client::FfiTrafficLight>(self);
}
::carla_rust::client::FfiTrafficLight const *cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficLight$get(::std::shared_ptr<::carla_rust::client::FfiTrafficLight> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$client$FfiTrafficLight$drop(::std::shared_ptr<::carla_rust::client::FfiTrafficLight> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::client::FfiTrafficLight>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::client::FfiTrafficLight>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficLight$null(::std::weak_ptr<::carla_rust::client::FfiTrafficLight> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiTrafficLight>();
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficLight$clone(::std::weak_ptr<::carla_rust::client::FfiTrafficLight> const &self, ::std::weak_ptr<::carla_rust::client::FfiTrafficLight> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::client::FfiTrafficLight>(self);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficLight$downgrade(::std::shared_ptr<::carla_rust::client::FfiTrafficLight> const &shared, ::std::weak_ptr<::carla_rust::client::FfiTrafficLight> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::client::FfiTrafficLight>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficLight$upgrade(::std::weak_ptr<::carla_rust::client::FfiTrafficLight> const &weak, ::std::shared_ptr<::carla_rust::client::FfiTrafficLight> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::client::FfiTrafficLight>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$client$FfiTrafficLight$drop(::std::weak_ptr<::carla_rust::client::FfiTrafficLight> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::road::element::FfiLaneMarking>::value, "definition of `::carla_rust::road::element::FfiLaneMarking` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::road::element::FfiLaneMarking>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::road::element::FfiLaneMarking>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$road$element$FfiLaneMarking$null(::std::unique_ptr<::carla_rust::road::element::FfiLaneMarking> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::road::element::FfiLaneMarking>();
}
::carla_rust::road::element::FfiLaneMarking *cxxbridge1$unique_ptr$carla_rust$road$element$FfiLaneMarking$uninit(::std::unique_ptr<::carla_rust::road::element::FfiLaneMarking> *ptr) noexcept {
  ::carla_rust::road::element::FfiLaneMarking *uninit = reinterpret_cast<::carla_rust::road::element::FfiLaneMarking *>(new ::rust::MaybeUninit<::carla_rust::road::element::FfiLaneMarking>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::road::element::FfiLaneMarking>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$road$element$FfiLaneMarking$raw(::std::unique_ptr<::carla_rust::road::element::FfiLaneMarking> *ptr, ::carla_rust::road::element::FfiLaneMarking *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::road::element::FfiLaneMarking>(raw);
}
::carla_rust::road::element::FfiLaneMarking const *cxxbridge1$unique_ptr$carla_rust$road$element$FfiLaneMarking$get(::std::unique_ptr<::carla_rust::road::element::FfiLaneMarking> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::road::element::FfiLaneMarking *cxxbridge1$unique_ptr$carla_rust$road$element$FfiLaneMarking$release(::std::unique_ptr<::carla_rust::road::element::FfiLaneMarking> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$road$element$FfiLaneMarking$drop(::std::unique_ptr<::carla_rust::road::element::FfiLaneMarking> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::road::element::FfiLaneMarking>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$road$element$FfiLaneMarking$null(::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking>();
}
::carla_rust::road::element::FfiLaneMarking *cxxbridge1$shared_ptr$carla_rust$road$element$FfiLaneMarking$uninit(::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking> *ptr) noexcept {
  ::carla_rust::road::element::FfiLaneMarking *uninit = reinterpret_cast<::carla_rust::road::element::FfiLaneMarking *>(new ::rust::MaybeUninit<::carla_rust::road::element::FfiLaneMarking>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$road$element$FfiLaneMarking$clone(::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking> const &self, ::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking>(self);
}
::carla_rust::road::element::FfiLaneMarking const *cxxbridge1$shared_ptr$carla_rust$road$element$FfiLaneMarking$get(::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$road$element$FfiLaneMarking$drop(::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::road::element::FfiLaneMarking>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::road::element::FfiLaneMarking>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$road$element$FfiLaneMarking$null(::std::weak_ptr<::carla_rust::road::element::FfiLaneMarking> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::road::element::FfiLaneMarking>();
}
void cxxbridge1$weak_ptr$carla_rust$road$element$FfiLaneMarking$clone(::std::weak_ptr<::carla_rust::road::element::FfiLaneMarking> const &self, ::std::weak_ptr<::carla_rust::road::element::FfiLaneMarking> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::road::element::FfiLaneMarking>(self);
}
void cxxbridge1$weak_ptr$carla_rust$road$element$FfiLaneMarking$downgrade(::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking> const &shared, ::std::weak_ptr<::carla_rust::road::element::FfiLaneMarking> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::road::element::FfiLaneMarking>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$road$element$FfiLaneMarking$upgrade(::std::weak_ptr<::carla_rust::road::element::FfiLaneMarking> const &weak, ::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::road::element::FfiLaneMarking>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$road$element$FfiLaneMarking$drop(::std::weak_ptr<::carla_rust::road::element::FfiLaneMarking> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::road::element::FfiLaneMarking> *cxxbridge1$std$vector$carla_rust$road$element$FfiLaneMarking$new() noexcept {
  return new ::std::vector<::carla_rust::road::element::FfiLaneMarking>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$road$element$FfiLaneMarking$size(::std::vector<::carla_rust::road::element::FfiLaneMarking> const &s) noexcept {
  return s.size();
}
::carla_rust::road::element::FfiLaneMarking *cxxbridge1$std$vector$carla_rust$road$element$FfiLaneMarking$get_unchecked(::std::vector<::carla_rust::road::element::FfiLaneMarking> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$road$element$FfiLaneMarking$push_back(::std::vector<::carla_rust::road::element::FfiLaneMarking> *v, ::carla_rust::road::element::FfiLaneMarking *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$road$element$FfiLaneMarking$pop_back(::std::vector<::carla_rust::road::element::FfiLaneMarking> *v, ::carla_rust::road::element::FfiLaneMarking *out) noexcept {
  ::new (out) ::carla_rust::road::element::FfiLaneMarking(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::road::element::FfiLaneMarking>>::value, "definition of `::std::vector<::carla_rust::road::element::FfiLaneMarking>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::road::element::FfiLaneMarking>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::road::element::FfiLaneMarking>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$road$element$FfiLaneMarking$null(::std::unique_ptr<::std::vector<::carla_rust::road::element::FfiLaneMarking>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::road::element::FfiLaneMarking>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$road$element$FfiLaneMarking$raw(::std::unique_ptr<::std::vector<::carla_rust::road::element::FfiLaneMarking>> *ptr, ::std::vector<::carla_rust::road::element::FfiLaneMarking> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::road::element::FfiLaneMarking>>(raw);
}
::std::vector<::carla_rust::road::element::FfiLaneMarking> const *cxxbridge1$unique_ptr$std$vector$carla_rust$road$element$FfiLaneMarking$get(::std::unique_ptr<::std::vector<::carla_rust::road::element::FfiLaneMarking>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::road::element::FfiLaneMarking> *cxxbridge1$unique_ptr$std$vector$carla_rust$road$element$FfiLaneMarking$release(::std::unique_ptr<::std::vector<::carla_rust::road::element::FfiLaneMarking>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$road$element$FfiLaneMarking$drop(::std::unique_ptr<::std::vector<::carla_rust::road::element::FfiLaneMarking>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::road::element::FfiLaneMarking>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::traffic_manager::FfiAction>::value, "definition of `::carla_rust::traffic_manager::FfiAction` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::traffic_manager::FfiAction>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::traffic_manager::FfiAction>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiAction$null(::std::unique_ptr<::carla_rust::traffic_manager::FfiAction> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::traffic_manager::FfiAction>();
}
::carla_rust::traffic_manager::FfiAction *cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiAction$uninit(::std::unique_ptr<::carla_rust::traffic_manager::FfiAction> *ptr) noexcept {
  ::carla_rust::traffic_manager::FfiAction *uninit = reinterpret_cast<::carla_rust::traffic_manager::FfiAction *>(new ::rust::MaybeUninit<::carla_rust::traffic_manager::FfiAction>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::traffic_manager::FfiAction>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiAction$raw(::std::unique_ptr<::carla_rust::traffic_manager::FfiAction> *ptr, ::carla_rust::traffic_manager::FfiAction *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::traffic_manager::FfiAction>(raw);
}
::carla_rust::traffic_manager::FfiAction const *cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiAction$get(::std::unique_ptr<::carla_rust::traffic_manager::FfiAction> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::traffic_manager::FfiAction *cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiAction$release(::std::unique_ptr<::carla_rust::traffic_manager::FfiAction> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiAction$drop(::std::unique_ptr<::carla_rust::traffic_manager::FfiAction> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::traffic_manager::FfiAction>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::traffic_manager::FfiAction>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::traffic_manager::FfiAction>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiAction$null(::std::shared_ptr<::carla_rust::traffic_manager::FfiAction> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::traffic_manager::FfiAction>();
}
::carla_rust::traffic_manager::FfiAction *cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiAction$uninit(::std::shared_ptr<::carla_rust::traffic_manager::FfiAction> *ptr) noexcept {
  ::carla_rust::traffic_manager::FfiAction *uninit = reinterpret_cast<::carla_rust::traffic_manager::FfiAction *>(new ::rust::MaybeUninit<::carla_rust::traffic_manager::FfiAction>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::traffic_manager::FfiAction>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiAction$clone(::std::shared_ptr<::carla_rust::traffic_manager::FfiAction> const &self, ::std::shared_ptr<::carla_rust::traffic_manager::FfiAction> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::traffic_manager::FfiAction>(self);
}
::carla_rust::traffic_manager::FfiAction const *cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiAction$get(::std::shared_ptr<::carla_rust::traffic_manager::FfiAction> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiAction$drop(::std::shared_ptr<::carla_rust::traffic_manager::FfiAction> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::traffic_manager::FfiAction>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::traffic_manager::FfiAction>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiAction$null(::std::weak_ptr<::carla_rust::traffic_manager::FfiAction> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::traffic_manager::FfiAction>();
}
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiAction$clone(::std::weak_ptr<::carla_rust::traffic_manager::FfiAction> const &self, ::std::weak_ptr<::carla_rust::traffic_manager::FfiAction> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::traffic_manager::FfiAction>(self);
}
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiAction$downgrade(::std::shared_ptr<::carla_rust::traffic_manager::FfiAction> const &shared, ::std::weak_ptr<::carla_rust::traffic_manager::FfiAction> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::traffic_manager::FfiAction>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiAction$upgrade(::std::weak_ptr<::carla_rust::traffic_manager::FfiAction> const &weak, ::std::shared_ptr<::carla_rust::traffic_manager::FfiAction> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::traffic_manager::FfiAction>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiAction$drop(::std::weak_ptr<::carla_rust::traffic_manager::FfiAction> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla_rust::traffic_manager::FfiActionBuffer>::value, "definition of `::carla_rust::traffic_manager::FfiActionBuffer` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::traffic_manager::FfiActionBuffer>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::traffic_manager::FfiActionBuffer>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiActionBuffer$null(::std::unique_ptr<::carla_rust::traffic_manager::FfiActionBuffer> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::traffic_manager::FfiActionBuffer>();
}
::carla_rust::traffic_manager::FfiActionBuffer *cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiActionBuffer$uninit(::std::unique_ptr<::carla_rust::traffic_manager::FfiActionBuffer> *ptr) noexcept {
  ::carla_rust::traffic_manager::FfiActionBuffer *uninit = reinterpret_cast<::carla_rust::traffic_manager::FfiActionBuffer *>(new ::rust::MaybeUninit<::carla_rust::traffic_manager::FfiActionBuffer>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::traffic_manager::FfiActionBuffer>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiActionBuffer$raw(::std::unique_ptr<::carla_rust::traffic_manager::FfiActionBuffer> *ptr, ::carla_rust::traffic_manager::FfiActionBuffer *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::traffic_manager::FfiActionBuffer>(raw);
}
::carla_rust::traffic_manager::FfiActionBuffer const *cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiActionBuffer$get(::std::unique_ptr<::carla_rust::traffic_manager::FfiActionBuffer> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::traffic_manager::FfiActionBuffer *cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiActionBuffer$release(::std::unique_ptr<::carla_rust::traffic_manager::FfiActionBuffer> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiActionBuffer$drop(::std::unique_ptr<::carla_rust::traffic_manager::FfiActionBuffer> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::traffic_manager::FfiActionBuffer>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiActionBuffer$null(::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer>();
}
::carla_rust::traffic_manager::FfiActionBuffer *cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiActionBuffer$uninit(::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer> *ptr) noexcept {
  ::carla_rust::traffic_manager::FfiActionBuffer *uninit = reinterpret_cast<::carla_rust::traffic_manager::FfiActionBuffer *>(new ::rust::MaybeUninit<::carla_rust::traffic_manager::FfiActionBuffer>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiActionBuffer$clone(::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer> const &self, ::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer>(self);
}
::carla_rust::traffic_manager::FfiActionBuffer const *cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiActionBuffer$get(::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiActionBuffer$drop(::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::traffic_manager::FfiActionBuffer>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::traffic_manager::FfiActionBuffer>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiActionBuffer$null(::std::weak_ptr<::carla_rust::traffic_manager::FfiActionBuffer> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::traffic_manager::FfiActionBuffer>();
}
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiActionBuffer$clone(::std::weak_ptr<::carla_rust::traffic_manager::FfiActionBuffer> const &self, ::std::weak_ptr<::carla_rust::traffic_manager::FfiActionBuffer> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::traffic_manager::FfiActionBuffer>(self);
}
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiActionBuffer$downgrade(::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer> const &shared, ::std::weak_ptr<::carla_rust::traffic_manager::FfiActionBuffer> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::traffic_manager::FfiActionBuffer>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiActionBuffer$upgrade(::std::weak_ptr<::carla_rust::traffic_manager::FfiActionBuffer> const &weak, ::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::traffic_manager::FfiActionBuffer>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiActionBuffer$drop(::std::weak_ptr<::carla_rust::traffic_manager::FfiActionBuffer> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::traffic_manager::FfiActionBuffer> *cxxbridge1$std$vector$carla_rust$traffic_manager$FfiActionBuffer$new() noexcept {
  return new ::std::vector<::carla_rust::traffic_manager::FfiActionBuffer>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$traffic_manager$FfiActionBuffer$size(::std::vector<::carla_rust::traffic_manager::FfiActionBuffer> const &s) noexcept {
  return s.size();
}
::carla_rust::traffic_manager::FfiActionBuffer *cxxbridge1$std$vector$carla_rust$traffic_manager$FfiActionBuffer$get_unchecked(::std::vector<::carla_rust::traffic_manager::FfiActionBuffer> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$traffic_manager$FfiActionBuffer$push_back(::std::vector<::carla_rust::traffic_manager::FfiActionBuffer> *v, ::carla_rust::traffic_manager::FfiActionBuffer *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$traffic_manager$FfiActionBuffer$pop_back(::std::vector<::carla_rust::traffic_manager::FfiActionBuffer> *v, ::carla_rust::traffic_manager::FfiActionBuffer *out) noexcept {
  ::new (out) ::carla_rust::traffic_manager::FfiActionBuffer(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::traffic_manager::FfiActionBuffer>>::value, "definition of `::std::vector<::carla_rust::traffic_manager::FfiActionBuffer>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiActionBuffer>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiActionBuffer>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$traffic_manager$FfiActionBuffer$null(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiActionBuffer>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiActionBuffer>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$traffic_manager$FfiActionBuffer$raw(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiActionBuffer>> *ptr, ::std::vector<::carla_rust::traffic_manager::FfiActionBuffer> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiActionBuffer>>(raw);
}
::std::vector<::carla_rust::traffic_manager::FfiActionBuffer> const *cxxbridge1$unique_ptr$std$vector$carla_rust$traffic_manager$FfiActionBuffer$get(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiActionBuffer>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::traffic_manager::FfiActionBuffer> *cxxbridge1$unique_ptr$std$vector$carla_rust$traffic_manager$FfiActionBuffer$release(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiActionBuffer>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$traffic_manager$FfiActionBuffer$drop(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiActionBuffer>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::traffic_manager::FfiActionBuffer>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_rust::traffic_manager::FfiTrafficManager>::value, "definition of `::carla_rust::traffic_manager::FfiTrafficManager` is required");
static_assert(sizeof(::std::unique_ptr<::carla_rust::traffic_manager::FfiTrafficManager>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_rust::traffic_manager::FfiTrafficManager>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiTrafficManager$null(::std::unique_ptr<::carla_rust::traffic_manager::FfiTrafficManager> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::traffic_manager::FfiTrafficManager>();
}
::carla_rust::traffic_manager::FfiTrafficManager *cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiTrafficManager$uninit(::std::unique_ptr<::carla_rust::traffic_manager::FfiTrafficManager> *ptr) noexcept {
  ::carla_rust::traffic_manager::FfiTrafficManager *uninit = reinterpret_cast<::carla_rust::traffic_manager::FfiTrafficManager *>(new ::rust::MaybeUninit<::carla_rust::traffic_manager::FfiTrafficManager>);
  ::new (ptr) ::std::unique_ptr<::carla_rust::traffic_manager::FfiTrafficManager>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiTrafficManager$raw(::std::unique_ptr<::carla_rust::traffic_manager::FfiTrafficManager> *ptr, ::carla_rust::traffic_manager::FfiTrafficManager *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_rust::traffic_manager::FfiTrafficManager>(raw);
}
::carla_rust::traffic_manager::FfiTrafficManager const *cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiTrafficManager$get(::std::unique_ptr<::carla_rust::traffic_manager::FfiTrafficManager> const &ptr) noexcept {
  return ptr.get();
}
::carla_rust::traffic_manager::FfiTrafficManager *cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiTrafficManager$release(::std::unique_ptr<::carla_rust::traffic_manager::FfiTrafficManager> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_rust$traffic_manager$FfiTrafficManager$drop(::std::unique_ptr<::carla_rust::traffic_manager::FfiTrafficManager> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_rust::traffic_manager::FfiTrafficManager>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiTrafficManager$null(::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager>();
}
::carla_rust::traffic_manager::FfiTrafficManager *cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiTrafficManager$uninit(::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager> *ptr) noexcept {
  ::carla_rust::traffic_manager::FfiTrafficManager *uninit = reinterpret_cast<::carla_rust::traffic_manager::FfiTrafficManager *>(new ::rust::MaybeUninit<::carla_rust::traffic_manager::FfiTrafficManager>);
  ::new (ptr) ::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiTrafficManager$clone(::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager> const &self, ::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager>(self);
}
::carla_rust::traffic_manager::FfiTrafficManager const *cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiTrafficManager$get(::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_rust$traffic_manager$FfiTrafficManager$drop(::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_rust::traffic_manager::FfiTrafficManager>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_rust::traffic_manager::FfiTrafficManager>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiTrafficManager$null(::std::weak_ptr<::carla_rust::traffic_manager::FfiTrafficManager> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::traffic_manager::FfiTrafficManager>();
}
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiTrafficManager$clone(::std::weak_ptr<::carla_rust::traffic_manager::FfiTrafficManager> const &self, ::std::weak_ptr<::carla_rust::traffic_manager::FfiTrafficManager> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_rust::traffic_manager::FfiTrafficManager>(self);
}
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiTrafficManager$downgrade(::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager> const &shared, ::std::weak_ptr<::carla_rust::traffic_manager::FfiTrafficManager> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_rust::traffic_manager::FfiTrafficManager>(shared);
}
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiTrafficManager$upgrade(::std::weak_ptr<::carla_rust::traffic_manager::FfiTrafficManager> const &weak, ::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_rust::traffic_manager::FfiTrafficManager>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_rust$traffic_manager$FfiTrafficManager$drop(::std::weak_ptr<::carla_rust::traffic_manager::FfiTrafficManager> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla_rust::traffic_manager::FfiTrafficManager> *cxxbridge1$std$vector$carla_rust$traffic_manager$FfiTrafficManager$new() noexcept {
  return new ::std::vector<::carla_rust::traffic_manager::FfiTrafficManager>();
}
::std::size_t cxxbridge1$std$vector$carla_rust$traffic_manager$FfiTrafficManager$size(::std::vector<::carla_rust::traffic_manager::FfiTrafficManager> const &s) noexcept {
  return s.size();
}
::carla_rust::traffic_manager::FfiTrafficManager *cxxbridge1$std$vector$carla_rust$traffic_manager$FfiTrafficManager$get_unchecked(::std::vector<::carla_rust::traffic_manager::FfiTrafficManager> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla_rust$traffic_manager$FfiTrafficManager$push_back(::std::vector<::carla_rust::traffic_manager::FfiTrafficManager> *v, ::carla_rust::traffic_manager::FfiTrafficManager *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla_rust$traffic_manager$FfiTrafficManager$pop_back(::std::vector<::carla_rust::traffic_manager::FfiTrafficManager> *v, ::carla_rust::traffic_manager::FfiTrafficManager *out) noexcept {
  ::new (out) ::carla_rust::traffic_manager::FfiTrafficManager(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla_rust::traffic_manager::FfiTrafficManager>>::value, "definition of `::std::vector<::carla_rust::traffic_manager::FfiTrafficManager>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiTrafficManager>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiTrafficManager>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla_rust$traffic_manager$FfiTrafficManager$null(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiTrafficManager>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiTrafficManager>>();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$traffic_manager$FfiTrafficManager$raw(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiTrafficManager>> *ptr, ::std::vector<::carla_rust::traffic_manager::FfiTrafficManager> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiTrafficManager>>(raw);
}
::std::vector<::carla_rust::traffic_manager::FfiTrafficManager> const *cxxbridge1$unique_ptr$std$vector$carla_rust$traffic_manager$FfiTrafficManager$get(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiTrafficManager>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla_rust::traffic_manager::FfiTrafficManager> *cxxbridge1$unique_ptr$std$vector$carla_rust$traffic_manager$FfiTrafficManager$release(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiTrafficManager>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla_rust$traffic_manager$FfiTrafficManager$drop(::std::unique_ptr<::std::vector<::carla_rust::traffic_manager::FfiTrafficManager>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla_rust::traffic_manager::FfiTrafficManager>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::std_pair_float_float_AutocxxConcrete>::value, "definition of `::std_pair_float_float_AutocxxConcrete` is required");
static_assert(sizeof(::std::unique_ptr<::std_pair_float_float_AutocxxConcrete>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std_pair_float_float_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std_pair_float_float_AutocxxConcrete$null(::std::unique_ptr<::std_pair_float_float_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std_pair_float_float_AutocxxConcrete>();
}
void cxxbridge1$unique_ptr$std_pair_float_float_AutocxxConcrete$raw(::std::unique_ptr<::std_pair_float_float_AutocxxConcrete> *ptr, ::std_pair_float_float_AutocxxConcrete *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std_pair_float_float_AutocxxConcrete>(raw);
}
::std_pair_float_float_AutocxxConcrete const *cxxbridge1$unique_ptr$std_pair_float_float_AutocxxConcrete$get(::std::unique_ptr<::std_pair_float_float_AutocxxConcrete> const &ptr) noexcept {
  return ptr.get();
}
::std_pair_float_float_AutocxxConcrete *cxxbridge1$unique_ptr$std_pair_float_float_AutocxxConcrete$release(::std::unique_ptr<::std_pair_float_float_AutocxxConcrete> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std_pair_float_float_AutocxxConcrete$drop(::std::unique_ptr<::std_pair_float_float_AutocxxConcrete> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std_pair_float_float_AutocxxConcrete>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::std_pair_float_float_AutocxxConcrete>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::std_pair_float_float_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$shared_ptr$std_pair_float_float_AutocxxConcrete$null(::std::shared_ptr<::std_pair_float_float_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::std_pair_float_float_AutocxxConcrete>();
}
void cxxbridge1$shared_ptr$std_pair_float_float_AutocxxConcrete$clone(::std::shared_ptr<::std_pair_float_float_AutocxxConcrete> const &self, ::std::shared_ptr<::std_pair_float_float_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::std_pair_float_float_AutocxxConcrete>(self);
}
::std_pair_float_float_AutocxxConcrete const *cxxbridge1$shared_ptr$std_pair_float_float_AutocxxConcrete$get(::std::shared_ptr<::std_pair_float_float_AutocxxConcrete> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$std_pair_float_float_AutocxxConcrete$drop(::std::shared_ptr<::std_pair_float_float_AutocxxConcrete> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::std_pair_float_float_AutocxxConcrete>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::std_pair_float_float_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$weak_ptr$std_pair_float_float_AutocxxConcrete$null(::std::weak_ptr<::std_pair_float_float_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::std_pair_float_float_AutocxxConcrete>();
}
void cxxbridge1$weak_ptr$std_pair_float_float_AutocxxConcrete$clone(::std::weak_ptr<::std_pair_float_float_AutocxxConcrete> const &self, ::std::weak_ptr<::std_pair_float_float_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::std_pair_float_float_AutocxxConcrete>(self);
}
void cxxbridge1$weak_ptr$std_pair_float_float_AutocxxConcrete$downgrade(::std::shared_ptr<::std_pair_float_float_AutocxxConcrete> const &shared, ::std::weak_ptr<::std_pair_float_float_AutocxxConcrete> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::std_pair_float_float_AutocxxConcrete>(shared);
}
void cxxbridge1$weak_ptr$std_pair_float_float_AutocxxConcrete$upgrade(::std::weak_ptr<::std_pair_float_float_AutocxxConcrete> const &weak, ::std::shared_ptr<::std_pair_float_float_AutocxxConcrete> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::std_pair_float_float_AutocxxConcrete>(weak.lock());
}
void cxxbridge1$weak_ptr$std_pair_float_float_AutocxxConcrete$drop(::std::weak_ptr<::std_pair_float_float_AutocxxConcrete> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::road::Road>::value, "definition of `::carla::road::Road` is required");
static_assert(sizeof(::std::unique_ptr<::carla::road::Road>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::road::Road>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$road$Road$null(::std::unique_ptr<::carla::road::Road> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::Road>();
}
::carla::road::Road *cxxbridge1$unique_ptr$carla$road$Road$uninit(::std::unique_ptr<::carla::road::Road> *ptr) noexcept {
  ::carla::road::Road *uninit = reinterpret_cast<::carla::road::Road *>(new ::rust::MaybeUninit<::carla::road::Road>);
  ::new (ptr) ::std::unique_ptr<::carla::road::Road>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$road$Road$raw(::std::unique_ptr<::carla::road::Road> *ptr, ::carla::road::Road *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::Road>(raw);
}
::carla::road::Road const *cxxbridge1$unique_ptr$carla$road$Road$get(::std::unique_ptr<::carla::road::Road> const &ptr) noexcept {
  return ptr.get();
}
::carla::road::Road *cxxbridge1$unique_ptr$carla$road$Road$release(::std::unique_ptr<::carla::road::Road> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$road$Road$drop(::std::unique_ptr<::carla::road::Road> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::road::Road>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::road::Road>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::road::Road>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$road$Road$null(::std::shared_ptr<::carla::road::Road> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::Road>();
}
::carla::road::Road *cxxbridge1$shared_ptr$carla$road$Road$uninit(::std::shared_ptr<::carla::road::Road> *ptr) noexcept {
  ::carla::road::Road *uninit = reinterpret_cast<::carla::road::Road *>(new ::rust::MaybeUninit<::carla::road::Road>);
  ::new (ptr) ::std::shared_ptr<::carla::road::Road>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$road$Road$clone(::std::shared_ptr<::carla::road::Road> const &self, ::std::shared_ptr<::carla::road::Road> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::Road>(self);
}
::carla::road::Road const *cxxbridge1$shared_ptr$carla$road$Road$get(::std::shared_ptr<::carla::road::Road> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$road$Road$drop(::std::shared_ptr<::carla::road::Road> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::road::Road>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::road::Road>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$road$Road$null(::std::weak_ptr<::carla::road::Road> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::Road>();
}
void cxxbridge1$weak_ptr$carla$road$Road$clone(::std::weak_ptr<::carla::road::Road> const &self, ::std::weak_ptr<::carla::road::Road> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::Road>(self);
}
void cxxbridge1$weak_ptr$carla$road$Road$downgrade(::std::shared_ptr<::carla::road::Road> const &shared, ::std::weak_ptr<::carla::road::Road> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::road::Road>(shared);
}
void cxxbridge1$weak_ptr$carla$road$Road$upgrade(::std::weak_ptr<::carla::road::Road> const &weak, ::std::shared_ptr<::carla::road::Road> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::road::Road>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$road$Road$drop(::std::weak_ptr<::carla::road::Road> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::road::LaneSection>::value, "definition of `::carla::road::LaneSection` is required");
static_assert(sizeof(::std::unique_ptr<::carla::road::LaneSection>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::road::LaneSection>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$road$LaneSection$null(::std::unique_ptr<::carla::road::LaneSection> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::LaneSection>();
}
::carla::road::LaneSection *cxxbridge1$unique_ptr$carla$road$LaneSection$uninit(::std::unique_ptr<::carla::road::LaneSection> *ptr) noexcept {
  ::carla::road::LaneSection *uninit = reinterpret_cast<::carla::road::LaneSection *>(new ::rust::MaybeUninit<::carla::road::LaneSection>);
  ::new (ptr) ::std::unique_ptr<::carla::road::LaneSection>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$road$LaneSection$raw(::std::unique_ptr<::carla::road::LaneSection> *ptr, ::carla::road::LaneSection *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::LaneSection>(raw);
}
::carla::road::LaneSection const *cxxbridge1$unique_ptr$carla$road$LaneSection$get(::std::unique_ptr<::carla::road::LaneSection> const &ptr) noexcept {
  return ptr.get();
}
::carla::road::LaneSection *cxxbridge1$unique_ptr$carla$road$LaneSection$release(::std::unique_ptr<::carla::road::LaneSection> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$road$LaneSection$drop(::std::unique_ptr<::carla::road::LaneSection> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::road::LaneSection>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::road::LaneSection>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::road::LaneSection>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$road$LaneSection$null(::std::shared_ptr<::carla::road::LaneSection> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::LaneSection>();
}
::carla::road::LaneSection *cxxbridge1$shared_ptr$carla$road$LaneSection$uninit(::std::shared_ptr<::carla::road::LaneSection> *ptr) noexcept {
  ::carla::road::LaneSection *uninit = reinterpret_cast<::carla::road::LaneSection *>(new ::rust::MaybeUninit<::carla::road::LaneSection>);
  ::new (ptr) ::std::shared_ptr<::carla::road::LaneSection>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$road$LaneSection$clone(::std::shared_ptr<::carla::road::LaneSection> const &self, ::std::shared_ptr<::carla::road::LaneSection> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::LaneSection>(self);
}
::carla::road::LaneSection const *cxxbridge1$shared_ptr$carla$road$LaneSection$get(::std::shared_ptr<::carla::road::LaneSection> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$road$LaneSection$drop(::std::shared_ptr<::carla::road::LaneSection> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::road::LaneSection>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::road::LaneSection>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$road$LaneSection$null(::std::weak_ptr<::carla::road::LaneSection> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::LaneSection>();
}
void cxxbridge1$weak_ptr$carla$road$LaneSection$clone(::std::weak_ptr<::carla::road::LaneSection> const &self, ::std::weak_ptr<::carla::road::LaneSection> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::LaneSection>(self);
}
void cxxbridge1$weak_ptr$carla$road$LaneSection$downgrade(::std::shared_ptr<::carla::road::LaneSection> const &shared, ::std::weak_ptr<::carla::road::LaneSection> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::road::LaneSection>(shared);
}
void cxxbridge1$weak_ptr$carla$road$LaneSection$upgrade(::std::weak_ptr<::carla::road::LaneSection> const &weak, ::std::shared_ptr<::carla::road::LaneSection> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::road::LaneSection>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$road$LaneSection$drop(::std::weak_ptr<::carla::road::LaneSection> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::road::Lane>::value, "definition of `::carla::road::Lane` is required");
static_assert(sizeof(::std::unique_ptr<::carla::road::Lane>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::road::Lane>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$road$Lane$null(::std::unique_ptr<::carla::road::Lane> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::Lane>();
}
::carla::road::Lane *cxxbridge1$unique_ptr$carla$road$Lane$uninit(::std::unique_ptr<::carla::road::Lane> *ptr) noexcept {
  ::carla::road::Lane *uninit = reinterpret_cast<::carla::road::Lane *>(new ::rust::MaybeUninit<::carla::road::Lane>);
  ::new (ptr) ::std::unique_ptr<::carla::road::Lane>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$road$Lane$raw(::std::unique_ptr<::carla::road::Lane> *ptr, ::carla::road::Lane *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::Lane>(raw);
}
::carla::road::Lane const *cxxbridge1$unique_ptr$carla$road$Lane$get(::std::unique_ptr<::carla::road::Lane> const &ptr) noexcept {
  return ptr.get();
}
::carla::road::Lane *cxxbridge1$unique_ptr$carla$road$Lane$release(::std::unique_ptr<::carla::road::Lane> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$road$Lane$drop(::std::unique_ptr<::carla::road::Lane> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::road::Lane>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::road::Lane>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::road::Lane>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$road$Lane$null(::std::shared_ptr<::carla::road::Lane> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::Lane>();
}
::carla::road::Lane *cxxbridge1$shared_ptr$carla$road$Lane$uninit(::std::shared_ptr<::carla::road::Lane> *ptr) noexcept {
  ::carla::road::Lane *uninit = reinterpret_cast<::carla::road::Lane *>(new ::rust::MaybeUninit<::carla::road::Lane>);
  ::new (ptr) ::std::shared_ptr<::carla::road::Lane>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$road$Lane$clone(::std::shared_ptr<::carla::road::Lane> const &self, ::std::shared_ptr<::carla::road::Lane> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::Lane>(self);
}
::carla::road::Lane const *cxxbridge1$shared_ptr$carla$road$Lane$get(::std::shared_ptr<::carla::road::Lane> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$road$Lane$drop(::std::shared_ptr<::carla::road::Lane> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::road::Lane>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::road::Lane>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$road$Lane$null(::std::weak_ptr<::carla::road::Lane> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::Lane>();
}
void cxxbridge1$weak_ptr$carla$road$Lane$clone(::std::weak_ptr<::carla::road::Lane> const &self, ::std::weak_ptr<::carla::road::Lane> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::Lane>(self);
}
void cxxbridge1$weak_ptr$carla$road$Lane$downgrade(::std::shared_ptr<::carla::road::Lane> const &shared, ::std::weak_ptr<::carla::road::Lane> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::road::Lane>(shared);
}
void cxxbridge1$weak_ptr$carla$road$Lane$upgrade(::std::weak_ptr<::carla::road::Lane> const &weak, ::std::shared_ptr<::carla::road::Lane> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::road::Lane>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$road$Lane$drop(::std::weak_ptr<::carla::road::Lane> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::rpc::VehicleLightState::LightState>::value, "definition of `::carla::rpc::VehicleLightState::LightState` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::VehicleLightState::LightState>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::VehicleLightState::LightState>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$VehicleLightState$LightState$null(::std::unique_ptr<::carla::rpc::VehicleLightState::LightState> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleLightState::LightState>();
}
::carla::rpc::VehicleLightState::LightState *cxxbridge1$unique_ptr$carla$rpc$VehicleLightState$LightState$uninit(::std::unique_ptr<::carla::rpc::VehicleLightState::LightState> *ptr) noexcept {
  ::carla::rpc::VehicleLightState::LightState *uninit = reinterpret_cast<::carla::rpc::VehicleLightState::LightState *>(new ::rust::MaybeUninit<::carla::rpc::VehicleLightState::LightState>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleLightState::LightState>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleLightState$LightState$raw(::std::unique_ptr<::carla::rpc::VehicleLightState::LightState> *ptr, ::carla::rpc::VehicleLightState::LightState *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleLightState::LightState>(raw);
}
::carla::rpc::VehicleLightState::LightState const *cxxbridge1$unique_ptr$carla$rpc$VehicleLightState$LightState$get(::std::unique_ptr<::carla::rpc::VehicleLightState::LightState> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::VehicleLightState::LightState *cxxbridge1$unique_ptr$carla$rpc$VehicleLightState$LightState$release(::std::unique_ptr<::carla::rpc::VehicleLightState::LightState> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleLightState$LightState$drop(::std::unique_ptr<::carla::rpc::VehicleLightState::LightState> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::VehicleLightState::LightState>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::VehicleLightState::LightState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::VehicleLightState::LightState>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$VehicleLightState$LightState$null(::std::shared_ptr<::carla::rpc::VehicleLightState::LightState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleLightState::LightState>();
}
::carla::rpc::VehicleLightState::LightState *cxxbridge1$shared_ptr$carla$rpc$VehicleLightState$LightState$uninit(::std::shared_ptr<::carla::rpc::VehicleLightState::LightState> *ptr) noexcept {
  ::carla::rpc::VehicleLightState::LightState *uninit = reinterpret_cast<::carla::rpc::VehicleLightState::LightState *>(new ::rust::MaybeUninit<::carla::rpc::VehicleLightState::LightState>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleLightState::LightState>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleLightState$LightState$clone(::std::shared_ptr<::carla::rpc::VehicleLightState::LightState> const &self, ::std::shared_ptr<::carla::rpc::VehicleLightState::LightState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleLightState::LightState>(self);
}
::carla::rpc::VehicleLightState::LightState const *cxxbridge1$shared_ptr$carla$rpc$VehicleLightState$LightState$get(::std::shared_ptr<::carla::rpc::VehicleLightState::LightState> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleLightState$LightState$drop(::std::shared_ptr<::carla::rpc::VehicleLightState::LightState> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::VehicleLightState::LightState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::VehicleLightState::LightState>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$VehicleLightState$LightState$null(::std::weak_ptr<::carla::rpc::VehicleLightState::LightState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleLightState::LightState>();
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleLightState$LightState$clone(::std::weak_ptr<::carla::rpc::VehicleLightState::LightState> const &self, ::std::weak_ptr<::carla::rpc::VehicleLightState::LightState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleLightState::LightState>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleLightState$LightState$downgrade(::std::shared_ptr<::carla::rpc::VehicleLightState::LightState> const &shared, ::std::weak_ptr<::carla::rpc::VehicleLightState::LightState> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::VehicleLightState::LightState>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleLightState$LightState$upgrade(::std::weak_ptr<::carla::rpc::VehicleLightState::LightState> const &weak, ::std::shared_ptr<::carla::rpc::VehicleLightState::LightState> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::VehicleLightState::LightState>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleLightState$LightState$drop(::std::weak_ptr<::carla::rpc::VehicleLightState::LightState> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::VehicleLightState::LightState> *cxxbridge1$std$vector$carla$rpc$VehicleLightState$LightState$new() noexcept {
  return new ::std::vector<::carla::rpc::VehicleLightState::LightState>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$VehicleLightState$LightState$size(::std::vector<::carla::rpc::VehicleLightState::LightState> const &s) noexcept {
  return s.size();
}
::carla::rpc::VehicleLightState::LightState *cxxbridge1$std$vector$carla$rpc$VehicleLightState$LightState$get_unchecked(::std::vector<::carla::rpc::VehicleLightState::LightState> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$VehicleLightState$LightState$push_back(::std::vector<::carla::rpc::VehicleLightState::LightState> *v, ::carla::rpc::VehicleLightState::LightState *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$VehicleLightState$LightState$pop_back(::std::vector<::carla::rpc::VehicleLightState::LightState> *v, ::carla::rpc::VehicleLightState::LightState *out) noexcept {
  ::new (out) ::carla::rpc::VehicleLightState::LightState(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleLightState::LightState>>::value, "definition of `::std::vector<::carla::rpc::VehicleLightState::LightState>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState::LightState>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState::LightState>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleLightState$LightState$null(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState::LightState>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState::LightState>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleLightState$LightState$raw(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState::LightState>> *ptr, ::std::vector<::carla::rpc::VehicleLightState::LightState> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState::LightState>>(raw);
}
::std::vector<::carla::rpc::VehicleLightState::LightState> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleLightState$LightState$get(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState::LightState>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::VehicleLightState::LightState> *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleLightState$LightState$release(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState::LightState>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleLightState$LightState$drop(::std::unique_ptr<::std::vector<::carla::rpc::VehicleLightState::LightState>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleLightState::LightState>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::std_basic_ostream_char_AutocxxConcrete>::value, "definition of `::std_basic_ostream_char_AutocxxConcrete` is required");
static_assert(sizeof(::std::unique_ptr<::std_basic_ostream_char_AutocxxConcrete>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std_basic_ostream_char_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std_basic_ostream_char_AutocxxConcrete$null(::std::unique_ptr<::std_basic_ostream_char_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std_basic_ostream_char_AutocxxConcrete>();
}
void cxxbridge1$unique_ptr$std_basic_ostream_char_AutocxxConcrete$raw(::std::unique_ptr<::std_basic_ostream_char_AutocxxConcrete> *ptr, ::std_basic_ostream_char_AutocxxConcrete *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std_basic_ostream_char_AutocxxConcrete>(raw);
}
::std_basic_ostream_char_AutocxxConcrete const *cxxbridge1$unique_ptr$std_basic_ostream_char_AutocxxConcrete$get(::std::unique_ptr<::std_basic_ostream_char_AutocxxConcrete> const &ptr) noexcept {
  return ptr.get();
}
::std_basic_ostream_char_AutocxxConcrete *cxxbridge1$unique_ptr$std_basic_ostream_char_AutocxxConcrete$release(::std::unique_ptr<::std_basic_ostream_char_AutocxxConcrete> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std_basic_ostream_char_AutocxxConcrete$drop(::std::unique_ptr<::std_basic_ostream_char_AutocxxConcrete> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std_basic_ostream_char_AutocxxConcrete>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::std_basic_ostream_char_AutocxxConcrete>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::std_basic_ostream_char_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$shared_ptr$std_basic_ostream_char_AutocxxConcrete$null(::std::shared_ptr<::std_basic_ostream_char_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::std_basic_ostream_char_AutocxxConcrete>();
}
void cxxbridge1$shared_ptr$std_basic_ostream_char_AutocxxConcrete$clone(::std::shared_ptr<::std_basic_ostream_char_AutocxxConcrete> const &self, ::std::shared_ptr<::std_basic_ostream_char_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::std_basic_ostream_char_AutocxxConcrete>(self);
}
::std_basic_ostream_char_AutocxxConcrete const *cxxbridge1$shared_ptr$std_basic_ostream_char_AutocxxConcrete$get(::std::shared_ptr<::std_basic_ostream_char_AutocxxConcrete> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$std_basic_ostream_char_AutocxxConcrete$drop(::std::shared_ptr<::std_basic_ostream_char_AutocxxConcrete> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::std_basic_ostream_char_AutocxxConcrete>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::std_basic_ostream_char_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$weak_ptr$std_basic_ostream_char_AutocxxConcrete$null(::std::weak_ptr<::std_basic_ostream_char_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::std_basic_ostream_char_AutocxxConcrete>();
}
void cxxbridge1$weak_ptr$std_basic_ostream_char_AutocxxConcrete$clone(::std::weak_ptr<::std_basic_ostream_char_AutocxxConcrete> const &self, ::std::weak_ptr<::std_basic_ostream_char_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::std_basic_ostream_char_AutocxxConcrete>(self);
}
void cxxbridge1$weak_ptr$std_basic_ostream_char_AutocxxConcrete$downgrade(::std::shared_ptr<::std_basic_ostream_char_AutocxxConcrete> const &shared, ::std::weak_ptr<::std_basic_ostream_char_AutocxxConcrete> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::std_basic_ostream_char_AutocxxConcrete>(shared);
}
void cxxbridge1$weak_ptr$std_basic_ostream_char_AutocxxConcrete$upgrade(::std::weak_ptr<::std_basic_ostream_char_AutocxxConcrete> const &weak, ::std::shared_ptr<::std_basic_ostream_char_AutocxxConcrete> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::std_basic_ostream_char_AutocxxConcrete>(weak.lock());
}
void cxxbridge1$weak_ptr$std_basic_ostream_char_AutocxxConcrete$drop(::std::weak_ptr<::std_basic_ostream_char_AutocxxConcrete> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::sensor::RawData>::value, "definition of `::carla::sensor::RawData` is required");
static_assert(sizeof(::std::unique_ptr<::carla::sensor::RawData>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::sensor::RawData>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$sensor$RawData$null(::std::unique_ptr<::carla::sensor::RawData> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::RawData>();
}
::carla::sensor::RawData *cxxbridge1$unique_ptr$carla$sensor$RawData$uninit(::std::unique_ptr<::carla::sensor::RawData> *ptr) noexcept {
  ::carla::sensor::RawData *uninit = reinterpret_cast<::carla::sensor::RawData *>(new ::rust::MaybeUninit<::carla::sensor::RawData>);
  ::new (ptr) ::std::unique_ptr<::carla::sensor::RawData>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$sensor$RawData$raw(::std::unique_ptr<::carla::sensor::RawData> *ptr, ::carla::sensor::RawData *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::sensor::RawData>(raw);
}
::carla::sensor::RawData const *cxxbridge1$unique_ptr$carla$sensor$RawData$get(::std::unique_ptr<::carla::sensor::RawData> const &ptr) noexcept {
  return ptr.get();
}
::carla::sensor::RawData *cxxbridge1$unique_ptr$carla$sensor$RawData$release(::std::unique_ptr<::carla::sensor::RawData> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$sensor$RawData$drop(::std::unique_ptr<::carla::sensor::RawData> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::sensor::RawData>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::sensor::RawData>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::sensor::RawData>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$sensor$RawData$null(::std::shared_ptr<::carla::sensor::RawData> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::RawData>();
}
::carla::sensor::RawData *cxxbridge1$shared_ptr$carla$sensor$RawData$uninit(::std::shared_ptr<::carla::sensor::RawData> *ptr) noexcept {
  ::carla::sensor::RawData *uninit = reinterpret_cast<::carla::sensor::RawData *>(new ::rust::MaybeUninit<::carla::sensor::RawData>);
  ::new (ptr) ::std::shared_ptr<::carla::sensor::RawData>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$sensor$RawData$clone(::std::shared_ptr<::carla::sensor::RawData> const &self, ::std::shared_ptr<::carla::sensor::RawData> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::sensor::RawData>(self);
}
::carla::sensor::RawData const *cxxbridge1$shared_ptr$carla$sensor$RawData$get(::std::shared_ptr<::carla::sensor::RawData> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$sensor$RawData$drop(::std::shared_ptr<::carla::sensor::RawData> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::sensor::RawData>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::sensor::RawData>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$sensor$RawData$null(::std::weak_ptr<::carla::sensor::RawData> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::RawData>();
}
void cxxbridge1$weak_ptr$carla$sensor$RawData$clone(::std::weak_ptr<::carla::sensor::RawData> const &self, ::std::weak_ptr<::carla::sensor::RawData> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::sensor::RawData>(self);
}
void cxxbridge1$weak_ptr$carla$sensor$RawData$downgrade(::std::shared_ptr<::carla::sensor::RawData> const &shared, ::std::weak_ptr<::carla::sensor::RawData> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::sensor::RawData>(shared);
}
void cxxbridge1$weak_ptr$carla$sensor$RawData$upgrade(::std::weak_ptr<::carla::sensor::RawData> const &weak, ::std::shared_ptr<::carla::sensor::RawData> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::sensor::RawData>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$sensor$RawData$drop(::std::weak_ptr<::carla::sensor::RawData> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::sensor::RawData> *cxxbridge1$std$vector$carla$sensor$RawData$new() noexcept {
  return new ::std::vector<::carla::sensor::RawData>();
}
::std::size_t cxxbridge1$std$vector$carla$sensor$RawData$size(::std::vector<::carla::sensor::RawData> const &s) noexcept {
  return s.size();
}
::carla::sensor::RawData *cxxbridge1$std$vector$carla$sensor$RawData$get_unchecked(::std::vector<::carla::sensor::RawData> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$sensor$RawData$push_back(::std::vector<::carla::sensor::RawData> *v, ::carla::sensor::RawData *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$sensor$RawData$pop_back(::std::vector<::carla::sensor::RawData> *v, ::carla::sensor::RawData *out) noexcept {
  ::new (out) ::carla::sensor::RawData(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::sensor::RawData>>::value, "definition of `::std::vector<::carla::sensor::RawData>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::sensor::RawData>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::sensor::RawData>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$sensor$RawData$null(::std::unique_ptr<::std::vector<::carla::sensor::RawData>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::sensor::RawData>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$sensor$RawData$raw(::std::unique_ptr<::std::vector<::carla::sensor::RawData>> *ptr, ::std::vector<::carla::sensor::RawData> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::sensor::RawData>>(raw);
}
::std::vector<::carla::sensor::RawData> const *cxxbridge1$unique_ptr$std$vector$carla$sensor$RawData$get(::std::unique_ptr<::std::vector<::carla::sensor::RawData>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::sensor::RawData> *cxxbridge1$unique_ptr$std$vector$carla$sensor$RawData$release(::std::unique_ptr<::std::vector<::carla::sensor::RawData>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$sensor$RawData$drop(::std::unique_ptr<::std::vector<::carla::sensor::RawData>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::sensor::RawData>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>::value, "definition of `::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete` is required");
static_assert(sizeof(::std::unique_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$null(::std::unique_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>();
}
void cxxbridge1$unique_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$raw(::std::unique_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> *ptr, ::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>(raw);
}
::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete const *cxxbridge1$unique_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$get(::std::unique_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> const &ptr) noexcept {
  return ptr.get();
}
::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete *cxxbridge1$unique_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$release(::std::unique_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$drop(::std::unique_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$null(::std::shared_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>();
}
void cxxbridge1$shared_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$clone(::std::shared_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> const &self, ::std::shared_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>(self);
}
::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete const *cxxbridge1$shared_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$get(::std::shared_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$drop(::std::shared_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$null(::std::weak_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>();
}
void cxxbridge1$weak_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$clone(::std::weak_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> const &self, ::std::weak_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>(self);
}
void cxxbridge1$weak_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$downgrade(::std::shared_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> const &shared, ::std::weak_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>(shared);
}
void cxxbridge1$weak_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$upgrade(::std::weak_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> const &weak, ::std::shared_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete>(weak.lock());
}
void cxxbridge1$weak_ptr$carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete$drop(::std::weak_ptr<::carla_client_detail_EpisodeProxyImpl_std_weak_ptr_carla_client_detail_Simulator_AutocxxConcrete> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::road::SignalOrientation>::value, "definition of `::carla::road::SignalOrientation` is required");
static_assert(sizeof(::std::unique_ptr<::carla::road::SignalOrientation>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::road::SignalOrientation>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$road$SignalOrientation$null(::std::unique_ptr<::carla::road::SignalOrientation> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::SignalOrientation>();
}
::carla::road::SignalOrientation *cxxbridge1$unique_ptr$carla$road$SignalOrientation$uninit(::std::unique_ptr<::carla::road::SignalOrientation> *ptr) noexcept {
  ::carla::road::SignalOrientation *uninit = reinterpret_cast<::carla::road::SignalOrientation *>(new ::rust::MaybeUninit<::carla::road::SignalOrientation>);
  ::new (ptr) ::std::unique_ptr<::carla::road::SignalOrientation>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$road$SignalOrientation$raw(::std::unique_ptr<::carla::road::SignalOrientation> *ptr, ::carla::road::SignalOrientation *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::SignalOrientation>(raw);
}
::carla::road::SignalOrientation const *cxxbridge1$unique_ptr$carla$road$SignalOrientation$get(::std::unique_ptr<::carla::road::SignalOrientation> const &ptr) noexcept {
  return ptr.get();
}
::carla::road::SignalOrientation *cxxbridge1$unique_ptr$carla$road$SignalOrientation$release(::std::unique_ptr<::carla::road::SignalOrientation> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$road$SignalOrientation$drop(::std::unique_ptr<::carla::road::SignalOrientation> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::road::SignalOrientation>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::road::SignalOrientation>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::road::SignalOrientation>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$road$SignalOrientation$null(::std::shared_ptr<::carla::road::SignalOrientation> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::SignalOrientation>();
}
::carla::road::SignalOrientation *cxxbridge1$shared_ptr$carla$road$SignalOrientation$uninit(::std::shared_ptr<::carla::road::SignalOrientation> *ptr) noexcept {
  ::carla::road::SignalOrientation *uninit = reinterpret_cast<::carla::road::SignalOrientation *>(new ::rust::MaybeUninit<::carla::road::SignalOrientation>);
  ::new (ptr) ::std::shared_ptr<::carla::road::SignalOrientation>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$road$SignalOrientation$clone(::std::shared_ptr<::carla::road::SignalOrientation> const &self, ::std::shared_ptr<::carla::road::SignalOrientation> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::SignalOrientation>(self);
}
::carla::road::SignalOrientation const *cxxbridge1$shared_ptr$carla$road$SignalOrientation$get(::std::shared_ptr<::carla::road::SignalOrientation> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$road$SignalOrientation$drop(::std::shared_ptr<::carla::road::SignalOrientation> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::road::SignalOrientation>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::road::SignalOrientation>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$road$SignalOrientation$null(::std::weak_ptr<::carla::road::SignalOrientation> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::SignalOrientation>();
}
void cxxbridge1$weak_ptr$carla$road$SignalOrientation$clone(::std::weak_ptr<::carla::road::SignalOrientation> const &self, ::std::weak_ptr<::carla::road::SignalOrientation> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::SignalOrientation>(self);
}
void cxxbridge1$weak_ptr$carla$road$SignalOrientation$downgrade(::std::shared_ptr<::carla::road::SignalOrientation> const &shared, ::std::weak_ptr<::carla::road::SignalOrientation> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::road::SignalOrientation>(shared);
}
void cxxbridge1$weak_ptr$carla$road$SignalOrientation$upgrade(::std::weak_ptr<::carla::road::SignalOrientation> const &weak, ::std::shared_ptr<::carla::road::SignalOrientation> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::road::SignalOrientation>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$road$SignalOrientation$drop(::std::weak_ptr<::carla::road::SignalOrientation> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::road::SignalOrientation> *cxxbridge1$std$vector$carla$road$SignalOrientation$new() noexcept {
  return new ::std::vector<::carla::road::SignalOrientation>();
}
::std::size_t cxxbridge1$std$vector$carla$road$SignalOrientation$size(::std::vector<::carla::road::SignalOrientation> const &s) noexcept {
  return s.size();
}
::carla::road::SignalOrientation *cxxbridge1$std$vector$carla$road$SignalOrientation$get_unchecked(::std::vector<::carla::road::SignalOrientation> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$road$SignalOrientation$push_back(::std::vector<::carla::road::SignalOrientation> *v, ::carla::road::SignalOrientation *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$road$SignalOrientation$pop_back(::std::vector<::carla::road::SignalOrientation> *v, ::carla::road::SignalOrientation *out) noexcept {
  ::new (out) ::carla::road::SignalOrientation(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::road::SignalOrientation>>::value, "definition of `::std::vector<::carla::road::SignalOrientation>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::road::SignalOrientation>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::road::SignalOrientation>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$road$SignalOrientation$null(::std::unique_ptr<::std::vector<::carla::road::SignalOrientation>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::SignalOrientation>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$SignalOrientation$raw(::std::unique_ptr<::std::vector<::carla::road::SignalOrientation>> *ptr, ::std::vector<::carla::road::SignalOrientation> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::SignalOrientation>>(raw);
}
::std::vector<::carla::road::SignalOrientation> const *cxxbridge1$unique_ptr$std$vector$carla$road$SignalOrientation$get(::std::unique_ptr<::std::vector<::carla::road::SignalOrientation>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::road::SignalOrientation> *cxxbridge1$unique_ptr$std$vector$carla$road$SignalOrientation$release(::std::unique_ptr<::std::vector<::carla::road::SignalOrientation>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$SignalOrientation$drop(::std::unique_ptr<::std::vector<::carla::road::SignalOrientation>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::road::SignalOrientation>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::road::LaneValidity>::value, "definition of `::carla::road::LaneValidity` is required");
static_assert(sizeof(::std::unique_ptr<::carla::road::LaneValidity>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::road::LaneValidity>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$road$LaneValidity$null(::std::unique_ptr<::carla::road::LaneValidity> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::LaneValidity>();
}
::carla::road::LaneValidity *cxxbridge1$unique_ptr$carla$road$LaneValidity$uninit(::std::unique_ptr<::carla::road::LaneValidity> *ptr) noexcept {
  ::carla::road::LaneValidity *uninit = reinterpret_cast<::carla::road::LaneValidity *>(new ::rust::MaybeUninit<::carla::road::LaneValidity>);
  ::new (ptr) ::std::unique_ptr<::carla::road::LaneValidity>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$road$LaneValidity$raw(::std::unique_ptr<::carla::road::LaneValidity> *ptr, ::carla::road::LaneValidity *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::LaneValidity>(raw);
}
::carla::road::LaneValidity const *cxxbridge1$unique_ptr$carla$road$LaneValidity$get(::std::unique_ptr<::carla::road::LaneValidity> const &ptr) noexcept {
  return ptr.get();
}
::carla::road::LaneValidity *cxxbridge1$unique_ptr$carla$road$LaneValidity$release(::std::unique_ptr<::carla::road::LaneValidity> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$road$LaneValidity$drop(::std::unique_ptr<::carla::road::LaneValidity> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::road::LaneValidity>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::road::LaneValidity>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::road::LaneValidity>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$road$LaneValidity$null(::std::shared_ptr<::carla::road::LaneValidity> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::LaneValidity>();
}
::carla::road::LaneValidity *cxxbridge1$shared_ptr$carla$road$LaneValidity$uninit(::std::shared_ptr<::carla::road::LaneValidity> *ptr) noexcept {
  ::carla::road::LaneValidity *uninit = reinterpret_cast<::carla::road::LaneValidity *>(new ::rust::MaybeUninit<::carla::road::LaneValidity>);
  ::new (ptr) ::std::shared_ptr<::carla::road::LaneValidity>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$road$LaneValidity$clone(::std::shared_ptr<::carla::road::LaneValidity> const &self, ::std::shared_ptr<::carla::road::LaneValidity> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::LaneValidity>(self);
}
::carla::road::LaneValidity const *cxxbridge1$shared_ptr$carla$road$LaneValidity$get(::std::shared_ptr<::carla::road::LaneValidity> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$road$LaneValidity$drop(::std::shared_ptr<::carla::road::LaneValidity> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::road::LaneValidity>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::road::LaneValidity>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$road$LaneValidity$null(::std::weak_ptr<::carla::road::LaneValidity> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::LaneValidity>();
}
void cxxbridge1$weak_ptr$carla$road$LaneValidity$clone(::std::weak_ptr<::carla::road::LaneValidity> const &self, ::std::weak_ptr<::carla::road::LaneValidity> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::LaneValidity>(self);
}
void cxxbridge1$weak_ptr$carla$road$LaneValidity$downgrade(::std::shared_ptr<::carla::road::LaneValidity> const &shared, ::std::weak_ptr<::carla::road::LaneValidity> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::road::LaneValidity>(shared);
}
void cxxbridge1$weak_ptr$carla$road$LaneValidity$upgrade(::std::weak_ptr<::carla::road::LaneValidity> const &weak, ::std::shared_ptr<::carla::road::LaneValidity> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::road::LaneValidity>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$road$LaneValidity$drop(::std::weak_ptr<::carla::road::LaneValidity> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::road::LaneValidity> *cxxbridge1$std$vector$carla$road$LaneValidity$new() noexcept {
  return new ::std::vector<::carla::road::LaneValidity>();
}
::std::size_t cxxbridge1$std$vector$carla$road$LaneValidity$size(::std::vector<::carla::road::LaneValidity> const &s) noexcept {
  return s.size();
}
::carla::road::LaneValidity *cxxbridge1$std$vector$carla$road$LaneValidity$get_unchecked(::std::vector<::carla::road::LaneValidity> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$road$LaneValidity$push_back(::std::vector<::carla::road::LaneValidity> *v, ::carla::road::LaneValidity *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$road$LaneValidity$pop_back(::std::vector<::carla::road::LaneValidity> *v, ::carla::road::LaneValidity *out) noexcept {
  ::new (out) ::carla::road::LaneValidity(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::road::LaneValidity>>::value, "definition of `::std::vector<::carla::road::LaneValidity>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::road::LaneValidity>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::road::LaneValidity>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$road$LaneValidity$null(::std::unique_ptr<::std::vector<::carla::road::LaneValidity>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::LaneValidity>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$LaneValidity$raw(::std::unique_ptr<::std::vector<::carla::road::LaneValidity>> *ptr, ::std::vector<::carla::road::LaneValidity> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::LaneValidity>>(raw);
}
::std::vector<::carla::road::LaneValidity> const *cxxbridge1$unique_ptr$std$vector$carla$road$LaneValidity$get(::std::unique_ptr<::std::vector<::carla::road::LaneValidity>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::road::LaneValidity> *cxxbridge1$unique_ptr$std$vector$carla$road$LaneValidity$release(::std::unique_ptr<::std::vector<::carla::road::LaneValidity>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$LaneValidity$drop(::std::unique_ptr<::std::vector<::carla::road::LaneValidity>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::road::LaneValidity>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::client::detail::EpisodeState>::value, "definition of `::carla::client::detail::EpisodeState` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::detail::EpisodeState>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::detail::EpisodeState>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$detail$EpisodeState$null(::std::unique_ptr<::carla::client::detail::EpisodeState> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::detail::EpisodeState>();
}
::carla::client::detail::EpisodeState *cxxbridge1$unique_ptr$carla$client$detail$EpisodeState$uninit(::std::unique_ptr<::carla::client::detail::EpisodeState> *ptr) noexcept {
  ::carla::client::detail::EpisodeState *uninit = reinterpret_cast<::carla::client::detail::EpisodeState *>(new ::rust::MaybeUninit<::carla::client::detail::EpisodeState>);
  ::new (ptr) ::std::unique_ptr<::carla::client::detail::EpisodeState>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$detail$EpisodeState$raw(::std::unique_ptr<::carla::client::detail::EpisodeState> *ptr, ::carla::client::detail::EpisodeState *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::detail::EpisodeState>(raw);
}
::carla::client::detail::EpisodeState const *cxxbridge1$unique_ptr$carla$client$detail$EpisodeState$get(::std::unique_ptr<::carla::client::detail::EpisodeState> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::detail::EpisodeState *cxxbridge1$unique_ptr$carla$client$detail$EpisodeState$release(::std::unique_ptr<::carla::client::detail::EpisodeState> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$detail$EpisodeState$drop(::std::unique_ptr<::carla::client::detail::EpisodeState> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::detail::EpisodeState>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::detail::EpisodeState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::detail::EpisodeState>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$detail$EpisodeState$null(::std::shared_ptr<::carla::client::detail::EpisodeState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::detail::EpisodeState>();
}
::carla::client::detail::EpisodeState *cxxbridge1$shared_ptr$carla$client$detail$EpisodeState$uninit(::std::shared_ptr<::carla::client::detail::EpisodeState> *ptr) noexcept {
  ::carla::client::detail::EpisodeState *uninit = reinterpret_cast<::carla::client::detail::EpisodeState *>(new ::rust::MaybeUninit<::carla::client::detail::EpisodeState>);
  ::new (ptr) ::std::shared_ptr<::carla::client::detail::EpisodeState>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$detail$EpisodeState$clone(::std::shared_ptr<::carla::client::detail::EpisodeState> const &self, ::std::shared_ptr<::carla::client::detail::EpisodeState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::detail::EpisodeState>(self);
}
::carla::client::detail::EpisodeState const *cxxbridge1$shared_ptr$carla$client$detail$EpisodeState$get(::std::shared_ptr<::carla::client::detail::EpisodeState> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$detail$EpisodeState$drop(::std::shared_ptr<::carla::client::detail::EpisodeState> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::detail::EpisodeState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::detail::EpisodeState>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$detail$EpisodeState$null(::std::weak_ptr<::carla::client::detail::EpisodeState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::detail::EpisodeState>();
}
void cxxbridge1$weak_ptr$carla$client$detail$EpisodeState$clone(::std::weak_ptr<::carla::client::detail::EpisodeState> const &self, ::std::weak_ptr<::carla::client::detail::EpisodeState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::detail::EpisodeState>(self);
}
void cxxbridge1$weak_ptr$carla$client$detail$EpisodeState$downgrade(::std::shared_ptr<::carla::client::detail::EpisodeState> const &shared, ::std::weak_ptr<::carla::client::detail::EpisodeState> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::detail::EpisodeState>(shared);
}
void cxxbridge1$weak_ptr$carla$client$detail$EpisodeState$upgrade(::std::weak_ptr<::carla::client::detail::EpisodeState> const &weak, ::std::shared_ptr<::carla::client::detail::EpisodeState> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::detail::EpisodeState>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$detail$EpisodeState$drop(::std::weak_ptr<::carla::client::detail::EpisodeState> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::rpc::VehiclePhysicsControl>::value, "definition of `::carla::rpc::VehiclePhysicsControl` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::VehiclePhysicsControl>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::VehiclePhysicsControl>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$VehiclePhysicsControl$null(::std::unique_ptr<::carla::rpc::VehiclePhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehiclePhysicsControl>();
}
::carla::rpc::VehiclePhysicsControl *cxxbridge1$unique_ptr$carla$rpc$VehiclePhysicsControl$uninit(::std::unique_ptr<::carla::rpc::VehiclePhysicsControl> *ptr) noexcept {
  ::carla::rpc::VehiclePhysicsControl *uninit = reinterpret_cast<::carla::rpc::VehiclePhysicsControl *>(new ::rust::MaybeUninit<::carla::rpc::VehiclePhysicsControl>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehiclePhysicsControl>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$VehiclePhysicsControl$raw(::std::unique_ptr<::carla::rpc::VehiclePhysicsControl> *ptr, ::carla::rpc::VehiclePhysicsControl *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehiclePhysicsControl>(raw);
}
::carla::rpc::VehiclePhysicsControl const *cxxbridge1$unique_ptr$carla$rpc$VehiclePhysicsControl$get(::std::unique_ptr<::carla::rpc::VehiclePhysicsControl> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::VehiclePhysicsControl *cxxbridge1$unique_ptr$carla$rpc$VehiclePhysicsControl$release(::std::unique_ptr<::carla::rpc::VehiclePhysicsControl> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$VehiclePhysicsControl$drop(::std::unique_ptr<::carla::rpc::VehiclePhysicsControl> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::VehiclePhysicsControl>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::VehiclePhysicsControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::VehiclePhysicsControl>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$VehiclePhysicsControl$null(::std::shared_ptr<::carla::rpc::VehiclePhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehiclePhysicsControl>();
}
::carla::rpc::VehiclePhysicsControl *cxxbridge1$shared_ptr$carla$rpc$VehiclePhysicsControl$uninit(::std::shared_ptr<::carla::rpc::VehiclePhysicsControl> *ptr) noexcept {
  ::carla::rpc::VehiclePhysicsControl *uninit = reinterpret_cast<::carla::rpc::VehiclePhysicsControl *>(new ::rust::MaybeUninit<::carla::rpc::VehiclePhysicsControl>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehiclePhysicsControl>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$VehiclePhysicsControl$clone(::std::shared_ptr<::carla::rpc::VehiclePhysicsControl> const &self, ::std::shared_ptr<::carla::rpc::VehiclePhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehiclePhysicsControl>(self);
}
::carla::rpc::VehiclePhysicsControl const *cxxbridge1$shared_ptr$carla$rpc$VehiclePhysicsControl$get(::std::shared_ptr<::carla::rpc::VehiclePhysicsControl> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$VehiclePhysicsControl$drop(::std::shared_ptr<::carla::rpc::VehiclePhysicsControl> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::VehiclePhysicsControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::VehiclePhysicsControl>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$VehiclePhysicsControl$null(::std::weak_ptr<::carla::rpc::VehiclePhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehiclePhysicsControl>();
}
void cxxbridge1$weak_ptr$carla$rpc$VehiclePhysicsControl$clone(::std::weak_ptr<::carla::rpc::VehiclePhysicsControl> const &self, ::std::weak_ptr<::carla::rpc::VehiclePhysicsControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehiclePhysicsControl>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$VehiclePhysicsControl$downgrade(::std::shared_ptr<::carla::rpc::VehiclePhysicsControl> const &shared, ::std::weak_ptr<::carla::rpc::VehiclePhysicsControl> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::VehiclePhysicsControl>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$VehiclePhysicsControl$upgrade(::std::weak_ptr<::carla::rpc::VehiclePhysicsControl> const &weak, ::std::shared_ptr<::carla::rpc::VehiclePhysicsControl> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::VehiclePhysicsControl>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$VehiclePhysicsControl$drop(::std::weak_ptr<::carla::rpc::VehiclePhysicsControl> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::VehiclePhysicsControl> *cxxbridge1$std$vector$carla$rpc$VehiclePhysicsControl$new() noexcept {
  return new ::std::vector<::carla::rpc::VehiclePhysicsControl>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$VehiclePhysicsControl$size(::std::vector<::carla::rpc::VehiclePhysicsControl> const &s) noexcept {
  return s.size();
}
::carla::rpc::VehiclePhysicsControl *cxxbridge1$std$vector$carla$rpc$VehiclePhysicsControl$get_unchecked(::std::vector<::carla::rpc::VehiclePhysicsControl> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$VehiclePhysicsControl$push_back(::std::vector<::carla::rpc::VehiclePhysicsControl> *v, ::carla::rpc::VehiclePhysicsControl *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$VehiclePhysicsControl$pop_back(::std::vector<::carla::rpc::VehiclePhysicsControl> *v, ::carla::rpc::VehiclePhysicsControl *out) noexcept {
  ::new (out) ::carla::rpc::VehiclePhysicsControl(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::VehiclePhysicsControl>>::value, "definition of `::std::vector<::carla::rpc::VehiclePhysicsControl>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::VehiclePhysicsControl>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::VehiclePhysicsControl>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehiclePhysicsControl$null(::std::unique_ptr<::std::vector<::carla::rpc::VehiclePhysicsControl>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehiclePhysicsControl>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehiclePhysicsControl$raw(::std::unique_ptr<::std::vector<::carla::rpc::VehiclePhysicsControl>> *ptr, ::std::vector<::carla::rpc::VehiclePhysicsControl> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehiclePhysicsControl>>(raw);
}
::std::vector<::carla::rpc::VehiclePhysicsControl> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehiclePhysicsControl$get(::std::unique_ptr<::std::vector<::carla::rpc::VehiclePhysicsControl>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::VehiclePhysicsControl> *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehiclePhysicsControl$release(::std::unique_ptr<::std::vector<::carla::rpc::VehiclePhysicsControl>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehiclePhysicsControl$drop(::std::unique_ptr<::std::vector<::carla::rpc::VehiclePhysicsControl>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::VehiclePhysicsControl>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::VehicleFailureState>::value, "definition of `::carla::rpc::VehicleFailureState` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::VehicleFailureState>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::VehicleFailureState>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$VehicleFailureState$null(::std::unique_ptr<::carla::rpc::VehicleFailureState> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleFailureState>();
}
::carla::rpc::VehicleFailureState *cxxbridge1$unique_ptr$carla$rpc$VehicleFailureState$uninit(::std::unique_ptr<::carla::rpc::VehicleFailureState> *ptr) noexcept {
  ::carla::rpc::VehicleFailureState *uninit = reinterpret_cast<::carla::rpc::VehicleFailureState *>(new ::rust::MaybeUninit<::carla::rpc::VehicleFailureState>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleFailureState>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleFailureState$raw(::std::unique_ptr<::carla::rpc::VehicleFailureState> *ptr, ::carla::rpc::VehicleFailureState *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::VehicleFailureState>(raw);
}
::carla::rpc::VehicleFailureState const *cxxbridge1$unique_ptr$carla$rpc$VehicleFailureState$get(::std::unique_ptr<::carla::rpc::VehicleFailureState> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::VehicleFailureState *cxxbridge1$unique_ptr$carla$rpc$VehicleFailureState$release(::std::unique_ptr<::carla::rpc::VehicleFailureState> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$VehicleFailureState$drop(::std::unique_ptr<::carla::rpc::VehicleFailureState> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::VehicleFailureState>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::VehicleFailureState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::VehicleFailureState>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$VehicleFailureState$null(::std::shared_ptr<::carla::rpc::VehicleFailureState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleFailureState>();
}
::carla::rpc::VehicleFailureState *cxxbridge1$shared_ptr$carla$rpc$VehicleFailureState$uninit(::std::shared_ptr<::carla::rpc::VehicleFailureState> *ptr) noexcept {
  ::carla::rpc::VehicleFailureState *uninit = reinterpret_cast<::carla::rpc::VehicleFailureState *>(new ::rust::MaybeUninit<::carla::rpc::VehicleFailureState>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleFailureState>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleFailureState$clone(::std::shared_ptr<::carla::rpc::VehicleFailureState> const &self, ::std::shared_ptr<::carla::rpc::VehicleFailureState> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::VehicleFailureState>(self);
}
::carla::rpc::VehicleFailureState const *cxxbridge1$shared_ptr$carla$rpc$VehicleFailureState$get(::std::shared_ptr<::carla::rpc::VehicleFailureState> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$VehicleFailureState$drop(::std::shared_ptr<::carla::rpc::VehicleFailureState> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::VehicleFailureState>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::VehicleFailureState>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$VehicleFailureState$null(::std::weak_ptr<::carla::rpc::VehicleFailureState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleFailureState>();
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleFailureState$clone(::std::weak_ptr<::carla::rpc::VehicleFailureState> const &self, ::std::weak_ptr<::carla::rpc::VehicleFailureState> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::VehicleFailureState>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleFailureState$downgrade(::std::shared_ptr<::carla::rpc::VehicleFailureState> const &shared, ::std::weak_ptr<::carla::rpc::VehicleFailureState> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::VehicleFailureState>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleFailureState$upgrade(::std::weak_ptr<::carla::rpc::VehicleFailureState> const &weak, ::std::shared_ptr<::carla::rpc::VehicleFailureState> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::VehicleFailureState>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$VehicleFailureState$drop(::std::weak_ptr<::carla::rpc::VehicleFailureState> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::VehicleFailureState> *cxxbridge1$std$vector$carla$rpc$VehicleFailureState$new() noexcept {
  return new ::std::vector<::carla::rpc::VehicleFailureState>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$VehicleFailureState$size(::std::vector<::carla::rpc::VehicleFailureState> const &s) noexcept {
  return s.size();
}
::carla::rpc::VehicleFailureState *cxxbridge1$std$vector$carla$rpc$VehicleFailureState$get_unchecked(::std::vector<::carla::rpc::VehicleFailureState> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$VehicleFailureState$push_back(::std::vector<::carla::rpc::VehicleFailureState> *v, ::carla::rpc::VehicleFailureState *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$VehicleFailureState$pop_back(::std::vector<::carla::rpc::VehicleFailureState> *v, ::carla::rpc::VehicleFailureState *out) noexcept {
  ::new (out) ::carla::rpc::VehicleFailureState(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleFailureState>>::value, "definition of `::std::vector<::carla::rpc::VehicleFailureState>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleFailureState>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::VehicleFailureState>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleFailureState$null(::std::unique_ptr<::std::vector<::carla::rpc::VehicleFailureState>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleFailureState>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleFailureState$raw(::std::unique_ptr<::std::vector<::carla::rpc::VehicleFailureState>> *ptr, ::std::vector<::carla::rpc::VehicleFailureState> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::VehicleFailureState>>(raw);
}
::std::vector<::carla::rpc::VehicleFailureState> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleFailureState$get(::std::unique_ptr<::std::vector<::carla::rpc::VehicleFailureState>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::VehicleFailureState> *cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleFailureState$release(::std::unique_ptr<::std::vector<::carla::rpc::VehicleFailureState>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$VehicleFailureState$drop(::std::unique_ptr<::std::vector<::carla::rpc::VehicleFailureState>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::VehicleFailureState>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::client::ActorInitializer>::value, "definition of `::carla::client::ActorInitializer` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::ActorInitializer>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::ActorInitializer>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$ActorInitializer$null(::std::unique_ptr<::carla::client::ActorInitializer> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::ActorInitializer>();
}
::carla::client::ActorInitializer *cxxbridge1$unique_ptr$carla$client$ActorInitializer$uninit(::std::unique_ptr<::carla::client::ActorInitializer> *ptr) noexcept {
  ::carla::client::ActorInitializer *uninit = reinterpret_cast<::carla::client::ActorInitializer *>(new ::rust::MaybeUninit<::carla::client::ActorInitializer>);
  ::new (ptr) ::std::unique_ptr<::carla::client::ActorInitializer>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$ActorInitializer$raw(::std::unique_ptr<::carla::client::ActorInitializer> *ptr, ::carla::client::ActorInitializer *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::ActorInitializer>(raw);
}
::carla::client::ActorInitializer const *cxxbridge1$unique_ptr$carla$client$ActorInitializer$get(::std::unique_ptr<::carla::client::ActorInitializer> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::ActorInitializer *cxxbridge1$unique_ptr$carla$client$ActorInitializer$release(::std::unique_ptr<::carla::client::ActorInitializer> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$ActorInitializer$drop(::std::unique_ptr<::carla::client::ActorInitializer> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::ActorInitializer>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::ActorInitializer>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::ActorInitializer>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$ActorInitializer$null(::std::shared_ptr<::carla::client::ActorInitializer> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::ActorInitializer>();
}
::carla::client::ActorInitializer *cxxbridge1$shared_ptr$carla$client$ActorInitializer$uninit(::std::shared_ptr<::carla::client::ActorInitializer> *ptr) noexcept {
  ::carla::client::ActorInitializer *uninit = reinterpret_cast<::carla::client::ActorInitializer *>(new ::rust::MaybeUninit<::carla::client::ActorInitializer>);
  ::new (ptr) ::std::shared_ptr<::carla::client::ActorInitializer>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$ActorInitializer$clone(::std::shared_ptr<::carla::client::ActorInitializer> const &self, ::std::shared_ptr<::carla::client::ActorInitializer> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::ActorInitializer>(self);
}
::carla::client::ActorInitializer const *cxxbridge1$shared_ptr$carla$client$ActorInitializer$get(::std::shared_ptr<::carla::client::ActorInitializer> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$ActorInitializer$drop(::std::shared_ptr<::carla::client::ActorInitializer> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::ActorInitializer>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::ActorInitializer>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$ActorInitializer$null(::std::weak_ptr<::carla::client::ActorInitializer> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::ActorInitializer>();
}
void cxxbridge1$weak_ptr$carla$client$ActorInitializer$clone(::std::weak_ptr<::carla::client::ActorInitializer> const &self, ::std::weak_ptr<::carla::client::ActorInitializer> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::ActorInitializer>(self);
}
void cxxbridge1$weak_ptr$carla$client$ActorInitializer$downgrade(::std::shared_ptr<::carla::client::ActorInitializer> const &shared, ::std::weak_ptr<::carla::client::ActorInitializer> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::ActorInitializer>(shared);
}
void cxxbridge1$weak_ptr$carla$client$ActorInitializer$upgrade(::std::weak_ptr<::carla::client::ActorInitializer> const &weak, ::std::shared_ptr<::carla::client::ActorInitializer> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::ActorInitializer>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$ActorInitializer$drop(::std::weak_ptr<::carla::client::ActorInitializer> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::client::ActorInitializer> *cxxbridge1$std$vector$carla$client$ActorInitializer$new() noexcept {
  return new ::std::vector<::carla::client::ActorInitializer>();
}
::std::size_t cxxbridge1$std$vector$carla$client$ActorInitializer$size(::std::vector<::carla::client::ActorInitializer> const &s) noexcept {
  return s.size();
}
::carla::client::ActorInitializer *cxxbridge1$std$vector$carla$client$ActorInitializer$get_unchecked(::std::vector<::carla::client::ActorInitializer> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$client$ActorInitializer$push_back(::std::vector<::carla::client::ActorInitializer> *v, ::carla::client::ActorInitializer *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$client$ActorInitializer$pop_back(::std::vector<::carla::client::ActorInitializer> *v, ::carla::client::ActorInitializer *out) noexcept {
  ::new (out) ::carla::client::ActorInitializer(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::client::ActorInitializer>>::value, "definition of `::std::vector<::carla::client::ActorInitializer>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::client::ActorInitializer>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::client::ActorInitializer>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$client$ActorInitializer$null(::std::unique_ptr<::std::vector<::carla::client::ActorInitializer>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::client::ActorInitializer>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$client$ActorInitializer$raw(::std::unique_ptr<::std::vector<::carla::client::ActorInitializer>> *ptr, ::std::vector<::carla::client::ActorInitializer> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::client::ActorInitializer>>(raw);
}
::std::vector<::carla::client::ActorInitializer> const *cxxbridge1$unique_ptr$std$vector$carla$client$ActorInitializer$get(::std::unique_ptr<::std::vector<::carla::client::ActorInitializer>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::client::ActorInitializer> *cxxbridge1$unique_ptr$std$vector$carla$client$ActorInitializer$release(::std::unique_ptr<::std::vector<::carla::client::ActorInitializer>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$client$ActorInitializer$drop(::std::unique_ptr<::std::vector<::carla::client::ActorInitializer>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::client::ActorInitializer>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::WalkerControl>::value, "definition of `::carla::rpc::WalkerControl` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::WalkerControl>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::WalkerControl>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$WalkerControl$null(::std::unique_ptr<::carla::rpc::WalkerControl> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WalkerControl>();
}
::carla::rpc::WalkerControl *cxxbridge1$unique_ptr$carla$rpc$WalkerControl$uninit(::std::unique_ptr<::carla::rpc::WalkerControl> *ptr) noexcept {
  ::carla::rpc::WalkerControl *uninit = reinterpret_cast<::carla::rpc::WalkerControl *>(new ::rust::MaybeUninit<::carla::rpc::WalkerControl>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WalkerControl>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$WalkerControl$raw(::std::unique_ptr<::carla::rpc::WalkerControl> *ptr, ::carla::rpc::WalkerControl *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WalkerControl>(raw);
}
::carla::rpc::WalkerControl const *cxxbridge1$unique_ptr$carla$rpc$WalkerControl$get(::std::unique_ptr<::carla::rpc::WalkerControl> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::WalkerControl *cxxbridge1$unique_ptr$carla$rpc$WalkerControl$release(::std::unique_ptr<::carla::rpc::WalkerControl> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$WalkerControl$drop(::std::unique_ptr<::carla::rpc::WalkerControl> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::WalkerControl>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::WalkerControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::WalkerControl>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$WalkerControl$null(::std::shared_ptr<::carla::rpc::WalkerControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WalkerControl>();
}
::carla::rpc::WalkerControl *cxxbridge1$shared_ptr$carla$rpc$WalkerControl$uninit(::std::shared_ptr<::carla::rpc::WalkerControl> *ptr) noexcept {
  ::carla::rpc::WalkerControl *uninit = reinterpret_cast<::carla::rpc::WalkerControl *>(new ::rust::MaybeUninit<::carla::rpc::WalkerControl>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WalkerControl>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$WalkerControl$clone(::std::shared_ptr<::carla::rpc::WalkerControl> const &self, ::std::shared_ptr<::carla::rpc::WalkerControl> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WalkerControl>(self);
}
::carla::rpc::WalkerControl const *cxxbridge1$shared_ptr$carla$rpc$WalkerControl$get(::std::shared_ptr<::carla::rpc::WalkerControl> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$WalkerControl$drop(::std::shared_ptr<::carla::rpc::WalkerControl> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::WalkerControl>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::WalkerControl>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$WalkerControl$null(::std::weak_ptr<::carla::rpc::WalkerControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::WalkerControl>();
}
void cxxbridge1$weak_ptr$carla$rpc$WalkerControl$clone(::std::weak_ptr<::carla::rpc::WalkerControl> const &self, ::std::weak_ptr<::carla::rpc::WalkerControl> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::WalkerControl>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$WalkerControl$downgrade(::std::shared_ptr<::carla::rpc::WalkerControl> const &shared, ::std::weak_ptr<::carla::rpc::WalkerControl> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::WalkerControl>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$WalkerControl$upgrade(::std::weak_ptr<::carla::rpc::WalkerControl> const &weak, ::std::shared_ptr<::carla::rpc::WalkerControl> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::WalkerControl>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$WalkerControl$drop(::std::weak_ptr<::carla::rpc::WalkerControl> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::WalkerControl> *cxxbridge1$std$vector$carla$rpc$WalkerControl$new() noexcept {
  return new ::std::vector<::carla::rpc::WalkerControl>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$WalkerControl$size(::std::vector<::carla::rpc::WalkerControl> const &s) noexcept {
  return s.size();
}
::carla::rpc::WalkerControl *cxxbridge1$std$vector$carla$rpc$WalkerControl$get_unchecked(::std::vector<::carla::rpc::WalkerControl> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$WalkerControl$push_back(::std::vector<::carla::rpc::WalkerControl> *v, ::carla::rpc::WalkerControl *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$WalkerControl$pop_back(::std::vector<::carla::rpc::WalkerControl> *v, ::carla::rpc::WalkerControl *out) noexcept {
  ::new (out) ::carla::rpc::WalkerControl(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::WalkerControl>>::value, "definition of `::std::vector<::carla::rpc::WalkerControl>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::WalkerControl>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::WalkerControl>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerControl$null(::std::unique_ptr<::std::vector<::carla::rpc::WalkerControl>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::WalkerControl>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerControl$raw(::std::unique_ptr<::std::vector<::carla::rpc::WalkerControl>> *ptr, ::std::vector<::carla::rpc::WalkerControl> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::WalkerControl>>(raw);
}
::std::vector<::carla::rpc::WalkerControl> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerControl$get(::std::unique_ptr<::std::vector<::carla::rpc::WalkerControl>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::WalkerControl> *cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerControl$release(::std::unique_ptr<::std::vector<::carla::rpc::WalkerControl>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerControl$drop(::std::unique_ptr<::std::vector<::carla::rpc::WalkerControl>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::WalkerControl>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::WalkerBoneControlOut>::value, "definition of `::carla::rpc::WalkerBoneControlOut` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::WalkerBoneControlOut>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::WalkerBoneControlOut>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$WalkerBoneControlOut$null(::std::unique_ptr<::carla::rpc::WalkerBoneControlOut> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WalkerBoneControlOut>();
}
::carla::rpc::WalkerBoneControlOut *cxxbridge1$unique_ptr$carla$rpc$WalkerBoneControlOut$uninit(::std::unique_ptr<::carla::rpc::WalkerBoneControlOut> *ptr) noexcept {
  ::carla::rpc::WalkerBoneControlOut *uninit = reinterpret_cast<::carla::rpc::WalkerBoneControlOut *>(new ::rust::MaybeUninit<::carla::rpc::WalkerBoneControlOut>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WalkerBoneControlOut>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$WalkerBoneControlOut$raw(::std::unique_ptr<::carla::rpc::WalkerBoneControlOut> *ptr, ::carla::rpc::WalkerBoneControlOut *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WalkerBoneControlOut>(raw);
}
::carla::rpc::WalkerBoneControlOut const *cxxbridge1$unique_ptr$carla$rpc$WalkerBoneControlOut$get(::std::unique_ptr<::carla::rpc::WalkerBoneControlOut> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::WalkerBoneControlOut *cxxbridge1$unique_ptr$carla$rpc$WalkerBoneControlOut$release(::std::unique_ptr<::carla::rpc::WalkerBoneControlOut> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$WalkerBoneControlOut$drop(::std::unique_ptr<::carla::rpc::WalkerBoneControlOut> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::WalkerBoneControlOut>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::WalkerBoneControlOut>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::WalkerBoneControlOut>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$WalkerBoneControlOut$null(::std::shared_ptr<::carla::rpc::WalkerBoneControlOut> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WalkerBoneControlOut>();
}
::carla::rpc::WalkerBoneControlOut *cxxbridge1$shared_ptr$carla$rpc$WalkerBoneControlOut$uninit(::std::shared_ptr<::carla::rpc::WalkerBoneControlOut> *ptr) noexcept {
  ::carla::rpc::WalkerBoneControlOut *uninit = reinterpret_cast<::carla::rpc::WalkerBoneControlOut *>(new ::rust::MaybeUninit<::carla::rpc::WalkerBoneControlOut>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WalkerBoneControlOut>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$WalkerBoneControlOut$clone(::std::shared_ptr<::carla::rpc::WalkerBoneControlOut> const &self, ::std::shared_ptr<::carla::rpc::WalkerBoneControlOut> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WalkerBoneControlOut>(self);
}
::carla::rpc::WalkerBoneControlOut const *cxxbridge1$shared_ptr$carla$rpc$WalkerBoneControlOut$get(::std::shared_ptr<::carla::rpc::WalkerBoneControlOut> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$WalkerBoneControlOut$drop(::std::shared_ptr<::carla::rpc::WalkerBoneControlOut> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::WalkerBoneControlOut>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::WalkerBoneControlOut>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$WalkerBoneControlOut$null(::std::weak_ptr<::carla::rpc::WalkerBoneControlOut> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::WalkerBoneControlOut>();
}
void cxxbridge1$weak_ptr$carla$rpc$WalkerBoneControlOut$clone(::std::weak_ptr<::carla::rpc::WalkerBoneControlOut> const &self, ::std::weak_ptr<::carla::rpc::WalkerBoneControlOut> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::WalkerBoneControlOut>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$WalkerBoneControlOut$downgrade(::std::shared_ptr<::carla::rpc::WalkerBoneControlOut> const &shared, ::std::weak_ptr<::carla::rpc::WalkerBoneControlOut> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::WalkerBoneControlOut>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$WalkerBoneControlOut$upgrade(::std::weak_ptr<::carla::rpc::WalkerBoneControlOut> const &weak, ::std::shared_ptr<::carla::rpc::WalkerBoneControlOut> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::WalkerBoneControlOut>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$WalkerBoneControlOut$drop(::std::weak_ptr<::carla::rpc::WalkerBoneControlOut> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::WalkerBoneControlOut> *cxxbridge1$std$vector$carla$rpc$WalkerBoneControlOut$new() noexcept {
  return new ::std::vector<::carla::rpc::WalkerBoneControlOut>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$WalkerBoneControlOut$size(::std::vector<::carla::rpc::WalkerBoneControlOut> const &s) noexcept {
  return s.size();
}
::carla::rpc::WalkerBoneControlOut *cxxbridge1$std$vector$carla$rpc$WalkerBoneControlOut$get_unchecked(::std::vector<::carla::rpc::WalkerBoneControlOut> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$WalkerBoneControlOut$push_back(::std::vector<::carla::rpc::WalkerBoneControlOut> *v, ::carla::rpc::WalkerBoneControlOut *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$WalkerBoneControlOut$pop_back(::std::vector<::carla::rpc::WalkerBoneControlOut> *v, ::carla::rpc::WalkerBoneControlOut *out) noexcept {
  ::new (out) ::carla::rpc::WalkerBoneControlOut(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::WalkerBoneControlOut>>::value, "definition of `::std::vector<::carla::rpc::WalkerBoneControlOut>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlOut>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlOut>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerBoneControlOut$null(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlOut>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlOut>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerBoneControlOut$raw(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlOut>> *ptr, ::std::vector<::carla::rpc::WalkerBoneControlOut> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlOut>>(raw);
}
::std::vector<::carla::rpc::WalkerBoneControlOut> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerBoneControlOut$get(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlOut>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::WalkerBoneControlOut> *cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerBoneControlOut$release(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlOut>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerBoneControlOut$drop(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlOut>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::WalkerBoneControlOut>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::WalkerBoneControlIn>::value, "definition of `::carla::rpc::WalkerBoneControlIn` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::WalkerBoneControlIn>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::WalkerBoneControlIn>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$WalkerBoneControlIn$null(::std::unique_ptr<::carla::rpc::WalkerBoneControlIn> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WalkerBoneControlIn>();
}
::carla::rpc::WalkerBoneControlIn *cxxbridge1$unique_ptr$carla$rpc$WalkerBoneControlIn$uninit(::std::unique_ptr<::carla::rpc::WalkerBoneControlIn> *ptr) noexcept {
  ::carla::rpc::WalkerBoneControlIn *uninit = reinterpret_cast<::carla::rpc::WalkerBoneControlIn *>(new ::rust::MaybeUninit<::carla::rpc::WalkerBoneControlIn>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WalkerBoneControlIn>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$WalkerBoneControlIn$raw(::std::unique_ptr<::carla::rpc::WalkerBoneControlIn> *ptr, ::carla::rpc::WalkerBoneControlIn *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::WalkerBoneControlIn>(raw);
}
::carla::rpc::WalkerBoneControlIn const *cxxbridge1$unique_ptr$carla$rpc$WalkerBoneControlIn$get(::std::unique_ptr<::carla::rpc::WalkerBoneControlIn> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::WalkerBoneControlIn *cxxbridge1$unique_ptr$carla$rpc$WalkerBoneControlIn$release(::std::unique_ptr<::carla::rpc::WalkerBoneControlIn> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$WalkerBoneControlIn$drop(::std::unique_ptr<::carla::rpc::WalkerBoneControlIn> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::WalkerBoneControlIn>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::WalkerBoneControlIn>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::WalkerBoneControlIn>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$WalkerBoneControlIn$null(::std::shared_ptr<::carla::rpc::WalkerBoneControlIn> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WalkerBoneControlIn>();
}
::carla::rpc::WalkerBoneControlIn *cxxbridge1$shared_ptr$carla$rpc$WalkerBoneControlIn$uninit(::std::shared_ptr<::carla::rpc::WalkerBoneControlIn> *ptr) noexcept {
  ::carla::rpc::WalkerBoneControlIn *uninit = reinterpret_cast<::carla::rpc::WalkerBoneControlIn *>(new ::rust::MaybeUninit<::carla::rpc::WalkerBoneControlIn>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WalkerBoneControlIn>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$WalkerBoneControlIn$clone(::std::shared_ptr<::carla::rpc::WalkerBoneControlIn> const &self, ::std::shared_ptr<::carla::rpc::WalkerBoneControlIn> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::WalkerBoneControlIn>(self);
}
::carla::rpc::WalkerBoneControlIn const *cxxbridge1$shared_ptr$carla$rpc$WalkerBoneControlIn$get(::std::shared_ptr<::carla::rpc::WalkerBoneControlIn> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$WalkerBoneControlIn$drop(::std::shared_ptr<::carla::rpc::WalkerBoneControlIn> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::WalkerBoneControlIn>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::WalkerBoneControlIn>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$WalkerBoneControlIn$null(::std::weak_ptr<::carla::rpc::WalkerBoneControlIn> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::WalkerBoneControlIn>();
}
void cxxbridge1$weak_ptr$carla$rpc$WalkerBoneControlIn$clone(::std::weak_ptr<::carla::rpc::WalkerBoneControlIn> const &self, ::std::weak_ptr<::carla::rpc::WalkerBoneControlIn> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::WalkerBoneControlIn>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$WalkerBoneControlIn$downgrade(::std::shared_ptr<::carla::rpc::WalkerBoneControlIn> const &shared, ::std::weak_ptr<::carla::rpc::WalkerBoneControlIn> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::WalkerBoneControlIn>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$WalkerBoneControlIn$upgrade(::std::weak_ptr<::carla::rpc::WalkerBoneControlIn> const &weak, ::std::shared_ptr<::carla::rpc::WalkerBoneControlIn> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::WalkerBoneControlIn>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$WalkerBoneControlIn$drop(::std::weak_ptr<::carla::rpc::WalkerBoneControlIn> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::WalkerBoneControlIn> *cxxbridge1$std$vector$carla$rpc$WalkerBoneControlIn$new() noexcept {
  return new ::std::vector<::carla::rpc::WalkerBoneControlIn>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$WalkerBoneControlIn$size(::std::vector<::carla::rpc::WalkerBoneControlIn> const &s) noexcept {
  return s.size();
}
::carla::rpc::WalkerBoneControlIn *cxxbridge1$std$vector$carla$rpc$WalkerBoneControlIn$get_unchecked(::std::vector<::carla::rpc::WalkerBoneControlIn> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$WalkerBoneControlIn$push_back(::std::vector<::carla::rpc::WalkerBoneControlIn> *v, ::carla::rpc::WalkerBoneControlIn *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$WalkerBoneControlIn$pop_back(::std::vector<::carla::rpc::WalkerBoneControlIn> *v, ::carla::rpc::WalkerBoneControlIn *out) noexcept {
  ::new (out) ::carla::rpc::WalkerBoneControlIn(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::WalkerBoneControlIn>>::value, "definition of `::std::vector<::carla::rpc::WalkerBoneControlIn>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlIn>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlIn>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerBoneControlIn$null(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlIn>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlIn>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerBoneControlIn$raw(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlIn>> *ptr, ::std::vector<::carla::rpc::WalkerBoneControlIn> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlIn>>(raw);
}
::std::vector<::carla::rpc::WalkerBoneControlIn> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerBoneControlIn$get(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlIn>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::WalkerBoneControlIn> *cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerBoneControlIn$release(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlIn>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$WalkerBoneControlIn$drop(::std::unique_ptr<::std::vector<::carla::rpc::WalkerBoneControlIn>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::WalkerBoneControlIn>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::ActorDescription>::value, "definition of `::carla::rpc::ActorDescription` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::ActorDescription>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::ActorDescription>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$ActorDescription$null(::std::unique_ptr<::carla::rpc::ActorDescription> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::ActorDescription>();
}
::carla::rpc::ActorDescription *cxxbridge1$unique_ptr$carla$rpc$ActorDescription$uninit(::std::unique_ptr<::carla::rpc::ActorDescription> *ptr) noexcept {
  ::carla::rpc::ActorDescription *uninit = reinterpret_cast<::carla::rpc::ActorDescription *>(new ::rust::MaybeUninit<::carla::rpc::ActorDescription>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::ActorDescription>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$ActorDescription$raw(::std::unique_ptr<::carla::rpc::ActorDescription> *ptr, ::carla::rpc::ActorDescription *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::ActorDescription>(raw);
}
::carla::rpc::ActorDescription const *cxxbridge1$unique_ptr$carla$rpc$ActorDescription$get(::std::unique_ptr<::carla::rpc::ActorDescription> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::ActorDescription *cxxbridge1$unique_ptr$carla$rpc$ActorDescription$release(::std::unique_ptr<::carla::rpc::ActorDescription> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$ActorDescription$drop(::std::unique_ptr<::carla::rpc::ActorDescription> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::ActorDescription>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::ActorDescription>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::ActorDescription>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$ActorDescription$null(::std::shared_ptr<::carla::rpc::ActorDescription> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::ActorDescription>();
}
::carla::rpc::ActorDescription *cxxbridge1$shared_ptr$carla$rpc$ActorDescription$uninit(::std::shared_ptr<::carla::rpc::ActorDescription> *ptr) noexcept {
  ::carla::rpc::ActorDescription *uninit = reinterpret_cast<::carla::rpc::ActorDescription *>(new ::rust::MaybeUninit<::carla::rpc::ActorDescription>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::ActorDescription>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$ActorDescription$clone(::std::shared_ptr<::carla::rpc::ActorDescription> const &self, ::std::shared_ptr<::carla::rpc::ActorDescription> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::ActorDescription>(self);
}
::carla::rpc::ActorDescription const *cxxbridge1$shared_ptr$carla$rpc$ActorDescription$get(::std::shared_ptr<::carla::rpc::ActorDescription> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$ActorDescription$drop(::std::shared_ptr<::carla::rpc::ActorDescription> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::ActorDescription>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::ActorDescription>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$ActorDescription$null(::std::weak_ptr<::carla::rpc::ActorDescription> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::ActorDescription>();
}
void cxxbridge1$weak_ptr$carla$rpc$ActorDescription$clone(::std::weak_ptr<::carla::rpc::ActorDescription> const &self, ::std::weak_ptr<::carla::rpc::ActorDescription> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::ActorDescription>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$ActorDescription$downgrade(::std::shared_ptr<::carla::rpc::ActorDescription> const &shared, ::std::weak_ptr<::carla::rpc::ActorDescription> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::ActorDescription>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$ActorDescription$upgrade(::std::weak_ptr<::carla::rpc::ActorDescription> const &weak, ::std::shared_ptr<::carla::rpc::ActorDescription> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::ActorDescription>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$ActorDescription$drop(::std::weak_ptr<::carla::rpc::ActorDescription> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::ActorDescription> *cxxbridge1$std$vector$carla$rpc$ActorDescription$new() noexcept {
  return new ::std::vector<::carla::rpc::ActorDescription>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$ActorDescription$size(::std::vector<::carla::rpc::ActorDescription> const &s) noexcept {
  return s.size();
}
::carla::rpc::ActorDescription *cxxbridge1$std$vector$carla$rpc$ActorDescription$get_unchecked(::std::vector<::carla::rpc::ActorDescription> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$ActorDescription$push_back(::std::vector<::carla::rpc::ActorDescription> *v, ::carla::rpc::ActorDescription *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$ActorDescription$pop_back(::std::vector<::carla::rpc::ActorDescription> *v, ::carla::rpc::ActorDescription *out) noexcept {
  ::new (out) ::carla::rpc::ActorDescription(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::ActorDescription>>::value, "definition of `::std::vector<::carla::rpc::ActorDescription>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::ActorDescription>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::ActorDescription>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorDescription$null(::std::unique_ptr<::std::vector<::carla::rpc::ActorDescription>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::ActorDescription>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorDescription$raw(::std::unique_ptr<::std::vector<::carla::rpc::ActorDescription>> *ptr, ::std::vector<::carla::rpc::ActorDescription> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::ActorDescription>>(raw);
}
::std::vector<::carla::rpc::ActorDescription> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorDescription$get(::std::unique_ptr<::std::vector<::carla::rpc::ActorDescription>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::ActorDescription> *cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorDescription$release(::std::unique_ptr<::std::vector<::carla::rpc::ActorDescription>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorDescription$drop(::std::unique_ptr<::std::vector<::carla::rpc::ActorDescription>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::ActorDescription>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::rpc::ActorDefinition>::value, "definition of `::carla::rpc::ActorDefinition` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::ActorDefinition>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::ActorDefinition>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$ActorDefinition$null(::std::unique_ptr<::carla::rpc::ActorDefinition> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::ActorDefinition>();
}
::carla::rpc::ActorDefinition *cxxbridge1$unique_ptr$carla$rpc$ActorDefinition$uninit(::std::unique_ptr<::carla::rpc::ActorDefinition> *ptr) noexcept {
  ::carla::rpc::ActorDefinition *uninit = reinterpret_cast<::carla::rpc::ActorDefinition *>(new ::rust::MaybeUninit<::carla::rpc::ActorDefinition>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::ActorDefinition>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$ActorDefinition$raw(::std::unique_ptr<::carla::rpc::ActorDefinition> *ptr, ::carla::rpc::ActorDefinition *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::ActorDefinition>(raw);
}
::carla::rpc::ActorDefinition const *cxxbridge1$unique_ptr$carla$rpc$ActorDefinition$get(::std::unique_ptr<::carla::rpc::ActorDefinition> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::ActorDefinition *cxxbridge1$unique_ptr$carla$rpc$ActorDefinition$release(::std::unique_ptr<::carla::rpc::ActorDefinition> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$ActorDefinition$drop(::std::unique_ptr<::carla::rpc::ActorDefinition> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::ActorDefinition>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::ActorDefinition>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::ActorDefinition>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$ActorDefinition$null(::std::shared_ptr<::carla::rpc::ActorDefinition> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::ActorDefinition>();
}
::carla::rpc::ActorDefinition *cxxbridge1$shared_ptr$carla$rpc$ActorDefinition$uninit(::std::shared_ptr<::carla::rpc::ActorDefinition> *ptr) noexcept {
  ::carla::rpc::ActorDefinition *uninit = reinterpret_cast<::carla::rpc::ActorDefinition *>(new ::rust::MaybeUninit<::carla::rpc::ActorDefinition>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::ActorDefinition>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$ActorDefinition$clone(::std::shared_ptr<::carla::rpc::ActorDefinition> const &self, ::std::shared_ptr<::carla::rpc::ActorDefinition> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::ActorDefinition>(self);
}
::carla::rpc::ActorDefinition const *cxxbridge1$shared_ptr$carla$rpc$ActorDefinition$get(::std::shared_ptr<::carla::rpc::ActorDefinition> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$ActorDefinition$drop(::std::shared_ptr<::carla::rpc::ActorDefinition> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::ActorDefinition>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::ActorDefinition>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$ActorDefinition$null(::std::weak_ptr<::carla::rpc::ActorDefinition> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::ActorDefinition>();
}
void cxxbridge1$weak_ptr$carla$rpc$ActorDefinition$clone(::std::weak_ptr<::carla::rpc::ActorDefinition> const &self, ::std::weak_ptr<::carla::rpc::ActorDefinition> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::ActorDefinition>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$ActorDefinition$downgrade(::std::shared_ptr<::carla::rpc::ActorDefinition> const &shared, ::std::weak_ptr<::carla::rpc::ActorDefinition> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::ActorDefinition>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$ActorDefinition$upgrade(::std::weak_ptr<::carla::rpc::ActorDefinition> const &weak, ::std::shared_ptr<::carla::rpc::ActorDefinition> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::ActorDefinition>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$ActorDefinition$drop(::std::weak_ptr<::carla::rpc::ActorDefinition> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::rpc::ActorDefinition> *cxxbridge1$std$vector$carla$rpc$ActorDefinition$new() noexcept {
  return new ::std::vector<::carla::rpc::ActorDefinition>();
}
::std::size_t cxxbridge1$std$vector$carla$rpc$ActorDefinition$size(::std::vector<::carla::rpc::ActorDefinition> const &s) noexcept {
  return s.size();
}
::carla::rpc::ActorDefinition *cxxbridge1$std$vector$carla$rpc$ActorDefinition$get_unchecked(::std::vector<::carla::rpc::ActorDefinition> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$rpc$ActorDefinition$push_back(::std::vector<::carla::rpc::ActorDefinition> *v, ::carla::rpc::ActorDefinition *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$rpc$ActorDefinition$pop_back(::std::vector<::carla::rpc::ActorDefinition> *v, ::carla::rpc::ActorDefinition *out) noexcept {
  ::new (out) ::carla::rpc::ActorDefinition(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::rpc::ActorDefinition>>::value, "definition of `::std::vector<::carla::rpc::ActorDefinition>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::rpc::ActorDefinition>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::rpc::ActorDefinition>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorDefinition$null(::std::unique_ptr<::std::vector<::carla::rpc::ActorDefinition>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::ActorDefinition>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorDefinition$raw(::std::unique_ptr<::std::vector<::carla::rpc::ActorDefinition>> *ptr, ::std::vector<::carla::rpc::ActorDefinition> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::rpc::ActorDefinition>>(raw);
}
::std::vector<::carla::rpc::ActorDefinition> const *cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorDefinition$get(::std::unique_ptr<::std::vector<::carla::rpc::ActorDefinition>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::rpc::ActorDefinition> *cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorDefinition$release(::std::unique_ptr<::std::vector<::carla::rpc::ActorDefinition>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$rpc$ActorDefinition$drop(::std::unique_ptr<::std::vector<::carla::rpc::ActorDefinition>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::rpc::ActorDefinition>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>::value, "definition of `::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete` is required");
static_assert(sizeof(::std::unique_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$null(::std::unique_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>();
}
void cxxbridge1$unique_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$raw(::std::unique_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *ptr, ::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>(raw);
}
::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete const *cxxbridge1$unique_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$get(::std::unique_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> const &ptr) noexcept {
  return ptr.get();
}
::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete *cxxbridge1$unique_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$release(::std::unique_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$drop(::std::unique_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$shared_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$null(::std::shared_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>();
}
void cxxbridge1$shared_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$clone(::std::shared_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> const &self, ::std::shared_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>(self);
}
::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete const *cxxbridge1$shared_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$get(::std::shared_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$drop(::std::shared_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$weak_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$null(::std::weak_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>();
}
void cxxbridge1$weak_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$clone(::std::weak_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> const &self, ::std::weak_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>(self);
}
void cxxbridge1$weak_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$downgrade(::std::shared_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> const &shared, ::std::weak_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>(shared);
}
void cxxbridge1$weak_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$upgrade(::std::weak_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> const &weak, ::std::shared_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>(weak.lock());
}
void cxxbridge1$weak_ptr$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$drop(::std::weak_ptr<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::rpc::EnvironmentObject>::value, "definition of `::carla::rpc::EnvironmentObject` is required");
static_assert(sizeof(::std::unique_ptr<::carla::rpc::EnvironmentObject>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::rpc::EnvironmentObject>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$rpc$EnvironmentObject$null(::std::unique_ptr<::carla::rpc::EnvironmentObject> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::EnvironmentObject>();
}
::carla::rpc::EnvironmentObject *cxxbridge1$unique_ptr$carla$rpc$EnvironmentObject$uninit(::std::unique_ptr<::carla::rpc::EnvironmentObject> *ptr) noexcept {
  ::carla::rpc::EnvironmentObject *uninit = reinterpret_cast<::carla::rpc::EnvironmentObject *>(new ::rust::MaybeUninit<::carla::rpc::EnvironmentObject>);
  ::new (ptr) ::std::unique_ptr<::carla::rpc::EnvironmentObject>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$rpc$EnvironmentObject$raw(::std::unique_ptr<::carla::rpc::EnvironmentObject> *ptr, ::carla::rpc::EnvironmentObject *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::rpc::EnvironmentObject>(raw);
}
::carla::rpc::EnvironmentObject const *cxxbridge1$unique_ptr$carla$rpc$EnvironmentObject$get(::std::unique_ptr<::carla::rpc::EnvironmentObject> const &ptr) noexcept {
  return ptr.get();
}
::carla::rpc::EnvironmentObject *cxxbridge1$unique_ptr$carla$rpc$EnvironmentObject$release(::std::unique_ptr<::carla::rpc::EnvironmentObject> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$rpc$EnvironmentObject$drop(::std::unique_ptr<::carla::rpc::EnvironmentObject> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::rpc::EnvironmentObject>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::rpc::EnvironmentObject>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::rpc::EnvironmentObject>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$rpc$EnvironmentObject$null(::std::shared_ptr<::carla::rpc::EnvironmentObject> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::EnvironmentObject>();
}
::carla::rpc::EnvironmentObject *cxxbridge1$shared_ptr$carla$rpc$EnvironmentObject$uninit(::std::shared_ptr<::carla::rpc::EnvironmentObject> *ptr) noexcept {
  ::carla::rpc::EnvironmentObject *uninit = reinterpret_cast<::carla::rpc::EnvironmentObject *>(new ::rust::MaybeUninit<::carla::rpc::EnvironmentObject>);
  ::new (ptr) ::std::shared_ptr<::carla::rpc::EnvironmentObject>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$rpc$EnvironmentObject$clone(::std::shared_ptr<::carla::rpc::EnvironmentObject> const &self, ::std::shared_ptr<::carla::rpc::EnvironmentObject> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::rpc::EnvironmentObject>(self);
}
::carla::rpc::EnvironmentObject const *cxxbridge1$shared_ptr$carla$rpc$EnvironmentObject$get(::std::shared_ptr<::carla::rpc::EnvironmentObject> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$rpc$EnvironmentObject$drop(::std::shared_ptr<::carla::rpc::EnvironmentObject> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::rpc::EnvironmentObject>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::rpc::EnvironmentObject>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$rpc$EnvironmentObject$null(::std::weak_ptr<::carla::rpc::EnvironmentObject> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::EnvironmentObject>();
}
void cxxbridge1$weak_ptr$carla$rpc$EnvironmentObject$clone(::std::weak_ptr<::carla::rpc::EnvironmentObject> const &self, ::std::weak_ptr<::carla::rpc::EnvironmentObject> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::rpc::EnvironmentObject>(self);
}
void cxxbridge1$weak_ptr$carla$rpc$EnvironmentObject$downgrade(::std::shared_ptr<::carla::rpc::EnvironmentObject> const &shared, ::std::weak_ptr<::carla::rpc::EnvironmentObject> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::rpc::EnvironmentObject>(shared);
}
void cxxbridge1$weak_ptr$carla$rpc$EnvironmentObject$upgrade(::std::weak_ptr<::carla::rpc::EnvironmentObject> const &weak, ::std::shared_ptr<::carla::rpc::EnvironmentObject> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::rpc::EnvironmentObject>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$rpc$EnvironmentObject$drop(::std::weak_ptr<::carla::rpc::EnvironmentObject> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::road::Lane::LaneType>::value, "definition of `::carla::road::Lane::LaneType` is required");
static_assert(sizeof(::std::unique_ptr<::carla::road::Lane::LaneType>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::road::Lane::LaneType>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$road$Lane$LaneType$null(::std::unique_ptr<::carla::road::Lane::LaneType> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::Lane::LaneType>();
}
::carla::road::Lane::LaneType *cxxbridge1$unique_ptr$carla$road$Lane$LaneType$uninit(::std::unique_ptr<::carla::road::Lane::LaneType> *ptr) noexcept {
  ::carla::road::Lane::LaneType *uninit = reinterpret_cast<::carla::road::Lane::LaneType *>(new ::rust::MaybeUninit<::carla::road::Lane::LaneType>);
  ::new (ptr) ::std::unique_ptr<::carla::road::Lane::LaneType>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$road$Lane$LaneType$raw(::std::unique_ptr<::carla::road::Lane::LaneType> *ptr, ::carla::road::Lane::LaneType *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::Lane::LaneType>(raw);
}
::carla::road::Lane::LaneType const *cxxbridge1$unique_ptr$carla$road$Lane$LaneType$get(::std::unique_ptr<::carla::road::Lane::LaneType> const &ptr) noexcept {
  return ptr.get();
}
::carla::road::Lane::LaneType *cxxbridge1$unique_ptr$carla$road$Lane$LaneType$release(::std::unique_ptr<::carla::road::Lane::LaneType> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$road$Lane$LaneType$drop(::std::unique_ptr<::carla::road::Lane::LaneType> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::road::Lane::LaneType>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::road::Lane::LaneType>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::road::Lane::LaneType>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$road$Lane$LaneType$null(::std::shared_ptr<::carla::road::Lane::LaneType> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::Lane::LaneType>();
}
::carla::road::Lane::LaneType *cxxbridge1$shared_ptr$carla$road$Lane$LaneType$uninit(::std::shared_ptr<::carla::road::Lane::LaneType> *ptr) noexcept {
  ::carla::road::Lane::LaneType *uninit = reinterpret_cast<::carla::road::Lane::LaneType *>(new ::rust::MaybeUninit<::carla::road::Lane::LaneType>);
  ::new (ptr) ::std::shared_ptr<::carla::road::Lane::LaneType>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$road$Lane$LaneType$clone(::std::shared_ptr<::carla::road::Lane::LaneType> const &self, ::std::shared_ptr<::carla::road::Lane::LaneType> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::Lane::LaneType>(self);
}
::carla::road::Lane::LaneType const *cxxbridge1$shared_ptr$carla$road$Lane$LaneType$get(::std::shared_ptr<::carla::road::Lane::LaneType> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$road$Lane$LaneType$drop(::std::shared_ptr<::carla::road::Lane::LaneType> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::road::Lane::LaneType>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::road::Lane::LaneType>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$road$Lane$LaneType$null(::std::weak_ptr<::carla::road::Lane::LaneType> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::Lane::LaneType>();
}
void cxxbridge1$weak_ptr$carla$road$Lane$LaneType$clone(::std::weak_ptr<::carla::road::Lane::LaneType> const &self, ::std::weak_ptr<::carla::road::Lane::LaneType> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::Lane::LaneType>(self);
}
void cxxbridge1$weak_ptr$carla$road$Lane$LaneType$downgrade(::std::shared_ptr<::carla::road::Lane::LaneType> const &shared, ::std::weak_ptr<::carla::road::Lane::LaneType> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::road::Lane::LaneType>(shared);
}
void cxxbridge1$weak_ptr$carla$road$Lane$LaneType$upgrade(::std::weak_ptr<::carla::road::Lane::LaneType> const &weak, ::std::shared_ptr<::carla::road::Lane::LaneType> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::road::Lane::LaneType>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$road$Lane$LaneType$drop(::std::weak_ptr<::carla::road::Lane::LaneType> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::road::Lane::LaneType> *cxxbridge1$std$vector$carla$road$Lane$LaneType$new() noexcept {
  return new ::std::vector<::carla::road::Lane::LaneType>();
}
::std::size_t cxxbridge1$std$vector$carla$road$Lane$LaneType$size(::std::vector<::carla::road::Lane::LaneType> const &s) noexcept {
  return s.size();
}
::carla::road::Lane::LaneType *cxxbridge1$std$vector$carla$road$Lane$LaneType$get_unchecked(::std::vector<::carla::road::Lane::LaneType> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$road$Lane$LaneType$push_back(::std::vector<::carla::road::Lane::LaneType> *v, ::carla::road::Lane::LaneType *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$road$Lane$LaneType$pop_back(::std::vector<::carla::road::Lane::LaneType> *v, ::carla::road::Lane::LaneType *out) noexcept {
  ::new (out) ::carla::road::Lane::LaneType(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::road::Lane::LaneType>>::value, "definition of `::std::vector<::carla::road::Lane::LaneType>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::road::Lane::LaneType>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::road::Lane::LaneType>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$road$Lane$LaneType$null(::std::unique_ptr<::std::vector<::carla::road::Lane::LaneType>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::Lane::LaneType>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$Lane$LaneType$raw(::std::unique_ptr<::std::vector<::carla::road::Lane::LaneType>> *ptr, ::std::vector<::carla::road::Lane::LaneType> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::Lane::LaneType>>(raw);
}
::std::vector<::carla::road::Lane::LaneType> const *cxxbridge1$unique_ptr$std$vector$carla$road$Lane$LaneType$get(::std::unique_ptr<::std::vector<::carla::road::Lane::LaneType>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::road::Lane::LaneType> *cxxbridge1$unique_ptr$std$vector$carla$road$Lane$LaneType$release(::std::unique_ptr<::std::vector<::carla::road::Lane::LaneType>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$Lane$LaneType$drop(::std::unique_ptr<::std::vector<::carla::road::Lane::LaneType>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::road::Lane::LaneType>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::client::World>::value, "definition of `::carla::client::World` is required");
static_assert(sizeof(::std::unique_ptr<::carla::client::World>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::client::World>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$client$World$null(::std::unique_ptr<::carla::client::World> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::World>();
}
::carla::client::World *cxxbridge1$unique_ptr$carla$client$World$uninit(::std::unique_ptr<::carla::client::World> *ptr) noexcept {
  ::carla::client::World *uninit = reinterpret_cast<::carla::client::World *>(new ::rust::MaybeUninit<::carla::client::World>);
  ::new (ptr) ::std::unique_ptr<::carla::client::World>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$client$World$raw(::std::unique_ptr<::carla::client::World> *ptr, ::carla::client::World *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::client::World>(raw);
}
::carla::client::World const *cxxbridge1$unique_ptr$carla$client$World$get(::std::unique_ptr<::carla::client::World> const &ptr) noexcept {
  return ptr.get();
}
::carla::client::World *cxxbridge1$unique_ptr$carla$client$World$release(::std::unique_ptr<::carla::client::World> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$client$World$drop(::std::unique_ptr<::carla::client::World> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::client::World>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::client::World>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::client::World>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$client$World$null(::std::shared_ptr<::carla::client::World> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::World>();
}
::carla::client::World *cxxbridge1$shared_ptr$carla$client$World$uninit(::std::shared_ptr<::carla::client::World> *ptr) noexcept {
  ::carla::client::World *uninit = reinterpret_cast<::carla::client::World *>(new ::rust::MaybeUninit<::carla::client::World>);
  ::new (ptr) ::std::shared_ptr<::carla::client::World>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$client$World$clone(::std::shared_ptr<::carla::client::World> const &self, ::std::shared_ptr<::carla::client::World> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::client::World>(self);
}
::carla::client::World const *cxxbridge1$shared_ptr$carla$client$World$get(::std::shared_ptr<::carla::client::World> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$client$World$drop(::std::shared_ptr<::carla::client::World> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::client::World>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::client::World>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$client$World$null(::std::weak_ptr<::carla::client::World> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::World>();
}
void cxxbridge1$weak_ptr$carla$client$World$clone(::std::weak_ptr<::carla::client::World> const &self, ::std::weak_ptr<::carla::client::World> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::client::World>(self);
}
void cxxbridge1$weak_ptr$carla$client$World$downgrade(::std::shared_ptr<::carla::client::World> const &shared, ::std::weak_ptr<::carla::client::World> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::client::World>(shared);
}
void cxxbridge1$weak_ptr$carla$client$World$upgrade(::std::weak_ptr<::carla::client::World> const &weak, ::std::shared_ptr<::carla::client::World> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::client::World>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$client$World$drop(::std::weak_ptr<::carla::client::World> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::client::World> *cxxbridge1$std$vector$carla$client$World$new() noexcept {
  return new ::std::vector<::carla::client::World>();
}
::std::size_t cxxbridge1$std$vector$carla$client$World$size(::std::vector<::carla::client::World> const &s) noexcept {
  return s.size();
}
::carla::client::World *cxxbridge1$std$vector$carla$client$World$get_unchecked(::std::vector<::carla::client::World> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$client$World$push_back(::std::vector<::carla::client::World> *v, ::carla::client::World *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$client$World$pop_back(::std::vector<::carla::client::World> *v, ::carla::client::World *out) noexcept {
  ::new (out) ::carla::client::World(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::client::World>>::value, "definition of `::std::vector<::carla::client::World>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::client::World>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::client::World>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$client$World$null(::std::unique_ptr<::std::vector<::carla::client::World>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::client::World>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$client$World$raw(::std::unique_ptr<::std::vector<::carla::client::World>> *ptr, ::std::vector<::carla::client::World> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::client::World>>(raw);
}
::std::vector<::carla::client::World> const *cxxbridge1$unique_ptr$std$vector$carla$client$World$get(::std::unique_ptr<::std::vector<::carla::client::World>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::client::World> *cxxbridge1$unique_ptr$std$vector$carla$client$World$release(::std::unique_ptr<::std::vector<::carla::client::World>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$client$World$drop(::std::unique_ptr<::std::vector<::carla::client::World>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::client::World>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::carla::road::element::LaneMarking>::value, "definition of `::carla::road::element::LaneMarking` is required");
static_assert(sizeof(::std::unique_ptr<::carla::road::element::LaneMarking>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::road::element::LaneMarking>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$road$element$LaneMarking$null(::std::unique_ptr<::carla::road::element::LaneMarking> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::element::LaneMarking>();
}
::carla::road::element::LaneMarking *cxxbridge1$unique_ptr$carla$road$element$LaneMarking$uninit(::std::unique_ptr<::carla::road::element::LaneMarking> *ptr) noexcept {
  ::carla::road::element::LaneMarking *uninit = reinterpret_cast<::carla::road::element::LaneMarking *>(new ::rust::MaybeUninit<::carla::road::element::LaneMarking>);
  ::new (ptr) ::std::unique_ptr<::carla::road::element::LaneMarking>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$road$element$LaneMarking$raw(::std::unique_ptr<::carla::road::element::LaneMarking> *ptr, ::carla::road::element::LaneMarking *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::road::element::LaneMarking>(raw);
}
::carla::road::element::LaneMarking const *cxxbridge1$unique_ptr$carla$road$element$LaneMarking$get(::std::unique_ptr<::carla::road::element::LaneMarking> const &ptr) noexcept {
  return ptr.get();
}
::carla::road::element::LaneMarking *cxxbridge1$unique_ptr$carla$road$element$LaneMarking$release(::std::unique_ptr<::carla::road::element::LaneMarking> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$road$element$LaneMarking$drop(::std::unique_ptr<::carla::road::element::LaneMarking> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::road::element::LaneMarking>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::road::element::LaneMarking>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::road::element::LaneMarking>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$road$element$LaneMarking$null(::std::shared_ptr<::carla::road::element::LaneMarking> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::element::LaneMarking>();
}
::carla::road::element::LaneMarking *cxxbridge1$shared_ptr$carla$road$element$LaneMarking$uninit(::std::shared_ptr<::carla::road::element::LaneMarking> *ptr) noexcept {
  ::carla::road::element::LaneMarking *uninit = reinterpret_cast<::carla::road::element::LaneMarking *>(new ::rust::MaybeUninit<::carla::road::element::LaneMarking>);
  ::new (ptr) ::std::shared_ptr<::carla::road::element::LaneMarking>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$road$element$LaneMarking$clone(::std::shared_ptr<::carla::road::element::LaneMarking> const &self, ::std::shared_ptr<::carla::road::element::LaneMarking> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::road::element::LaneMarking>(self);
}
::carla::road::element::LaneMarking const *cxxbridge1$shared_ptr$carla$road$element$LaneMarking$get(::std::shared_ptr<::carla::road::element::LaneMarking> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$road$element$LaneMarking$drop(::std::shared_ptr<::carla::road::element::LaneMarking> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::road::element::LaneMarking>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::road::element::LaneMarking>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$null(::std::weak_ptr<::carla::road::element::LaneMarking> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::element::LaneMarking>();
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$clone(::std::weak_ptr<::carla::road::element::LaneMarking> const &self, ::std::weak_ptr<::carla::road::element::LaneMarking> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::road::element::LaneMarking>(self);
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$downgrade(::std::shared_ptr<::carla::road::element::LaneMarking> const &shared, ::std::weak_ptr<::carla::road::element::LaneMarking> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::road::element::LaneMarking>(shared);
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$upgrade(::std::weak_ptr<::carla::road::element::LaneMarking> const &weak, ::std::shared_ptr<::carla::road::element::LaneMarking> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::road::element::LaneMarking>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$road$element$LaneMarking$drop(::std::weak_ptr<::carla::road::element::LaneMarking> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::road::element::LaneMarking> *cxxbridge1$std$vector$carla$road$element$LaneMarking$new() noexcept {
  return new ::std::vector<::carla::road::element::LaneMarking>();
}
::std::size_t cxxbridge1$std$vector$carla$road$element$LaneMarking$size(::std::vector<::carla::road::element::LaneMarking> const &s) noexcept {
  return s.size();
}
::carla::road::element::LaneMarking *cxxbridge1$std$vector$carla$road$element$LaneMarking$get_unchecked(::std::vector<::carla::road::element::LaneMarking> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$road$element$LaneMarking$push_back(::std::vector<::carla::road::element::LaneMarking> *v, ::carla::road::element::LaneMarking *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$road$element$LaneMarking$pop_back(::std::vector<::carla::road::element::LaneMarking> *v, ::carla::road::element::LaneMarking *out) noexcept {
  ::new (out) ::carla::road::element::LaneMarking(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::road::element::LaneMarking>>::value, "definition of `::std::vector<::carla::road::element::LaneMarking>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$null(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$raw(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking>> *ptr, ::std::vector<::carla::road::element::LaneMarking> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking>>(raw);
}
::std::vector<::carla::road::element::LaneMarking> const *cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$get(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::road::element::LaneMarking> *cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$release(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$road$element$LaneMarking$drop(::std::unique_ptr<::std::vector<::carla::road::element::LaneMarking>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::road::element::LaneMarking>>::value>{}(ptr);
}

static_assert(::rust::detail::is_complete<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>::value, "definition of `::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete` is required");
static_assert(sizeof(::std::unique_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$null(::std::unique_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>();
}
void cxxbridge1$unique_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$raw(::std::unique_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *ptr, ::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>(raw);
}
::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete const *cxxbridge1$unique_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$get(::std::unique_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> const &ptr) noexcept {
  return ptr.get();
}
::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete *cxxbridge1$unique_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$release(::std::unique_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$drop(::std::unique_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$shared_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$null(::std::shared_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>();
}
void cxxbridge1$shared_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$clone(::std::shared_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> const &self, ::std::shared_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>(self);
}
::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete const *cxxbridge1$shared_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$get(::std::shared_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$drop(::std::shared_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>) == alignof(void *), "");
void cxxbridge1$weak_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$null(::std::weak_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>();
}
void cxxbridge1$weak_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$clone(::std::weak_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> const &self, ::std::weak_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>(self);
}
void cxxbridge1$weak_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$downgrade(::std::shared_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> const &shared, ::std::weak_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>(shared);
}
void cxxbridge1$weak_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$upgrade(::std::weak_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> const &weak, ::std::shared_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>(weak.lock());
}
void cxxbridge1$weak_ptr$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$drop(::std::weak_ptr<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *self) noexcept {
  self->~weak_ptr();
}

static_assert(::rust::detail::is_complete<::carla::traffic_manager::TrafficManager>::value, "definition of `::carla::traffic_manager::TrafficManager` is required");
static_assert(sizeof(::std::unique_ptr<::carla::traffic_manager::TrafficManager>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::carla::traffic_manager::TrafficManager>) == alignof(void *), "");
void cxxbridge1$unique_ptr$carla$traffic_manager$TrafficManager$null(::std::unique_ptr<::carla::traffic_manager::TrafficManager> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::traffic_manager::TrafficManager>();
}
::carla::traffic_manager::TrafficManager *cxxbridge1$unique_ptr$carla$traffic_manager$TrafficManager$uninit(::std::unique_ptr<::carla::traffic_manager::TrafficManager> *ptr) noexcept {
  ::carla::traffic_manager::TrafficManager *uninit = reinterpret_cast<::carla::traffic_manager::TrafficManager *>(new ::rust::MaybeUninit<::carla::traffic_manager::TrafficManager>);
  ::new (ptr) ::std::unique_ptr<::carla::traffic_manager::TrafficManager>(uninit);
  return uninit;
}
void cxxbridge1$unique_ptr$carla$traffic_manager$TrafficManager$raw(::std::unique_ptr<::carla::traffic_manager::TrafficManager> *ptr, ::carla::traffic_manager::TrafficManager *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::carla::traffic_manager::TrafficManager>(raw);
}
::carla::traffic_manager::TrafficManager const *cxxbridge1$unique_ptr$carla$traffic_manager$TrafficManager$get(::std::unique_ptr<::carla::traffic_manager::TrafficManager> const &ptr) noexcept {
  return ptr.get();
}
::carla::traffic_manager::TrafficManager *cxxbridge1$unique_ptr$carla$traffic_manager$TrafficManager$release(::std::unique_ptr<::carla::traffic_manager::TrafficManager> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$carla$traffic_manager$TrafficManager$drop(::std::unique_ptr<::carla::traffic_manager::TrafficManager> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::carla::traffic_manager::TrafficManager>::value>{}(ptr);
}

static_assert(sizeof(::std::shared_ptr<::carla::traffic_manager::TrafficManager>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::shared_ptr<::carla::traffic_manager::TrafficManager>) == alignof(void *), "");
void cxxbridge1$shared_ptr$carla$traffic_manager$TrafficManager$null(::std::shared_ptr<::carla::traffic_manager::TrafficManager> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::traffic_manager::TrafficManager>();
}
::carla::traffic_manager::TrafficManager *cxxbridge1$shared_ptr$carla$traffic_manager$TrafficManager$uninit(::std::shared_ptr<::carla::traffic_manager::TrafficManager> *ptr) noexcept {
  ::carla::traffic_manager::TrafficManager *uninit = reinterpret_cast<::carla::traffic_manager::TrafficManager *>(new ::rust::MaybeUninit<::carla::traffic_manager::TrafficManager>);
  ::new (ptr) ::std::shared_ptr<::carla::traffic_manager::TrafficManager>(uninit);
  return uninit;
}
void cxxbridge1$shared_ptr$carla$traffic_manager$TrafficManager$clone(::std::shared_ptr<::carla::traffic_manager::TrafficManager> const &self, ::std::shared_ptr<::carla::traffic_manager::TrafficManager> *ptr) noexcept {
  ::new (ptr) ::std::shared_ptr<::carla::traffic_manager::TrafficManager>(self);
}
::carla::traffic_manager::TrafficManager const *cxxbridge1$shared_ptr$carla$traffic_manager$TrafficManager$get(::std::shared_ptr<::carla::traffic_manager::TrafficManager> const &self) noexcept {
  return self.get();
}
void cxxbridge1$shared_ptr$carla$traffic_manager$TrafficManager$drop(::std::shared_ptr<::carla::traffic_manager::TrafficManager> *self) noexcept {
  self->~shared_ptr();
}

static_assert(sizeof(::std::weak_ptr<::carla::traffic_manager::TrafficManager>) == 2 * sizeof(void *), "");
static_assert(alignof(::std::weak_ptr<::carla::traffic_manager::TrafficManager>) == alignof(void *), "");
void cxxbridge1$weak_ptr$carla$traffic_manager$TrafficManager$null(::std::weak_ptr<::carla::traffic_manager::TrafficManager> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::traffic_manager::TrafficManager>();
}
void cxxbridge1$weak_ptr$carla$traffic_manager$TrafficManager$clone(::std::weak_ptr<::carla::traffic_manager::TrafficManager> const &self, ::std::weak_ptr<::carla::traffic_manager::TrafficManager> *ptr) noexcept {
  ::new (ptr) ::std::weak_ptr<::carla::traffic_manager::TrafficManager>(self);
}
void cxxbridge1$weak_ptr$carla$traffic_manager$TrafficManager$downgrade(::std::shared_ptr<::carla::traffic_manager::TrafficManager> const &shared, ::std::weak_ptr<::carla::traffic_manager::TrafficManager> *weak) noexcept {
  ::new (weak) ::std::weak_ptr<::carla::traffic_manager::TrafficManager>(shared);
}
void cxxbridge1$weak_ptr$carla$traffic_manager$TrafficManager$upgrade(::std::weak_ptr<::carla::traffic_manager::TrafficManager> const &weak, ::std::shared_ptr<::carla::traffic_manager::TrafficManager> *shared) noexcept {
  ::new (shared) ::std::shared_ptr<::carla::traffic_manager::TrafficManager>(weak.lock());
}
void cxxbridge1$weak_ptr$carla$traffic_manager$TrafficManager$drop(::std::weak_ptr<::carla::traffic_manager::TrafficManager> *self) noexcept {
  self->~weak_ptr();
}

::std::vector<::carla::traffic_manager::TrafficManager> *cxxbridge1$std$vector$carla$traffic_manager$TrafficManager$new() noexcept {
  return new ::std::vector<::carla::traffic_manager::TrafficManager>();
}
::std::size_t cxxbridge1$std$vector$carla$traffic_manager$TrafficManager$size(::std::vector<::carla::traffic_manager::TrafficManager> const &s) noexcept {
  return s.size();
}
::carla::traffic_manager::TrafficManager *cxxbridge1$std$vector$carla$traffic_manager$TrafficManager$get_unchecked(::std::vector<::carla::traffic_manager::TrafficManager> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
void cxxbridge1$std$vector$carla$traffic_manager$TrafficManager$push_back(::std::vector<::carla::traffic_manager::TrafficManager> *v, ::carla::traffic_manager::TrafficManager *value) noexcept {
  v->push_back(::std::move(*value));
  ::rust::destroy(value);
}
void cxxbridge1$std$vector$carla$traffic_manager$TrafficManager$pop_back(::std::vector<::carla::traffic_manager::TrafficManager> *v, ::carla::traffic_manager::TrafficManager *out) noexcept {
  ::new (out) ::carla::traffic_manager::TrafficManager(::std::move(v->back()));
  v->pop_back();
}
static_assert(::rust::detail::is_complete<::std::vector<::carla::traffic_manager::TrafficManager>>::value, "definition of `::std::vector<::carla::traffic_manager::TrafficManager>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::carla::traffic_manager::TrafficManager>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::carla::traffic_manager::TrafficManager>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$carla$traffic_manager$TrafficManager$null(::std::unique_ptr<::std::vector<::carla::traffic_manager::TrafficManager>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::traffic_manager::TrafficManager>>();
}
void cxxbridge1$unique_ptr$std$vector$carla$traffic_manager$TrafficManager$raw(::std::unique_ptr<::std::vector<::carla::traffic_manager::TrafficManager>> *ptr, ::std::vector<::carla::traffic_manager::TrafficManager> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::carla::traffic_manager::TrafficManager>>(raw);
}
::std::vector<::carla::traffic_manager::TrafficManager> const *cxxbridge1$unique_ptr$std$vector$carla$traffic_manager$TrafficManager$get(::std::unique_ptr<::std::vector<::carla::traffic_manager::TrafficManager>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::carla::traffic_manager::TrafficManager> *cxxbridge1$unique_ptr$std$vector$carla$traffic_manager$TrafficManager$release(::std::unique_ptr<::std::vector<::carla::traffic_manager::TrafficManager>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$carla$traffic_manager$TrafficManager$drop(::std::unique_ptr<::std::vector<::carla::traffic_manager::TrafficManager>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::carla::traffic_manager::TrafficManager>>::value>{}(ptr);
}

::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *cxxbridge1$std$vector$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$new() noexcept {
  return new ::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>();
}
::std::size_t cxxbridge1$std$vector$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$size(::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> const &s) noexcept {
  return s.size();
}
::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete *cxxbridge1$std$vector$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$get_unchecked(::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
static_assert(::rust::detail::is_complete<::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>>::value, "definition of `::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$null(::std::unique_ptr<::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>>();
}
void cxxbridge1$unique_ptr$std$vector$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$raw(::std::unique_ptr<::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>> *ptr, ::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>>(raw);
}
::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> const *cxxbridge1$unique_ptr$std$vector$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$get(::std::unique_ptr<::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete> *cxxbridge1$unique_ptr$std$vector$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$release(::std::unique_ptr<::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete$drop(::std::unique_ptr<::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::std_pair_carla_rpc_ActorId_carla_rpc_VehicleLightState_flag_type_AutocxxConcrete>>::value>{}(ptr);
}

::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *cxxbridge1$std$vector$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$new() noexcept {
  return new ::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>();
}
::std::size_t cxxbridge1$std$vector$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$size(::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> const &s) noexcept {
  return s.size();
}
::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete *cxxbridge1$std$vector$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$get_unchecked(::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *s, ::std::size_t pos) noexcept {
  return &(*s)[pos];
}
static_assert(::rust::detail::is_complete<::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>>::value, "definition of `::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>` is required");
static_assert(sizeof(::std::unique_ptr<::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>>) == sizeof(void *), "");
static_assert(alignof(::std::unique_ptr<::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>>) == alignof(void *), "");
void cxxbridge1$unique_ptr$std$vector$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$null(::std::unique_ptr<::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>> *ptr) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>>();
}
void cxxbridge1$unique_ptr$std$vector$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$raw(::std::unique_ptr<::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>> *ptr, ::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *raw) noexcept {
  ::new (ptr) ::std::unique_ptr<::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>>(raw);
}
::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> const *cxxbridge1$unique_ptr$std$vector$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$get(::std::unique_ptr<::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>> const &ptr) noexcept {
  return ptr.get();
}
::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete> *cxxbridge1$unique_ptr$std$vector$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$release(::std::unique_ptr<::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>> &ptr) noexcept {
  return ptr.release();
}
void cxxbridge1$unique_ptr$std$vector$std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete$drop(::std::unique_ptr<::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>> *ptr) noexcept {
  ::rust::deleter_if<::rust::detail::is_complete<::std::vector<::std_pair_carla_traffic_manager_RoadOption_carla_traffic_manager_WaypointPtr_AutocxxConcrete>>::value>{}(ptr);
}
} // extern "C"
