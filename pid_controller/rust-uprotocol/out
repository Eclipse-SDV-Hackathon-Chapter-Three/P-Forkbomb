   Compiling pid_cruise_control v0.1.0 (/sdv_lab/pid_controller/rust-uprotocol)
error: `self` parameter is only allowed in associated functions
   --> src/pid_controller.rs:124:20
    |
124 |     fn compute_pid(&mut self, desired_velocity: f64, current_velocity: f64, delta_time: f64) -> Result<f64, String> {
    |                    ^^^^^^^^^ not semantically valid as function parameter
    |
    = note: associated functions are those in `impl` or `trait` definitions

error[E0401]: can't use `Self` from outer item
   --> src/pid_controller.rs:124:25
    |
 52 | impl PIDController {
    | ---- `Self` type implicitly declared here, by this `impl`
...
124 |     fn compute_pid(&mut self, desired_velocity: f64, current_velocity: f64, delta_time: f64) -> Result<f64, String> {
    |                         ^^^^
    |                         |
    |                         use of `Self` from outer item
    |                         refer to the type directly here instead

error[E0308]: mismatched types
   --> src/uprotocol_handler.rs:305:68
    |
305 |             match pid.compute(desired_vel, current_vel, curr_time, lidar_ref) {
    |                       -------                                      ^^^^^^^^^ expected `pid_controller::LidarMeasurement`, found `uprotocol_handler::LidarMeasurement`
    |                       |
    |                       arguments to this method are incorrect
    |
    = note: `uprotocol_handler::LidarMeasurement` and `pid_controller::LidarMeasurement` have similar names, but are actually distinct types
note: `uprotocol_handler::LidarMeasurement` is defined in module `crate::uprotocol_handler` of the current crate
   --> src/uprotocol_handler.rs:49:1
    |
 49 | pub struct LidarMeasurement {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: `pid_controller::LidarMeasurement` is defined in module `crate::pid_controller` of the current crate
   --> src/pid_controller.rs:34:1
    |
 34 | pub struct LidarMeasurement {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: method defined here
   --> src/pid_controller.rs:65:12
    |
 65 |     pub fn compute(&mut self, desired_velocity: f64, current_velocity: f64, current_time: f64, lidar_data: Option<&LidarMeasurement>) -> ...
    |            ^^^^^^^                                                                             -------------------------------------

error[E0308]: mismatched types
  --> src/pid_controller.rs:65:138
   |
65 | ...fn compute(&mut self, desired_velocity: f64, current_velocity: f64, current_time: f64, lidar_data: Option<&LidarMeasurement>) -> Result<f64, String> {
   |       ------- implicitly returns `()` as its body has no tail or `return` expression                                                ^^^^^^^^^^^^^^^^^^^ expected `Result<f64, String>`, found `()`
   |
   = note:   expected enum `Result<f64, std::string::String>`
           found unit type `()`

warning: unused variable: `detection_count`
   --> src/uprotocol_handler.rs:758:29
    |
758 |                         let detection_count = lidar_measurement.detections.len();                        
    |                             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_detection_count`
    |
    = note: `#[warn(unused_variables)]` (part of `#[warn(unused)]`) on by default

Some errors have detailed explanations: E0308, E0401.
For more information about an error, try `rustc --explain E0308`.
warning: `pid_cruise_control` (bin "pid_controller") generated 1 warning
error: could not compile `pid_cruise_control` (bin "pid_controller") due to 4 previous errors; 1 warning emitted
